{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/PlayerCountdown/PlayerCountdown.js\";\nimport Home from '../Home/Home';\nimport React, { Component } from 'react';\nimport Sound from 'react-sound';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport './PlayerCountdown.css';\nconst SONG_TIMER_DURATION = 10;\n\nclass PlayerCountdown extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      playStatus: Sound.status.STOPPED,\n      isPlaying: false,\n      playClicked: false,\n      uniqueKey: Date.now()\n    };\n    this.exampleRef = React.createRef();\n    this.countdownIsDisplayed = false;\n\n    this.playMusicStartTimer = () => {\n      this.countdownIsDisplayed = true; //This makes the answer counter appear only when you've started playing the game and not before\n\n      this.props.showAnswerCount();\n      this.props.setNewRandomSong();\n      this.setState({\n        //This makes the countdown start counting when the new state is set (on play clicked) instead of when \n        //the page is loaded\n        uniqueKey: Date.now(),\n        playStatus: Sound.status.PLAYING,\n        isPlaying: true,\n        //This makes the 'play' button disappear once you click on it\n        playClicked: true\n      }); //sets the length and specifics of the timer\n\n      setTimeout(() => {\n        this.stopMusic();\n        this.props.coincidence();\n      }, SONG_TIMER_DURATION * 1000);\n    };\n\n    this.renderTime = value => {\n      if (value === 0) {\n        return React.createElement(\"button\", {\n          className: \"next-button\",\n          onClick: this.playMusicStartTimer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, \">>\");\n      }\n\n      return React.createElement(\"div\", {\n        className: \"timer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, value), React.createElement(\"div\", {\n        className: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"segundos\"));\n    };\n\n    this.stopMusic = () => {\n      this.setState({\n        playStatus: Sound.status.STOPPED\n      });\n    };\n  }\n\n  async componentDidMount() {\n    this.playMusicStartTimer();\n  } //id=\"play-button\"\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.state.playClicked ? null : React.createElement(Home, {\n      start: this.playMusicStartTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(Sound, {\n      url: this.props.songURL,\n      playStatus: this.state.playStatus,\n      autoLoad: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: this.countdownIsDisplayed ? \"show\" : \"hide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(CountdownCircleTimer, {\n      key: this.state.uniqueKey,\n      isPlaying: this.state.isPlaying,\n      durationSeconds: SONG_TIMER_DURATION,\n      colors: [[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]],\n      renderTime: this.renderTime,\n      size: 120,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })));\n  }\n\n}\n\n;\nexport default PlayerCountdown; //Put the information below in a README.md file later!\n// Circle Countdown Info https://www.npmjs.com/package/react-countdown-circle-timer\n// Number Countdown Info https://www.npmjs.com/package/react-countdown-now\n// React Sound Info https://www.npmjs.com/package/react-sound","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/PlayerCountdown/PlayerCountdown.js"],"names":["Home","React","Component","Sound","CountdownCircleTimer","SONG_TIMER_DURATION","PlayerCountdown","state","playStatus","status","STOPPED","isPlaying","playClicked","uniqueKey","Date","now","exampleRef","createRef","countdownIsDisplayed","playMusicStartTimer","props","showAnswerCount","setNewRandomSong","setState","PLAYING","setTimeout","stopMusic","coincidence","renderTime","value","componentDidMount","render","songURL"],"mappings":"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","sourcesContent":["import Home from '../Home/Home';\nimport React, {Component} from 'react';\nimport Sound from 'react-sound';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport './PlayerCountdown.css';\n\nconst SONG_TIMER_DURATION = 10;\n\n\nclass PlayerCountdown extends Component {\n\n  // Properties\n  state = {\n    playStatus: Sound.status.STOPPED,\n    isPlaying: false,\n    playClicked: false,\n    uniqueKey: Date.now()\n  }\n\n  // Create the ref\n  exampleRef = React.createRef(); \n  countdownIsDisplayed = false\n\n  // Methods\n  playMusicStartTimer = () => {\n\n    this.countdownIsDisplayed = true;\n\n    //This makes the answer counter appear only when you've started playing the game and not before\n    this.props.showAnswerCount(); \n\n    this.props.setNewRandomSong();\n\n    this.setState({\n      //This makes the countdown start counting when the new state is set (on play clicked) instead of when \n       //the page is loaded\n      uniqueKey: Date.now(), \n     \n      playStatus: Sound.status.PLAYING,\n      isPlaying: true,\n      //This makes the 'play' button disappear once you click on it\n      playClicked: true \n    })\n\n    //sets the length and specifics of the timer\n\n    setTimeout(() => {\n\n      this.stopMusic()\n\n      this.props.coincidence()\n\n    }, SONG_TIMER_DURATION * 1000);\n  }\n\n  renderTime = value => {\n    if (value === 0) {\n      return <button className=\"next-button\" onClick={this.playMusicStartTimer}>>></button>;\n    }\n\n    return (\n      <div className=\"timer\">\n        <div className=\"value\">{value}</div>\n        <div className=\"text\">segundos</div>\n      </div>\n    );\n  }\n\n  stopMusic = () => {\n\n    this.setState({\n      playStatus: Sound.status.STOPPED\n    })\n  }\n\n  async componentDidMount() {   \n    this.playMusicStartTimer();\n  }\n\n//id=\"play-button\"\n  render () {\n    return (\n      <div>\n\n        {\n          this.state.playClicked\n            ? null\n            : <Home start={this.playMusicStartTimer}/>\n        }\n\n        <Sound \n          url={this.props.songURL}\n          playStatus={this.state.playStatus}\n          autoLoad\n        />\n\n        <div className={this.countdownIsDisplayed? \"show\" : \"hide\"}>\n          <CountdownCircleTimer\n            key={this.state.uniqueKey}\n            isPlaying={this.state.isPlaying}\n            durationSeconds={SONG_TIMER_DURATION}\n            colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\n            renderTime={this.renderTime}\n            size={120}\n          />\n        </div>\n      </div>\n    )\n  }\n};\n\nexport default PlayerCountdown;\n\n//Put the information below in a README.md file later!\n\n// Circle Countdown Info https://www.npmjs.com/package/react-countdown-circle-timer\n\n// Number Countdown Info https://www.npmjs.com/package/react-countdown-now\n\n// React Sound Info https://www.npmjs.com/package/react-sound"]},"metadata":{},"sourceType":"module"}