{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Instagram/InstagramRoundOne/InstagramRoundOne.js\";\nimport React, { Component } from 'react';\nimport Shuffle from '../../Utils/Shuffle';\nimport ButtonIgRoundOne from './ButtonIgRoundOne';\nimport texts from '../../../texts.json';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../Utils/Loading/Loading';\nimport Register from '../../Register/Register';\nimport '../../Instagram/Instagram.css';\n\nclass InstagramRoundOne extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      randomImageSrc: \"\",\n      randomImageTags: \"\",\n      tagsOptions: [],\n      data: [],\n      gameStatus: \"loading\",\n      userClicked: false\n    };\n    this.attempts = 0;\n    this.counter = 0;\n    this.apiCleanedResult = {};\n    this.apiResultLength = 0;\n\n    this.cleanApiResponse = () => {\n      const images = this.state.data.filter(img => img.node.edge_media_to_tagged_user.edges.length !== 0);\n      console.log(\"images\", images);\n      const result = images.map(image => ({\n        src: image.node.thumbnail_resources[4].src,\n        tags: image.node.edge_media_to_tagged_user.edges.map(edge => edge.node.user.username)\n      }));\n      this.apiCleanedResult = result;\n      console.log(\"api clean result\", this.apiCleanedResult);\n      this.apiResultLength = result.length;\n      console.log('llargaria', images);\n    };\n\n    this.setRandomImageAndTags = () => {\n      Shuffle(this.apiCleanedResult);\n      const firstElement = this.apiCleanedResult.shift();\n      console.log(\"firstElement\", firstElement);\n      const imagesObjArr = this.apiCleanedResult.slice(0, 3);\n      const threeTagsArr = imagesObjArr.map(imageObj => imageObj.tags);\n      threeTagsArr.push(firstElement.tags); //Cuando hacemos el push, el mismo array, con el mismo nombre, pasa de tener 3 elementos a tener 4. Si igualamos esta array a una constante, no estaríamos guardando la array de 4 elementos resultante sinó que guardaríamos el resultado del push, que sería soplo el número 4, tantos como elementos tiene dentro la array\n\n      const threeRandomPlusCorrectTagsArr = Shuffle(threeTagsArr);\n      this.setState({\n        randomImageSrc: firstElement.src,\n        randomImageTags: firstElement.tags.map(tag => tag),\n        tagsOptions: threeRandomPlusCorrectTagsArr,\n        gameStatus: 'playing',\n        userClicked: false\n      });\n      this.attempts = this.attempts + 1;\n\n      if (this.attempts === this.apiResultLength) {\n        this.setState({\n          gameStatus: \"gameOver\"\n        });\n      }\n    };\n\n    this.addOneToCounter = () => {\n      this.counter = this.counter + 1;\n    };\n\n    this.userHasClicked = () => {\n      this.setState({\n        userClicked: true\n      });\n    };\n\n    this.formatOptions = arrayOfTaggedPeople => {\n      return arrayOfTaggedPeople.map(person => `@${person}`).join(', ');\n    };\n\n    this.profileId = '32402644';\n    this.numberOfPosts = '275';\n  }\n\n  componentDidMount() {\n    fetch(`https://www.instagram.com/graphql/query/?query_hash=e769aa130647d2354c40ea6a439bfc08&variables={\"id\":\"${this.profileId}\",\"first\":${this.numberOfPosts}}`).then(res => res.json()).then(data => this.setState({\n      data: data.data.user.edge_owner_to_timeline_media.edges\n    })).then(() => this.cleanApiResponse()).then(() => this.setRandomImageAndTags());\n  }\n\n  render() {\n    const {\n      randomImageSrc,\n      tagsOptions,\n      userClicked\n    } = this.state;\n\n    if (this.state.gameStatus === \"loading\") {\n      return React.createElement(\"div\", {\n        className: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }));\n    }\n\n    if (this.state.gameStatus === \"playing\") {\n      return React.createElement(\"div\", {\n        className: \"instagram-game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"imageAndLocationsContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, texts[this.props.language].whosTaggedQuestionText), React.createElement(\"div\", {\n        className: \"imageDisplayedContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"imageDisplayed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: randomImageSrc,\n        alt: \"radom capture from the user's instagram feed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"instagram-location-buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, tagsOptions.map((option, index) => {\n        return React.createElement(\"div\", {\n          key: index,\n          className: \"instagram-option-button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, React.createElement(ButtonIgRoundOne, {\n          value: this.formatOptions(option),\n          currentTags: this.formatOptions(this.state.randomImageTags),\n          addToCounter: this.addOneToCounter,\n          key: index,\n          setRandomImageAndTags: this.setRandomImageAndTags,\n          userClicked: userClicked,\n          userHasClicked: this.userHasClicked,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }));\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, texts[this.props.language].correctAnswers, \" \", this.counter)));\n    }\n\n    if (this.state.gameStatus === \"gameOver\" & this.state.name !== undefined) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Has llegado al final de esta ronda. Te atreves con la segunda? \"), React.createElement(Link, {\n        to: \"instagramroundtwo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Juega una segunda ronda\"));\n    } else {\n      return React.createElement(Register, {\n        currentGame: \"instagram\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default InstagramRoundOne;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Instagram/InstagramRoundOne/InstagramRoundOne.js"],"names":["React","Component","Shuffle","ButtonIgRoundOne","texts","Link","Loading","Register","InstagramRoundOne","state","randomImageSrc","randomImageTags","tagsOptions","data","gameStatus","userClicked","attempts","counter","apiCleanedResult","apiResultLength","cleanApiResponse","images","filter","img","node","edge_media_to_tagged_user","edges","length","console","log","result","map","image","src","thumbnail_resources","tags","edge","user","username","setRandomImageAndTags","firstElement","shift","imagesObjArr","slice","threeTagsArr","imageObj","push","threeRandomPlusCorrectTagsArr","setState","tag","addOneToCounter","userHasClicked","formatOptions","arrayOfTaggedPeople","person","join","profileId","numberOfPosts","componentDidMount","fetch","then","res","json","edge_owner_to_timeline_media","render","props","language","whosTaggedQuestionText","option","index","correctAnswers","name","undefined"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Shuffle from '../../Utils/Shuffle'\nimport ButtonIgRoundOne from './ButtonIgRoundOne';\nimport texts from '../../../texts.json';\nimport {Link} from 'react-router-dom';\nimport Loading from '../../Utils/Loading/Loading';\nimport Register from '../../Register/Register';\n\nimport '../../Instagram/Instagram.css';\n\nclass InstagramRoundOne extends Component {\n\n    state = {\n        randomImageSrc: \"\",\n        randomImageTags: \"\",\n        tagsOptions: [],\n        data: [],\n        gameStatus: \"loading\",\n        userClicked: false,\n    }\n\n    attempts= 0;\n    counter= 0;\n    apiCleanedResult = {}\n    apiResultLength = 0\n\n\n   //Cleans the object retrieved from the api and leaves an array of objects that just have the image source for the picture and the image location\n    cleanApiResponse = () => {\n        const images = this.state.data.filter(img => img.node.edge_media_to_tagged_user.edges.length !== 0)\n\n        console.log(\"images\", images)\n\n        const result = images.map((image) => ({\n            src: image.node.thumbnail_resources[4].src,\n            tags: image.node.edge_media_to_tagged_user.edges.map((edge) => edge.node.user.username)\n        }))\n\n        this.apiCleanedResult = result;\n        console.log(\"api clean result\", this.apiCleanedResult)\n\n        this.apiResultLength = result.length\n\n        console.log('llargaria', images)\n    }\n\n    //Takes off the first element of the array resulting in cleanApiResponse (called result) and takes the next 3 elements\n    setRandomImageAndTags = () => {\n\n        Shuffle(this.apiCleanedResult)\n\n        const firstElement = this.apiCleanedResult.shift();\n\n        console.log(\"firstElement\", firstElement)\n\n        const imagesObjArr = this.apiCleanedResult.slice(0, 3);\n\n        const threeTagsArr = imagesObjArr.map((imageObj) => imageObj.tags)\n\n        threeTagsArr.push(firstElement.tags) //Cuando hacemos el push, el mismo array, con el mismo nombre, pasa de tener 3 elementos a tener 4. Si igualamos esta array a una constante, no estaríamos guardando la array de 4 elementos resultante sinó que guardaríamos el resultado del push, que sería soplo el número 4, tantos como elementos tiene dentro la array\n\n        const threeRandomPlusCorrectTagsArr = Shuffle(threeTagsArr)\n\n        this.setState ({\n            randomImageSrc: firstElement.src,\n            randomImageTags: firstElement.tags.map((tag) => tag),\n            tagsOptions: threeRandomPlusCorrectTagsArr,\n            gameStatus: 'playing',\n            userClicked: false,\n        })\n\n        this.attempts = this.attempts+1\n\n        if(this.attempts === this.apiResultLength) {\n            this.setState ({\n                gameStatus: \"gameOver\"\n            })\n        }\n    }\n\n    addOneToCounter = () => {\n        this.counter = this.counter+1\n    }\n\n    userHasClicked = () => {\n        this.setState({\n            userClicked: true\n        })\n    }\n\n    formatOptions = (arrayOfTaggedPeople) => {\n        return arrayOfTaggedPeople.map((person) => `@${person}`).join(', ')\n    }\n\n    // profileId = '42596988';\n    //cuore ID\n\n    profileId='32402644';\n    //Rut's ID\n    numberOfPosts = '275';\n\n    componentDidMount() {\n        fetch(`https://www.instagram.com/graphql/query/?query_hash=e769aa130647d2354c40ea6a439bfc08&variables={\"id\":\"${this.profileId}\",\"first\":${this.numberOfPosts}}`)\n          .then(res => res.json())\n          .then(data => this.setState({ data: data.data.user.edge_owner_to_timeline_media.edges }))\n          .then(() => this.cleanApiResponse())\n          .then(() => this.setRandomImageAndTags())\n    }\n\n\n    render () {\n\n        const { randomImageSrc, tagsOptions, userClicked } = this.state;\n        \n        if (this.state.gameStatus === \"loading\") {\n            return (\n                <div className=\"loading\">\n                    <Loading/>\n                </div>\n            )\n        }\n\n        if (this.state.gameStatus===\"playing\") {\n            return (\n                <div className=\"instagram-game\">\n                    <div className=\"imageAndLocationsContainer\">\n                    <h1>{texts[this.props.language].whosTaggedQuestionText}</h1>\n                        <div className=\"imageDisplayedContainer\">\n                            <div className=\"imageDisplayed\">\n                                <img src={randomImageSrc} alt=\"radom capture from the user's instagram feed\" />\n                            </div>\n                        </div>\n                        \n                        <div className=\"instagram-location-buttons\">\n                            {tagsOptions.map((option, index) => {\n                                return (\n                                    <div key={index} className=\"instagram-option-button\">\n                                        <ButtonIgRoundOne\n                                            value={this.formatOptions(option)}\n                                            currentTags={this.formatOptions(this.state.randomImageTags)}\n                                            addToCounter={this.addOneToCounter}\n                                            key={index}\n                                            setRandomImageAndTags={this.setRandomImageAndTags}\n                                            userClicked={userClicked}\n                                            userHasClicked={this.userHasClicked}\n                                        />\n                                    </div>\n                                )\n                            })}\n                        </div>\n                        <p>{texts[this.props.language].correctAnswers} {this.counter}</p>\n                    </div>\n                </div>\n            )\n        } if (this.state.gameStatus===\"gameOver\" & this.state.name !== undefined) {\n            return (\n                <div>\n                    <h1>Has llegado al final de esta ronda. Te atreves con la segunda? </h1>\n                    <Link to=\"instagramroundtwo\">Juega una segunda ronda</Link>\n                </div>\n            )\n        } else {\n            return (\n                <Register currentGame={\"instagram\"}/>\n            )\n        }\n    }\n}\n\nexport default InstagramRoundOne;\n\n"]},"metadata":{},"sourceType":"module"}