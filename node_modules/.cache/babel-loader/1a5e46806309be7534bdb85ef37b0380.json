{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Game/Game.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../../App.css';\nimport './Game.css';\nimport Button from '../Button/Button';\nimport Shuffle from '../Utils/Shuffle';\nimport Spotify from '../Utils/Spotify';\nimport PlayerCountdown from '../PlayerCountdown/PlayerCountdown';\nimport Sound from 'react-sound';\nimport texts from '../../Components/texts.json';\nimport { EmailShareButton, FacebookShareButton, TwitterShareButton, WhatsappShareButton } from \"react-share\";\nimport { EmailIcon, FacebookIcon, TwitterIcon, WhatsappIcon } from \"react-share\";\nimport arrow from \"../../Pictures/arrow_left.svg\";\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.spotifyObject = {};\n    this.spotifyFilteredObjArr = [];\n    this.chosenSong = \"\";\n    this.coincidence = false;\n    this.answerCountShow = false;\n    this.unknownSongs = [];\n    this.shareurl = \"https://dreamy-bhabha-0a01ef.netlify.com\";\n    this.socialIconSize = 33;\n    this.state = {\n      songNames: [],\n      currentSong: {\n        preview_url: \"\",\n        name: \"\"\n      },\n      hideResults: true,\n      correctAnswers: 0,\n      total: 0,\n      score: 0,\n      songUrl: \"\",\n      playerState: Sound.status.PLAYING,\n      playing: false,\n      replayingSong: \"\",\n      playlistID: \"37i9dQZF1DZ06evO2EUrsw\"\n    };\n\n    this.getSongsToDisplay = currentSongName => {\n      let allSongsArr = this.spotifyObject.tracks.items.map(function (item) {\n        return item.track.name;\n      });\n      let filteredSongsArr = allSongsArr.filter(function (song) {\n        return song !== currentSongName;\n      });\n      let shuffledFilterSongsArr = Shuffle(filteredSongsArr);\n      let fourNonShuffledSongsArr = shuffledFilterSongsArr.slice(0, 3); // actually 3\n\n      fourNonShuffledSongsArr.push(currentSongName); // now 4\n\n      let fourShuffledSongsArr = Shuffle(fourNonShuffledSongsArr);\n      return fourShuffledSongsArr;\n    };\n\n    this.chooseSongs = () => {\n      this.setState({\n        songNames: this.getSongsToDisplay(this.state.currentSong.name)\n      });\n    };\n\n    this.setNewRandomSong = () => {\n      if (this.spotifyFilteredObjArr.length === 0) {\n        return;\n      }\n\n      let randomSong = this.spotifyFilteredObjArr[Math.floor(Math.random() * this.spotifyFilteredObjArr.length)].track;\n      this.spotifyFilteredObjArr = this.spotifyFilteredObjArr.filter(song => song.track.id !== randomSong.id);\n      this.setState({\n        currentSong: {\n          preview_url: randomSong.preview_url,\n          name: randomSong.name\n        },\n        songNames: this.getSongsToDisplay(randomSong.name),\n        hideResults: true,\n        total: this.state.total + 1,\n        playerState: Sound.status.STOPPED\n      });\n    };\n\n    this.writeChosenSong = songName => {\n      this.chosenSong = songName;\n    };\n\n    this.checkCoincidence = () => {\n      this.coincidence = this.state.currentSong.name === this.chosenSong;\n\n      if (this.coincidence !== true) {\n        this.unknownSongs.push(this.state.currentSong.name);\n      }\n\n      this.setState({\n        hideResults: false,\n        correctAnswers: this.coincidence ? this.state.correctAnswers + 1 : this.state.correctAnswers,\n        score: this.coincidence ? this.state.score + 10 : this.state.score\n      });\n    };\n\n    this.showAnswerCount = () => {\n      this.answerCountShow = true;\n    };\n\n    this.getSongUrl = songName => {\n      //allTracksArr is an array made of tracks (each one, in an object,\n      // and as much tracks as songs are in the playlist)\n      let allTracksArr = this.spotifyFilteredObjArr.map(item => {\n        return item.track;\n      }); //trackArr is an array with an only index which is an object with 2 properties: name and preview_url\n\n      let oneTrackArr = allTracksArr.filter(track => {\n        //Returns an array with the (only) object that fulfills this condition \n        return track.name === songName;\n      });\n      let songUrl = oneTrackArr[0].preview_url;\n      this.setState({\n        songUrl: songUrl,\n        playerState: Sound.status.PLAYING,\n        playing: true,\n        replayingSong: songName // return this.spotifyObject.tracks.items.filter(item => item.track.name === songName)[0].preview_url \n        // This does the same as getSongUrl but with much less lines\n\n      });\n    };\n\n    this.stopMusic = () => {\n      this.setState({\n        playerState: Sound.status.STOPPED,\n        playing: false\n      });\n    };\n\n    this.filterRightSongsFromSpotifyObject = spotifyObject => {\n      this.spotifyFilteredObjArr = this.spotifyObject.tracks.items.filter(function (item) {\n        return item.track.preview_url !== null;\n      });\n    };\n\n    this.setPlayingToFalse = () => {\n      this.setState({\n        playing: false\n      });\n    };\n  }\n\n  //API call to get the playlist data.\n  async componentDidMount() {\n    this.spotifyObject = await Spotify.getPlaylist(this.state.playlistID);\n    this.filterRightSongsFromSpotifyObject();\n    this.setNewRandomSong();\n  }\n  /**\n   * This fn returns an array with 4 song names randomly including the current song \n   * @param {string} currentSong - name of the current song playing\n   * @returns {array} songsToDisplay\n  */\n\n\n  //since we're probably only play with one playlist we might not need the following method\n  //BUT: it could be useful for the next stages (playing with different levels/prices)\n\n  /* componentDidUpdate  = async  (prevProps, prevState) => {\n    if (prevState.clave !== this.state.clave) {\n        \n      this.spotifyObject = await Spotify.getPlaylist(this.state.playlistID)\n      this.filterRightSongsFromSpotifyObject();\n    }\n  } \n   show = (event) => {\n     let newList = event.target.className; \n     this.setState({\n        clave: newList,\n     })\n  }*/\n  render() {\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"show\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"QuestionAndAnswers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Countdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(PlayerCountdown, {\n      onMusicPlays: this.chooseSongs,\n      setNewRandomSong: this.setNewRandomSong,\n      songURL: this.state.currentSong.preview_url,\n      coincidence: this.checkCoincidence,\n      showAnswerCount: this.showAnswerCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"FourButtons \" + (this.state.hideResults ? 'forceGrayColor' : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, this.state.songNames.map(songName => {\n      return React.createElement(Button, {\n        key: songName,\n        printedSong: songName //We write it like this so the function writeChoosenSong isn't executed when the button is rendered but when the button \n        //is clicked. Different than what we're doing some lines above in the onMusicPlays, setNewRandomSong or songURL\n        ,\n        onClick: () => this.writeChosenSong(songName),\n        currentSong: this.state.currentSong.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      id: \"counter\",\n      className: \"instruct\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: this.answerCountShow ? \"show\" : \"hide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, texts[this.props.language].correctAnswers, \" \", this.state.correctAnswers, \" \", texts[this.props.language].outofText, \" \", this.state.total), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: this.answerCountShow ? \"show\" : \"hide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"Puntos: \", this.state.score)), React.createElement(\"div\", {\n      className: this.unknownSongs.length > 0 ? \"show\" : \"hide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"instruct\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Aprende de tus errores:\"), React.createElement(\"ul\", {\n      id: \"mistakes\",\n      className: \"instruct\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, this.unknownSongs.map(song => {\n      return React.createElement(\"li\", {\n        key: song,\n        className: \"mistake-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"song-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, song), React.createElement(\"button\", {\n        className: \"repeat-button\",\n        onClick: this.state.playing ? () => this.stopMusic() : () => this.getSongUrl(song),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, this.state.playing ? \"Pausa\" : \"Vuelve a escucharla\"));\n    })), React.createElement(Sound, {\n      url: this.state.songUrl,\n      playStatus: this.state.playerState,\n      autoLoad: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    })))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(Link, {\n      className: \"link\",\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"Volver al inicio\")), React.createElement(\"div\", {\n      id: \"media-share-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"arrow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: arrow,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"share-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(EmailShareButton, {\n      url: this.shareurl,\n      title: `He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`,\n      className: \"Demo_some-network__share-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(EmailIcon, {\n      size: 50,\n      round: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    })), React.createElement(FacebookShareButton, {\n      url: this.shareurl,\n      title: `He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`,\n      className: \"Demo_some-network__share-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(FacebookIcon, {\n      size: 50,\n      round: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    })), React.createElement(TwitterShareButton, {\n      url: this.shareurl,\n      title: `He jugado con las canciones de @LaPegatina y he hecho ${this.state.score} puntos. ¿Me superas?`,\n      className: \"Demo_some-network__share-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(TwitterIcon, {\n      size: 50,\n      round: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    })), React.createElement(WhatsappShareButton, {\n      url: this.shareurl,\n      title: `He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`,\n      className: \"Demo_some-network__share-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(WhatsappIcon, {\n      size: 50,\n      round: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Game/Game.js"],"names":["React","Link","Button","Shuffle","Spotify","PlayerCountdown","Sound","texts","EmailShareButton","FacebookShareButton","TwitterShareButton","WhatsappShareButton","EmailIcon","FacebookIcon","TwitterIcon","WhatsappIcon","Game","Component","spotifyObject","spotifyFilteredObjArr","chosenSong","coincidence","answerCountShow","unknownSongs","shareurl","socialIconSize","state","songNames","currentSong","preview_url","name","hideResults","correctAnswers","total","score","songUrl","playerState","status","PLAYING","playing","replayingSong","playlistID","getSongsToDisplay","currentSongName","allSongsArr","tracks","items","map","item","track","filteredSongsArr","filter","song","shuffledFilterSongsArr","fourNonShuffledSongsArr","slice","push","fourShuffledSongsArr","chooseSongs","setState","setNewRandomSong","length","randomSong","Math","floor","random","id","STOPPED","writeChosenSong","songName","checkCoincidence","showAnswerCount","getSongUrl","allTracksArr","oneTrackArr","stopMusic","filterRightSongsFromSpotifyObject","setPlayingToFalse","componentDidMount","getPlaylist","render","props","language","outofText","arrow"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\nimport '../../App.css';\nimport './Game.css';\nimport Button from '../Button/Button';\nimport Shuffle from '../Utils/Shuffle';\nimport Spotify from '../Utils/Spotify';\nimport PlayerCountdown from '../PlayerCountdown/PlayerCountdown';\nimport Sound from 'react-sound';\nimport texts from '../../Components/texts.json';\nimport {\n  EmailShareButton,\n  FacebookShareButton,\n  TwitterShareButton,\n  WhatsappShareButton,\n} from \"react-share\";\n\nimport {\n  EmailIcon,\n  FacebookIcon,\n  TwitterIcon,\n  WhatsappIcon,\n} from \"react-share\";\n\nimport arrow from '../../Pictures/arrow_left.svg'\n\nclass Game extends React.Component {\n\n  // We have the object coming from the API call, here\n  spotifyObject = {}; \n  //This array contains the songs coming from the spotifyObject that DO ave a preview_url\n  spotifyFilteredObjArr = []; \n  //Here the actual game mechanics start\n  chosenSong = \"\";\n  coincidence = false;\n  answerCountShow= false;\n  //All the songs that the user guessed wrong are pushed into this array\n  unknownSongs= []; \n\n  shareurl=\"https://dreamy-bhabha-0a01ef.netlify.com\";\n\n  socialIconSize=33;\n\n  state = {\n \n    songNames:[],\n    currentSong: {\n        preview_url: \"\",\n        name: \"\",\n    },  \n\n    hideResults: true,\n    correctAnswers: 0,\n    total: 0,\n    score: 0,\n    songUrl: \"\",\n    playerState: Sound.status.PLAYING,\n    playing: false,\n    replayingSong: \"\",\n\n    playlistID: \"37i9dQZF1DZ06evO2EUrsw\",\n  }\n\n  //API call to get the playlist data.\n  async componentDidMount() {   \n    this.spotifyObject = await Spotify.getPlaylist(this.state.playlistID);\n    this.filterRightSongsFromSpotifyObject();\n    this.setNewRandomSong();\n  }\n\n  /**\n   * This fn returns an array with 4 song names randomly including the current song \n   * @param {string} currentSong - name of the current song playing\n   * @returns {array} songsToDisplay\n  */\n  getSongsToDisplay = (currentSongName) => {\n\n    let allSongsArr = this.spotifyObject.tracks.items.map(function (item){\n      return item.track.name;\n    });\n    \n    let filteredSongsArr = allSongsArr.filter(function (song) {\n\n      return song !== currentSongName;\n    });\n\n    let shuffledFilterSongsArr = Shuffle(filteredSongsArr);\n\n    let fourNonShuffledSongsArr = shuffledFilterSongsArr.slice(0, 3); // actually 3\n    fourNonShuffledSongsArr.push(currentSongName); // now 4\n    \n    let fourShuffledSongsArr = Shuffle(fourNonShuffledSongsArr)\n\n    return fourShuffledSongsArr;\n  }\n\n  chooseSongs = () => {\n    this.setState({\n      songNames: this.getSongsToDisplay(this.state.currentSong.name)\n    })\n  }\n\n  setNewRandomSong = () => {\n\n    if (this.spotifyFilteredObjArr.length === 0) {\n      return\n    }\n\n    let randomSong = this.spotifyFilteredObjArr[Math.floor(Math.random()*this.spotifyFilteredObjArr.length)].track;\n\n    this.spotifyFilteredObjArr = this.spotifyFilteredObjArr.filter(song => song.track.id !== randomSong.id)\n\n    this.setState({\n      currentSong: {\n        preview_url: randomSong.preview_url,\n        name: randomSong.name\n      },\n      songNames: this.getSongsToDisplay(randomSong.name),\n      hideResults: true,\n      total: this.state.total +1,\n      playerState: Sound.status.STOPPED\n    });\n  }\n  \n  writeChosenSong = (songName) => {\n    this.chosenSong = songName;\n  }\n  \n  checkCoincidence = () => {  \n    this.coincidence = this.state.currentSong.name === this.chosenSong\n\n    if (this.coincidence !== true) { \n      this.unknownSongs.push(this.state.currentSong.name)\n    }\n\n    this.setState({\n      hideResults: false,\n      correctAnswers: this.coincidence ? (this.state.correctAnswers +1) : this.state.correctAnswers,\n      score: this.coincidence ? (this.state.score +10) : this.state.score\n    })\n  }\n  \n  showAnswerCount = () => {\n    this.answerCountShow= true;\n  }\n  \n  getSongUrl = (songName) => {\n    \n    //allTracksArr is an array made of tracks (each one, in an object,\n    // and as much tracks as songs are in the playlist)\n    let allTracksArr = this.spotifyFilteredObjArr.map((item) => { \n      return item.track;\n    })\n\n    //trackArr is an array with an only index which is an object with 2 properties: name and preview_url\n    \n    let oneTrackArr = allTracksArr.filter((track) => { \n      //Returns an array with the (only) object that fulfills this condition \n      return track.name === songName \n    })\n\n    let songUrl = oneTrackArr[0].preview_url;\n\n    this.setState({\n      songUrl: songUrl,\n      playerState: Sound.status.PLAYING,\n      playing: true,\n      replayingSong: songName\n      // return this.spotifyObject.tracks.items.filter(item => item.track.name === songName)[0].preview_url \n      // This does the same as getSongUrl but with much less lines\n    }) \n  }\n  \n  stopMusic = () => {\n    this.setState({\n      playerState: Sound.status.STOPPED,\n      playing: false\n    })\n  }\n  \n  filterRightSongsFromSpotifyObject = (spotifyObject) => {\n    this.spotifyFilteredObjArr = this.spotifyObject.tracks.items.filter(function (item) {\n    return item.track.preview_url !== null})\n  }\n  \n  setPlayingToFalse = () => {\n    this.setState({\n      playing: false\n    })\n  }\n  \n  //since we're probably only play with one playlist we might not need the following method\n  //BUT: it could be useful for the next stages (playing with different levels/prices)\n            \n  /* componentDidUpdate  = async  (prevProps, prevState) => {\n    if (prevState.clave !== this.state.clave) {\n        \n      this.spotifyObject = await Spotify.getPlaylist(this.state.playlistID)\n      this.filterRightSongsFromSpotifyObject();\n    }\n  } \n\n  show = (event) => {\n\n    let newList = event.target.className; \n\n    this.setState({\n \n      clave: newList,\n\n    })\n  }*/\n\n  render() {\n    return (\n      <section>\n        <div className=\"show\"> \n          <div className=\"QuestionAndAnswers\">\n            <div className=\"Countdown\">\n              <PlayerCountdown\n                onMusicPlays={this.chooseSongs}\n                setNewRandomSong={this.setNewRandomSong}\n                songURL={this.state.currentSong.preview_url} \n                coincidence={this.checkCoincidence}\n                showAnswerCount={this.showAnswerCount}\n              />\n            </div>\n            <div className={\"FourButtons \" + (this.state.hideResults ? 'forceGrayColor' : \"\")} >\n              {this.state.songNames.map((songName) => {\n                return (\n                  <Button \n                    key={songName} \n                    printedSong={songName} \n                    //We write it like this so the function writeChoosenSong isn't executed when the button is rendered but when the button \n                    //is clicked. Different than what we're doing some lines above in the onMusicPlays, setNewRandomSong or songURL\n                    onClick={() => this.writeChosenSong(songName)}\n                    currentSong={this.state.currentSong.name}\n                  />\n                )\n              })}\n            </div>\n            <div id=\"counter\" className=\"instruct\">\n              <p className={this.answerCountShow ? \"show\" : \"hide\"}>{texts[this.props.language].correctAnswers} {this.state.correctAnswers} {texts[this.props.language].outofText} {this.state.total}</p>\n              <br/>\n              <p className={this.answerCountShow ? \"show\" : \"hide\"}>Puntos: {this.state.score}</p>\n            </div>\n            \n            <div className={this.unknownSongs.length > 0 ? \"show\" : \"hide\"}>\n                <h4 className=\"instruct\">Aprende de tus errores:</h4>\n                <ul id=\"mistakes\" className=\"instruct\">  \n                  {this.unknownSongs.map((song) => {\n                    return (\n                        <li key={song} className=\"mistake-list\">\n                          <div className=\"song-name\">\n                            {song} \n                          </div>\n                          <button className=\"repeat-button\" onClick={this.state.playing ? () => this.stopMusic() : () => this.getSongUrl(song)}>\n                            {this.state.playing ? \"Pausa\" : \"Vuelve a escucharla\"} \n                          {/* We write it with an arrow function instead of a 'normal' function so we can avoid an infinite loop \n                          when setting the state */}  \n                          </button> \n                        </li>\n                    )\n                  })}\n                </ul>\n                <Sound \n                  url={this.state.songUrl}\n                  playStatus={this.state.playerState}\n                  autoLoad\n                />\n            </div>\n          </div>\n        </div>\n        <h3><Link className=\"link\" to=\"/\">Volver al inicio</Link></h3> \n        <div id=\"media-share-buttons\">\n          <div className=\"arrow\">\n            <img src={arrow} alt=\"\"/>\n          </div>\n          <div className=\"share-buttons\">\n            <EmailShareButton \n            url={this.shareurl} \n            title={`He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`}\n            className=\"Demo_some-network__share-button\"\n            >\n              <EmailIcon size={50} round />\n            </EmailShareButton>\n\n            <FacebookShareButton \n              url={this.shareurl} \n              title={`He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`}\n              className=\"Demo_some-network__share-button\"\n            >\n              <FacebookIcon size={50} round />\n            </FacebookShareButton>\n\n            <TwitterShareButton\n              url={this.shareurl}\n              title={`He jugado con las canciones de @LaPegatina y he hecho ${this.state.score} puntos. ¿Me superas?`}\n              className=\"Demo_some-network__share-button\"\n            >\n              <TwitterIcon size={50} round />\n            </TwitterShareButton>\n\n            <WhatsappShareButton \n              url={this.shareurl} \n              title={`He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`}\n              className=\"Demo_some-network__share-button\"\n            >\n              <WhatsappIcon size={50} round />\n            </WhatsappShareButton>\n          </div>\n        </div>  \n      </section>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}