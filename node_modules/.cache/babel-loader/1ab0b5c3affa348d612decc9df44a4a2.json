{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Instagram/InstagramRoundOne/InstagramRoundOne.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Shuffle from '../../Utils/Shuffle';\nimport ButtonIgRoundOne from './ButtonIgRoundOne';\nimport texts from '../../../texts.json';\nimport Loading from '../../Utils/Loading/Loading';\nimport Register from '../../Register/Register';\nimport '../Instagram.css';\n\nclass InstagramRoundOne extends Component {\n  constructor(...args) {\n    super(...args);\n    this.NUMBER_OF_ATTEMPTS = 6;\n    this.OFICIAL_NUMBER_OF_ATTEMPTS = this.NUMBER_OF_ATTEMPTS - 1;\n    this.state = {\n      randomImageSrc: '',\n      randomImageTags: '',\n      tagsOptions: [],\n      data: [],\n      gameStatus: 'loading',\n      userClicked: false\n    };\n    this.attempts = 0;\n    this.counter = 0;\n    this.apiCleanedResult = {};\n    this.apiResultLength = 0;\n    this.profileId = '10934686';\n    this.numberOfPosts = '275';\n\n    this.cleanApiResponse = () => {\n      const {\n        data\n      } = this.state;\n      const images = data.filter(img => img.node.edge_media_to_tagged_user.edges.length !== 0);\n      const result = images.map(image => ({\n        src: image.node.thumbnail_resources[4].src,\n        tags: image.node.edge_media_to_tagged_user.edges.map(edge => edge.node.user.username)\n      }));\n      this.apiCleanedResult = result;\n      this.apiResultLength = result.length;\n    };\n\n    this.setRandomImageAndTags = () => {\n      Shuffle(this.apiCleanedResult);\n      const firstElement = this.apiCleanedResult.shift();\n      const imagesObjArr = this.apiCleanedResult.slice(0, 3);\n      const threeTagsArr = imagesObjArr.map(imageObj => imageObj.tags);\n      threeTagsArr.push(firstElement.tags); //Cuando hacemos el push, el mismo array, con el mismo nombre, pasa de tener 3 elementos a tener 4. Si igualamos esta array a una constante, no estaríamos guardando la array de 4 elementos resultante sinó que guardaríamos el resultado del push, que sería soplo el número 4, tantos como elementos tiene dentro la array\n\n      const threeRandomPlusCorrectTagsArr = Shuffle(threeTagsArr);\n      this.setState({\n        randomImageSrc: firstElement.src,\n        randomImageTags: firstElement.tags.map(tag => tag),\n        tagsOptions: threeRandomPlusCorrectTagsArr,\n        gameStatus: 'playing',\n        userClicked: false\n      });\n      this.attempts += 1; // if(this.attempts === this.apiResultLength) {\n\n      if (this.attempts === this.NUMBER_OF_ATTEMPTS) {\n        this.setState({\n          gameStatus: 'gameOver'\n        });\n      }\n    };\n\n    this.addOneToCounter = () => {\n      this.counter += 1;\n    };\n\n    this.userHasClicked = () => {\n      this.setState({\n        userClicked: true\n      });\n    };\n\n    this.formatOptions = arrayOfTaggedPeople => arrayOfTaggedPeople.map(person => `@${person}`).join(', ');\n  }\n\n  componentDidMount() {\n    fetch(`https://www.instagram.com/graphql/query/?query_hash=e769aa130647d2354c40ea6a439bfc08&variables={\"id\":\"${this.profileId}\",\"first\":${this.numberOfPosts}}`).then(res => res.json()).then(data => this.setState({\n      data: data.data.user.edge_owner_to_timeline_media.edges\n    })).then(() => this.cleanApiResponse()).then(() => this.setRandomImageAndTags());\n  } //Cleans the object retrieved from the api and leaves an array of objects that just have the image source for the picture and the image location\n\n\n  render() {\n    const {\n      language\n    } = this.props;\n    const {\n      randomImageSrc,\n      tagsOptions,\n      userClicked,\n      gameStatus,\n      randomImageTags,\n      name\n    } = this.state;\n\n    if (gameStatus === 'loading') {\n      return React.createElement(\"div\", {\n        className: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }));\n    }\n\n    if (gameStatus === 'playing') {\n      return React.createElement(\"div\", {\n        className: \"instagram-game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"imageAndLocationsContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, texts[language].whosTaggedQuestionText), React.createElement(\"div\", {\n        className: \"imageDisplayedContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"imageDisplayed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: randomImageSrc,\n        alt: \"radom capture from the user's instagram feed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"instagram-location-buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, tagsOptions.map((option, index) => {\n        return React.createElement(\"div\", {\n          key: index,\n          className: \"instagram-option-button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, React.createElement(ButtonIgRoundOne, {\n          value: this.formatOptions(option),\n          currentTags: this.formatOptions(randomImageTags),\n          addToCounter: this.addOneToCounter,\n          key: index,\n          setRandomImageAndTags: this.setRandomImageAndTags,\n          userClicked: userClicked,\n          userHasClicked: this.userHasClicked,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }));\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, texts[language].correctAnswers, this.counter, \"/\", this.oficial_number_of_attempts)));\n    }\n\n    if (gameStatus === 'gameOver' && name !== undefined) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Has llegado al final de esta ronda. Te atreves con la segunda? \"), React.createElement(Link, {\n        to: \"instagramroundtwo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Juega una segunda ronda\"));\n    }\n\n    return React.createElement(Register, {\n      currentGame: \"instagram\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default InstagramRoundOne;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Instagram/InstagramRoundOne/InstagramRoundOne.js"],"names":["React","Component","Link","Shuffle","ButtonIgRoundOne","texts","Loading","Register","InstagramRoundOne","NUMBER_OF_ATTEMPTS","OFICIAL_NUMBER_OF_ATTEMPTS","state","randomImageSrc","randomImageTags","tagsOptions","data","gameStatus","userClicked","attempts","counter","apiCleanedResult","apiResultLength","profileId","numberOfPosts","cleanApiResponse","images","filter","img","node","edge_media_to_tagged_user","edges","length","result","map","image","src","thumbnail_resources","tags","edge","user","username","setRandomImageAndTags","firstElement","shift","imagesObjArr","slice","threeTagsArr","imageObj","push","threeRandomPlusCorrectTagsArr","setState","tag","addOneToCounter","userHasClicked","formatOptions","arrayOfTaggedPeople","person","join","componentDidMount","fetch","then","res","json","edge_owner_to_timeline_media","render","language","props","name","whosTaggedQuestionText","option","index","correctAnswers","oficial_number_of_attempts","undefined"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Shuffle from '../../Utils/Shuffle'\nimport ButtonIgRoundOne from './ButtonIgRoundOne';\nimport texts from '../../../texts.json';\n\nimport Loading from '../../Utils/Loading/Loading';\nimport Register from '../../Register/Register';\n\nimport '../Instagram.css';\n\nclass InstagramRoundOne extends Component {\n\n    NUMBER_OF_ATTEMPTS = 6\n\n    OFICIAL_NUMBER_OF_ATTEMPTS = this.NUMBER_OF_ATTEMPTS - 1\n\n    state = {\n        randomImageSrc: '',\n        randomImageTags: '',\n        tagsOptions: [],\n        data: [],\n        gameStatus: 'loading',\n        userClicked: false,\n    }\n\n    attempts= 0;\n\n    counter= 0;\n\n    apiCleanedResult = {}\n\n    apiResultLength = 0\n\n    // profileId='32402644';\n    // Rut's ID\n\n    profileId = '10934686';\n    // LaPegatina ID\n\n    numberOfPosts = '275';\n\n    componentDidMount() {\n        fetch(`https://www.instagram.com/graphql/query/?query_hash=e769aa130647d2354c40ea6a439bfc08&variables={\"id\":\"${this.profileId}\",\"first\":${this.numberOfPosts}}`)\n            .then((res) => res.json())\n            .then((data) => this.setState({ data: data.data.user.edge_owner_to_timeline_media.edges }))\n            .then(() => this.cleanApiResponse())\n            .then(() => this.setRandomImageAndTags());\n    }\n\n   //Cleans the object retrieved from the api and leaves an array of objects that just have the image source for the picture and the image location\n    cleanApiResponse = () => {\n\n        const { data } = this.state;\n\n        const images = data.filter((img) => img.node.edge_media_to_tagged_user.edges.length !== 0);\n\n        const result = images.map((image) => ({\n            src: image.node.thumbnail_resources[4].src,\n            tags: image.node.edge_media_to_tagged_user.edges.map((edge) => edge.node.user.username),\n        }));\n\n        this.apiCleanedResult = result;\n\n        this.apiResultLength = result.length;\n    }\n\n    //Takes off the first element of the array resulting in cleanApiResponse (called result) and takes the next 3 elements\n    setRandomImageAndTags = () => {\n\n        Shuffle(this.apiCleanedResult);\n\n        const firstElement = this.apiCleanedResult.shift();\n\n        const imagesObjArr = this.apiCleanedResult.slice(0, 3);\n\n        const threeTagsArr = imagesObjArr.map((imageObj) => imageObj.tags);\n\n        threeTagsArr.push(firstElement.tags) //Cuando hacemos el push, el mismo array, con el mismo nombre, pasa de tener 3 elementos a tener 4. Si igualamos esta array a una constante, no estaríamos guardando la array de 4 elementos resultante sinó que guardaríamos el resultado del push, que sería soplo el número 4, tantos como elementos tiene dentro la array\n\n        const threeRandomPlusCorrectTagsArr = Shuffle(threeTagsArr);\n\n        this.setState({\n            randomImageSrc: firstElement.src,\n            randomImageTags: firstElement.tags.map((tag) => tag),\n            tagsOptions: threeRandomPlusCorrectTagsArr,\n            gameStatus: 'playing',\n            userClicked: false,\n        });\n\n        this.attempts += 1;\n\n        // if(this.attempts === this.apiResultLength) {\n        if (this.attempts === this.NUMBER_OF_ATTEMPTS) {\n            this.setState({\n                gameStatus: 'gameOver',\n            });\n        }\n    }\n\n    addOneToCounter = () => {\n        this.counter += 1;\n    }\n\n    userHasClicked = () => {\n        this.setState({\n            userClicked: true,\n        });\n    }\n\n    formatOptions = (arrayOfTaggedPeople) => arrayOfTaggedPeople.map((person) => `@${person}`).join(', ')\n\n\n    render() {\n\n        const { language } = this.props;\n\n        const { randomImageSrc, tagsOptions, userClicked, gameStatus, randomImageTags, name } = this.state;\n\n        if (gameStatus === 'loading') {\n            return (\n                <div className=\"loading\">\n                    <Loading />\n                </div>\n            );\n        }\n\n        if (gameStatus === 'playing') {\n            return (\n                <div className=\"instagram-game\">\n                    <div className=\"imageAndLocationsContainer\">\n                        <h1>{texts[language].whosTaggedQuestionText}</h1>\n                        <div className=\"imageDisplayedContainer\">\n                            <div className=\"imageDisplayed\">\n                                <img src={randomImageSrc} alt=\"radom capture from the user's instagram feed\" />\n                            </div>\n                        </div>\n\n                        <div className=\"instagram-location-buttons\">\n                            {tagsOptions.map((option, index) => {\n                                return (\n                                    <div key={index} className=\"instagram-option-button\">\n                                        <ButtonIgRoundOne\n                                            value={this.formatOptions(option)}\n                                            currentTags={this.formatOptions(randomImageTags)}\n                                            addToCounter={this.addOneToCounter}\n                                            key={index}\n                                            setRandomImageAndTags={this.setRandomImageAndTags}\n                                            userClicked={userClicked}\n                                            userHasClicked={this.userHasClicked}\n                                        />\n                                    </div>\n                                );\n                            })}\n                        </div>\n                        <p>\n                            {texts[language].correctAnswers}\n                            {this.counter}\n                            /\n                            {this.oficial_number_of_attempts}\n                        </p>\n                    </div>\n                </div>\n            );\n        }\n\n        if (gameStatus === 'gameOver' && name !== undefined) {\n            return (\n                <div>\n                    <h1>Has llegado al final de esta ronda. Te atreves con la segunda? </h1>\n                    <Link to=\"instagramroundtwo\">Juega una segunda ronda</Link>\n                </div>\n            );\n        }\n\n        return (\n            <Register currentGame=\"instagram\" />\n        );\n    }\n}\n\n\nexport default InstagramRoundOne;\n"]},"metadata":{},"sourceType":"module"}