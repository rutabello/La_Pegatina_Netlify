{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/QuizYT/QuizYT.js\";\n\n/* eslint-disable react/destructuring-assignment */\nimport React, { Component } from 'react';\nimport Shuffle from '../../Utils/Shuffle';\nimport { MyContext } from '../../../context/MyProvider';\nimport YTCountdown from '../YTCountdown/YTCountdown';\n\nclass QuizYT extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: this.props.questions,\n      index: 0,\n      // gameStatus: \"playing\",\n      correctAnswer: this.props.questions[0].answers[0],\n      points: 0 // counter: 0\n      // clicked: false\n\n    };\n\n    this.toNext = () => {\n      const {\n        questions,\n        index\n      } = this.state; // if(this.state.index > this.state.counter){\n\n      if (index < 4) {\n        this.setState({\n          index: index + 1,\n          correctAnswer: questions[index + 1].answers[0] // points: points + 1000,\n          // counter: this.state.counter+1\n\n        });\n      } else {\n        this.props.stopPlaying();\n      }\n    };\n\n    this.checkIf = e => {\n      const {\n        correctAnswer,\n        points\n      } = this.state;\n      const displayedAnswer = e.target.value;\n\n      if (displayedAnswer === correctAnswer) {\n        this.setState({\n          points: points + 1000\n        }); // this.toNext();\n      }\n    };\n  }\n\n  render() {\n    const {\n      questions,\n      index,\n      points\n    } = this.state;\n    return React.createElement(MyContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, context => React.createElement(\"div\", {\n      className: \"the-yt-quiz\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(YTCountdown, {\n      toNext: this.toNext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"quiz-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"quiz-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, questions[index].question)), React.createElement(\"div\", {\n      className: \"btn-4-YT\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, Shuffle(questions[index].answers).map((item, index) => React.createElement(\"button\", {\n      type: \"button\",\n      value: item,\n      onClick: e => (this.checkIf(e), this.toNext(), context.addPoints(points)),\n      key: index,\n      className: \"myButtonYT buttonYT titleColorYT\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, item)))));\n  }\n\n}\n\nexport default QuizYT;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/QuizYT/QuizYT.js"],"names":["React","Component","Shuffle","MyContext","YTCountdown","QuizYT","state","questions","props","index","correctAnswer","answers","points","toNext","setState","stopPlaying","checkIf","e","displayedAnswer","target","value","render","context","question","map","item","addPoints"],"mappings":"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","sourcesContent":["/* eslint-disable react/destructuring-assignment */\nimport React, { Component } from 'react';\nimport Shuffle from '../../Utils/Shuffle';\nimport { MyContext } from '../../../context/MyProvider';\nimport YTCountdown from '../YTCountdown/YTCountdown';\n\nclass QuizYT extends Component {\n\nstate={\n    questions: this.props.questions,\n    index: 0,\n    // gameStatus: \"playing\",\n    correctAnswer: this.props.questions[0].answers[0],\n    points: 0,\n    // counter: 0\n    // clicked: false\n}\n// function the is passing to the next question{by increasing the index} and adding points for the right ones\n\n    toNext = () => {\n\n        const { questions, index } = this.state;\n        // if(this.state.index > this.state.counter){\n        if (index < 4) {\n            this.setState({\n                index: index + 1,\n                correctAnswer: questions[index + 1].answers[0],\n\n                // points: points + 1000,\n                // counter: this.state.counter+1\n            });\n        } else {\n            this.props.stopPlaying();\n        }\n    }\n\n    checkIf = (e) => {\n\n        const { correctAnswer, points } = this.state;\n\n        const displayedAnswer = e.target.value;\n\n        if (displayedAnswer === correctAnswer) {\n           this.setState({\n               points: points + 1000,\n           })\n            // this.toNext();\n        }\n    }\n\n\n    render() {\n\n        const { questions, index, points } = this.state;\n\n        return (\n            <MyContext.Consumer>\n                    {(context) => (\n\n            <div className=\"the-yt-quiz\">\n            <YTCountdown toNext={this.toNext}/>\n                <div className=\"quiz-text\">\n                    <h4 className ='quiz-text'>{questions[index].question}</h4>\n                    {/* <h6 className ='quiz-text'>\n                        Score:\n                        {points}\n                    </h6> */}\n                </div>\n                <div className=\"btn-4-YT\">\n                    {Shuffle(questions[index].answers).map((item, index) => (\n                        <button\n                            type=\"button\"\n                            value={item}\n                            onClick={(e)=>(this.checkIf(e), this.toNext(),context.addPoints(points))}\n                            key={index}\n                            className=\"myButtonYT buttonYT titleColorYT\"\n                        >\n                        {item}\n                        </button>\n                    ))}\n                </div>\n            </div>\n                    )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\n\nexport default QuizYT;\n"]},"metadata":{},"sourceType":"module"}