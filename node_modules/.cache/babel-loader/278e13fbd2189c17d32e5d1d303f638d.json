{"ast":null,"code":"//!!! IMPORTANT: No push to github as long as the clientId is visible in the files!\n// import { TOKEN } from './token'\nconst clientId = \"\"; // const redirectUri = 'http://playwith.es'; \n\nconst redirectUri = 'http://localhost:3000/game';\nlet accessToken;\nconst Spotify = {\n  getaccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000); // This clears the parameters, allowing me to grab a new access token when it expires.\n\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  getPlaylist(list) {\n    let ID = list;\n    const accessToken = Spotify.getaccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(`https://api.spotify.com/v1/playlists/${ID}`, {\n      headers: headers\n    }).then(response => {\n      return response.json();\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getaccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n}; // This way you can access the returned object. \"collaborative\" is just the first property that appears,\n// probably nothing we will actually use, just as an example of how to access it.\n// const play = Spotify.getPlaylist().then((value) => {console.log(value.collaborative)});\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Utils/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getaccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","getPlaylist","list","ID","headers","Authorization","fetch","then","response","json","savePlaylist","name","trackUris","length","userId","jsonResponse","id","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["//!!! IMPORTANT: No push to github as long as the clientId is visible in the files!\n// import { TOKEN } from './token'\nconst clientId = \"\";\n// const redirectUri = 'http://playwith.es'; \nconst redirectUri = 'http://localhost:3000/game';\nlet accessToken;\n\n\nconst Spotify = {\n\n\n  getaccessToken () {\n    if (accessToken){\n      return accessToken ;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    \n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      // This clears the parameters, allowing me to grab a new access token when it expires.\n      window.history.pushState('Access Token', null, '/'); \n      return accessToken ;\n    \n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  getPlaylist(list) {\n    let ID = list;\n    const accessToken = Spotify.getaccessToken();                   \n    const headers = { Authorization: `Bearer ${accessToken}` };\n\n    return fetch(`https://api.spotify.com/v1/playlists/${ID}`, {headers: headers})\n    .then(response => {\n      return response.json();\n    });\n  },\n\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getaccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n    });\n  }\n}\n \n// This way you can access the returned object. \"collaborative\" is just the first property that appears,\n// probably nothing we will actually use, just as an example of how to access it.\n// const play = Spotify.getPlaylist().then((value) => {console.log(value.collaborative)});\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}