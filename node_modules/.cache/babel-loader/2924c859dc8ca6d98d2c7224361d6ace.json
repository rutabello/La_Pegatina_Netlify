{"ast":null,"code":"// !!! IMPORTANT: No push to github as long as the clientId is visible in the files!\n// import { TOKEN } from './token'\nconst clientId = '5a36a3d1f9bc4712b321e760813bb8f6';\nlet accessToken; // for connection with the map: connect playlist id to the markers and save it in a const to insert it later in the\n// getplaylist() method.\n\nconst Spotify = {\n  getaccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    const redirectUri = window.location.href;\n\n    if (accessTokenMatch && expiresInMatch) {\n      // eslint-disable-next-line prefer-destructuring\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => {\n        accessToken = '';\n      }, expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing me to grab a new access token when it expires.\n\n      return accessToken;\n    }\n\n    const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token` + `&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n    window.location = accessUrl;\n    return false;\n  },\n\n  getPlaylist(country) {\n    const ID = country;\n    const accessToken = Spotify.getaccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(`https://api.spotify.com/v1/playlists/${ID}`, {\n      headers\n    }).then(response => response.json());\n  },\n\n  changeID() {\n    const country = '6HiZDoQlmYliE3RhFm4Fek';\n    this.setState({\n      playlistID: country\n    });\n  }\n\n}; // This way you can access the returned object. \"collaborative\" is just the first property that appears,\n// probably nothing we will actually use, just as an example of how to access it.\n// const play = Spotify.getPlaylist().then((value) => {console.log(value.collaborative)});\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Utils/Spotify.js"],"names":["clientId","accessToken","Spotify","getaccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","redirectUri","expiresIn","Number","setTimeout","history","pushState","accessUrl","getPlaylist","country","ID","headers","Authorization","fetch","then","response","json","changeID","setState","playlistID"],"mappings":"AAAA;AACA;AACA,MAAMA,QAAQ,GAAG,kCAAjB;AAEA,IAAIC,WAAJ,C,CACA;AACA;;AAEA,MAAMC,OAAO,GAAG;AAEZC,EAAAA,cAAc,GAAG;AACb,QAAIF,WAAJ,EAAiB;AACb,aAAOA,WAAP;AACH;;AAED,UAAMG,gBAAgB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAzB;AACA,UAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;AACA,UAAME,WAAW,GAAGL,MAAM,CAACC,QAAP,CAAgBC,IAApC;;AAEA,QAAIH,gBAAgB,IAAIK,cAAxB,EAAwC;AACpC;AACAR,MAAAA,WAAW,GAAGG,gBAAgB,CAAC,CAAD,CAA9B;AAEA,YAAMO,SAAS,GAAGC,MAAM,CAACH,cAAc,CAAC,CAAD,CAAf,CAAxB;AACAJ,MAAAA,MAAM,CAACQ,UAAP,CAAkB,MAAM;AAAEZ,QAAAA,WAAW,GAAG,EAAd;AAAmB,OAA7C,EAA+CU,SAAS,GAAG,IAA3D;AACAN,MAAAA,MAAM,CAACS,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C,EANoC,CAOpC;;AACA,aAAOd,WAAP;AACH;;AAED,UAAMe,SAAS,GAAI,oDAAmDhB,QAAS,sBAA7D,GACX,8CAA6CU,WAAY,EADhE;AAEAL,IAAAA,MAAM,CAACC,QAAP,GAAkBU,SAAlB;AACA,WAAO,KAAP;AACH,GA1BW;;AA4BZC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,UAAMC,EAAE,GAAGD,OAAX;AACA,UAAMjB,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AACA,UAAMiB,OAAO,GAAG;AAAEC,MAAAA,aAAa,EAAG,UAASpB,WAAY;AAAvC,KAAhB;AAEA,WAAOqB,KAAK,CAAE,wCAAuCH,EAAG,EAA5C,EAA+C;AAAEC,MAAAA;AAAF,KAA/C,CAAL,CACFG,IADE,CACIC,QAAD,IAAeA,QAAQ,CAACC,IAAT,EADlB,CAAP;AAGH,GApCW;;AAsCZC,EAAAA,QAAQ,GAAG;AACP,UAAMR,OAAO,GAAG,wBAAhB;AACA,SAAKS,QAAL,CAAc;AACVC,MAAAA,UAAU,EAAEV;AADF,KAAd;AAGH;;AA3CW,CAAhB,C,CA8CA;AACA;AACA;;AAEA,eAAehB,OAAf","sourcesContent":["// !!! IMPORTANT: No push to github as long as the clientId is visible in the files!\n// import { TOKEN } from './token'\nconst clientId = '5a36a3d1f9bc4712b321e760813bb8f6';\n\nlet accessToken;\n// for connection with the map: connect playlist id to the markers and save it in a const to insert it later in the\n// getplaylist() method.\n\nconst Spotify = {\n\n    getaccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n        const redirectUri = window.location.href;\n\n        if (accessTokenMatch && expiresInMatch) {\n            // eslint-disable-next-line prefer-destructuring\n            accessToken = accessTokenMatch[1];\n\n            const expiresIn = Number(expiresInMatch[1]);\n            window.setTimeout(() => { accessToken = ''; }, expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            // This clears the parameters, allowing me to grab a new access token when it expires.\n            return accessToken;\n        }\n\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token`\n            + `&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n        window.location = accessUrl;\n        return false;\n    },\n\n    getPlaylist(country) {\n        const ID = country;\n        const accessToken = Spotify.getaccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n\n        return fetch(`https://api.spotify.com/v1/playlists/${ID}`, { headers })\n            .then((response) => (response.json()\n            ));\n    },\n\n    changeID() {\n        const country = '6HiZDoQlmYliE3RhFm4Fek';\n        this.setState({\n            playlistID: country,\n        });\n    },\n};\n\n// This way you can access the returned object. \"collaborative\" is just the first property that appears,\n// probably nothing we will actually use, just as an example of how to access it.\n// const play = Spotify.getPlaylist().then((value) => {console.log(value.collaborative)});\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}