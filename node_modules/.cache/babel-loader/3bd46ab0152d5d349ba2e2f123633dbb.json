{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Game/Game.js\";\nimport React from 'react';\nimport '../../App.css';\nimport './Game.css';\nimport Button from '../Button/Button';\nimport Shuffle from '../Utils/Shuffle';\nimport Spotify from '../Utils/Spotify';\nimport PlayerCountdown from '../PlayerCountdown/PlayerCountdown';\nimport ShareTheGame from '../ShareTheGame/ShareTheGame';\nimport Sound from 'react-sound';\nimport texts from '../../texts.json';\nimport ListenedSongs from '../ListenedSongs/ListenedSongs'; // import {Link} from 'react-router-dom';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.spotifyObject = {};\n    this.spotifyFilteredObjArr = [];\n    this.chosenSong = \"\";\n    this.coincidence = false;\n    this.answerCountShow = false;\n    this.unknownSongs = [];\n    this.state = {\n      songNames: [],\n      currentSong: {\n        preview_url: \"\",\n        name: \"\",\n        uri: \"\"\n      },\n      hideResults: true,\n      correctAnswers: 0,\n      total: 0,\n      score: 0,\n      songUrl: \"\",\n      playerState: Sound.status.PLAYING,\n      playing: false,\n      replayingSong: \"\",\n      playlistID: \"37i9dQZF1DZ06evO2EUrsw\"\n    };\n\n    this.getSongsToDisplay = currentSongName => {\n      let allSongsArr = this.spotifyObject.tracks.items.map(function (item) {\n        return item.track.name;\n      });\n      let filteredSongsArr = allSongsArr.filter(function (song) {\n        return song !== currentSongName;\n      });\n      let shuffledFilterSongsArr = Shuffle(filteredSongsArr);\n      let fourNonShuffledSongsArr = shuffledFilterSongsArr.slice(0, 3); // actually 3\n\n      fourNonShuffledSongsArr.push(currentSongName); // now 4\n\n      let fourShuffledSongsArr = Shuffle(fourNonShuffledSongsArr);\n      return fourShuffledSongsArr;\n    };\n\n    this.chooseSongs = () => {\n      this.setState({\n        songNames: this.getSongsToDisplay(this.state.currentSong.name)\n      });\n    };\n\n    this.setNewRandomSong = () => {\n      if (this.spotifyFilteredObjArr.length === 0) {\n        return;\n      }\n\n      let randomSong = this.spotifyFilteredObjArr[Math.floor(Math.random() * this.spotifyFilteredObjArr.length)].track;\n      this.spotifyFilteredObjArr = this.spotifyFilteredObjArr.filter(song => song.track.id !== randomSong.id);\n      this.setState({\n        currentSong: {\n          preview_url: randomSong.preview_url,\n          name: randomSong.name,\n          uri: randomSong.uri\n        },\n        songNames: this.getSongsToDisplay(randomSong.name),\n        hideResults: true,\n        total: this.state.total + 1,\n        playerState: Sound.status.STOPPED\n      });\n    };\n\n    this.writeChosenSong = songName => {\n      this.chosenSong = songName;\n    };\n\n    this.checkCoincidence = () => {\n      this.coincidence = this.state.currentSong.name === this.chosenSong;\n      this.unknownSongs.push(this.state.currentSong);\n      this.setState({\n        hideResults: false,\n        correctAnswers: this.coincidence ? this.state.correctAnswers + 1 : this.state.correctAnswers,\n        score: this.coincidence ? this.state.score + 10 : this.state.score\n      });\n    };\n\n    this.showAnswerCount = () => {\n      this.answerCountShow = true;\n    };\n\n    this.getSongUrl = songName => {\n      //allTracksArr is an array made of tracks (each one, in an object,\n      // and as much tracks as songs are in the playlist)\n      let allTracksArr = this.spotifyFilteredObjArr.map(item => {\n        return item.track;\n      }); //trackArr is an array with an only index which is an object with 2 properties: name and preview_url\n\n      let oneTrackArr = allTracksArr.filter(track => {\n        //Returns an array with the (only) object that fulfills this condition \n        return track.name === songName;\n      });\n      let songUrl = oneTrackArr[0].preview_url;\n      this.setState({\n        songUrl: songUrl,\n        playerState: Sound.status.PLAYING,\n        playing: true,\n        replayingSong: songName // return this.spotifyObject.tracks.items.filter(item => item.track.name === songName)[0].preview_url \n        // This does the same as getSongUrl but with much less lines\n\n      });\n    };\n\n    this.stopMusic = () => {\n      this.setState({\n        playerState: Sound.status.STOPPED,\n        playing: false\n      });\n    };\n\n    this.filterRightSongsFromSpotifyObject = spotifyObject => {\n      this.spotifyFilteredObjArr = this.spotifyObject.tracks.items.filter(function (item) {\n        return item.track.preview_url !== null;\n      });\n    };\n\n    this.setPlayingToFalse = () => {\n      this.setState({\n        playing: false\n      });\n    };\n  }\n\n  //API call to get the playlist data.\n  async componentDidMount() {\n    this.spotifyObject = await Spotify.getPlaylist(this.state.playlistID);\n    this.filterRightSongsFromSpotifyObject();\n    this.setNewRandomSong();\n  }\n  /**\n   * This fn returns an array with 4 song names randomly including the current song \n   * @param {string} currentSong - name of the current song playing\n   * @returns {array} songsToDisplay\n  */\n\n\n  render() {\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(ShareTheGame, {\n      score: this.state.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"show\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"QuestionAndAnswers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Countdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(PlayerCountdown, {\n      language: this.props.language,\n      onMusicPlays: this.chooseSongs,\n      setNewRandomSong: this.setNewRandomSong,\n      songURL: this.state.currentSong.preview_url,\n      coincidence: this.checkCoincidence,\n      showAnswerCount: this.showAnswerCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"FourButtons \" + (this.state.hideResults ? 'forceGrayColor' : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, this.state.songNames.map(songName => {\n      return React.createElement(Button, {\n        key: songName,\n        printedSong: songName //We write it like this so the function writeChoosenSong isn't executed when the button is rendered but when the button \n        //is clicked. Different than what we're doing some lines above in the onMusicPlays, setNewRandomSong or songURL\n        ,\n        onClick: () => this.writeChosenSong(songName),\n        currentSong: this.state.currentSong.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      id: \"counter\",\n      className: \"instruct\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: this.answerCountShow ? \"show\" : \"hide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, texts[this.props.language].correctAnswers, \" \", this.state.correctAnswers, \" \", texts[this.props.language].outofText, \" \", this.state.total), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: this.answerCountShow ? \"show\" : \"hide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, texts[this.props.language].pointsText, \" \", this.state.score)), React.createElement(ListenedSongs, {\n      unknownSongs: this.unknownSongs,\n      language: this.props.language,\n      url: this.state.songUrl,\n      playStatus: this.state.playerState,\n      onClick: this.state.playing,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Game/Game.js"],"names":["React","Button","Shuffle","Spotify","PlayerCountdown","ShareTheGame","Sound","texts","ListenedSongs","Game","Component","spotifyObject","spotifyFilteredObjArr","chosenSong","coincidence","answerCountShow","unknownSongs","state","songNames","currentSong","preview_url","name","uri","hideResults","correctAnswers","total","score","songUrl","playerState","status","PLAYING","playing","replayingSong","playlistID","getSongsToDisplay","currentSongName","allSongsArr","tracks","items","map","item","track","filteredSongsArr","filter","song","shuffledFilterSongsArr","fourNonShuffledSongsArr","slice","push","fourShuffledSongsArr","chooseSongs","setState","setNewRandomSong","length","randomSong","Math","floor","random","id","STOPPED","writeChosenSong","songName","checkCoincidence","showAnswerCount","getSongUrl","allTracksArr","oneTrackArr","stopMusic","filterRightSongsFromSpotifyObject","setPlayingToFalse","componentDidMount","getPlaylist","render","props","language","outofText","pointsText"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../App.css';\nimport './Game.css';\nimport Button from '../Button/Button';\nimport Shuffle from '../Utils/Shuffle';\nimport Spotify from '../Utils/Spotify';\nimport PlayerCountdown from '../PlayerCountdown/PlayerCountdown';\nimport ShareTheGame from '../ShareTheGame/ShareTheGame';\nimport Sound from 'react-sound';\nimport texts from '../../texts.json';\nimport ListenedSongs from '../ListenedSongs/ListenedSongs';\n// import {Link} from 'react-router-dom';\n\nclass Game extends React.Component {\n\n  // We have the object coming from the API call, here\n  spotifyObject = {}; \n  //This array contains the songs coming from the spotifyObject that DO ave a preview_url\n  spotifyFilteredObjArr = []; \n  //Here the actual game mechanics start\n  chosenSong = \"\";\n  coincidence = false;\n  answerCountShow= false;\n  //All the songs that the user guessed wrong are pushed into this array\n  unknownSongs= []; \n\n  state = {\n \n    songNames:[],\n    currentSong: {\n        preview_url: \"\",\n        name: \"\",\n        uri: \"\",\n    },  \n\n    hideResults: true,\n    correctAnswers: 0,\n    total: 0,\n    score: 0,\n    songUrl: \"\",\n    playerState: Sound.status.PLAYING,\n    playing: false,\n    replayingSong: \"\",\n\n    playlistID: \"37i9dQZF1DZ06evO2EUrsw\",\n  }\n\n  //API call to get the playlist data.\n  async componentDidMount() {   \n    this.spotifyObject = await Spotify.getPlaylist(this.state.playlistID);\n    this.filterRightSongsFromSpotifyObject();\n    this.setNewRandomSong();\n  }\n\n  /**\n   * This fn returns an array with 4 song names randomly including the current song \n   * @param {string} currentSong - name of the current song playing\n   * @returns {array} songsToDisplay\n  */\n  getSongsToDisplay = (currentSongName) => {\n\n    let allSongsArr = this.spotifyObject.tracks.items.map(function (item){\n      return item.track.name;\n    });\n    \n    let filteredSongsArr = allSongsArr.filter(function (song) {\n\n      return song !== currentSongName;\n    });\n\n    let shuffledFilterSongsArr = Shuffle(filteredSongsArr);\n\n    let fourNonShuffledSongsArr = shuffledFilterSongsArr.slice(0, 3); // actually 3\n    fourNonShuffledSongsArr.push(currentSongName); // now 4\n    \n    let fourShuffledSongsArr = Shuffle(fourNonShuffledSongsArr)\n\n    return fourShuffledSongsArr;\n  }\n\n  chooseSongs = () => {\n    this.setState({\n      songNames: this.getSongsToDisplay(this.state.currentSong.name)\n    })\n  }\n\n  setNewRandomSong = () => {\n\n    if (this.spotifyFilteredObjArr.length === 0) {\n      return\n    }\n\n    let randomSong = this.spotifyFilteredObjArr[Math.floor(Math.random()*this.spotifyFilteredObjArr.length)].track;\n\n    this.spotifyFilteredObjArr = this.spotifyFilteredObjArr.filter(song => song.track.id !== randomSong.id)\n\n    this.setState({\n      currentSong: {\n        preview_url: randomSong.preview_url,\n        name: randomSong.name,\n        uri: randomSong.uri\n      },\n      songNames: this.getSongsToDisplay(randomSong.name),\n      hideResults: true,\n      total: this.state.total +1,\n      playerState: Sound.status.STOPPED\n    });\n  }\n  \n  writeChosenSong = (songName) => {\n    this.chosenSong = songName;\n  }\n  \n  checkCoincidence = () => {  \n    this.coincidence = this.state.currentSong.name === this.chosenSong\n\n    this.unknownSongs.push(this.state.currentSong)\n\n    this.setState({\n      hideResults: false,\n      correctAnswers: this.coincidence ? (this.state.correctAnswers +1) : this.state.correctAnswers,\n      score: this.coincidence ? (this.state.score +10) : this.state.score\n    })\n  }\n  \n  showAnswerCount = () => {\n    this.answerCountShow= true;\n  }\n  \n  getSongUrl = (songName) => {\n    \n    //allTracksArr is an array made of tracks (each one, in an object,\n    // and as much tracks as songs are in the playlist)\n    let allTracksArr = this.spotifyFilteredObjArr.map((item) => { \n      return item.track;\n    })\n\n    //trackArr is an array with an only index which is an object with 2 properties: name and preview_url\n    \n    let oneTrackArr = allTracksArr.filter((track) => { \n      //Returns an array with the (only) object that fulfills this condition \n      return track.name === songName \n    })\n\n    let songUrl = oneTrackArr[0].preview_url;\n\n    this.setState({\n      songUrl: songUrl,\n      playerState: Sound.status.PLAYING,\n      playing: true,\n      replayingSong: songName\n      // return this.spotifyObject.tracks.items.filter(item => item.track.name === songName)[0].preview_url \n      // This does the same as getSongUrl but with much less lines\n    }) \n  }\n  \n  stopMusic = () => {\n    this.setState({\n      playerState: Sound.status.STOPPED,\n      playing: false\n    })\n  }\n  \n  filterRightSongsFromSpotifyObject = (spotifyObject) => {\n    this.spotifyFilteredObjArr = this.spotifyObject.tracks.items.filter(function (item) {\n    return item.track.preview_url !== null})\n  }\n  \n  setPlayingToFalse = () => {\n    this.setState({\n      playing: false\n    })\n  }\n  \n\n  render() {\n    return (\n      <section>\n        \n        <ShareTheGame score={this.state.score} />\n        \n        <div className=\"show\"> \n          <div className=\"QuestionAndAnswers\">\n            <div className=\"Countdown\">\n              <PlayerCountdown\n                language={this.props.language}\n                onMusicPlays={this.chooseSongs}\n                setNewRandomSong={this.setNewRandomSong}\n                songURL={this.state.currentSong.preview_url} \n                coincidence={this.checkCoincidence}\n                showAnswerCount={this.showAnswerCount}\n              />\n            </div>\n            <div className={\"FourButtons \" + (this.state.hideResults ? 'forceGrayColor' : \"\")} >\n              {this.state.songNames.map((songName) => {\n                return (\n                  <Button \n                    key={songName} \n                    printedSong={songName} \n                    //We write it like this so the function writeChoosenSong isn't executed when the button is rendered but when the button \n                    //is clicked. Different than what we're doing some lines above in the onMusicPlays, setNewRandomSong or songURL\n                    onClick={() => this.writeChosenSong(songName)}\n                    currentSong={this.state.currentSong.name}\n                  />\n                )\n              })}\n            </div>\n            <div id=\"counter\" className=\"instruct\">\n              <p className={this.answerCountShow ? \"show\" : \"hide\"}>{texts[this.props.language].correctAnswers} {this.state.correctAnswers} {texts[this.props.language].outofText} {this.state.total}</p>\n              <br/>\n              <p className={this.answerCountShow ? \"show\" : \"hide\"}>{texts[this.props.language].pointsText} {this.state.score}</p>\n            </div>\n            \n            <ListenedSongs unknownSongs={this.unknownSongs} language={this.props.language} url={this.state.songUrl} playStatus={this.state.playerState} onClick={this.state.playing} />\n          </div>\n        </div>  \n      </section>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}