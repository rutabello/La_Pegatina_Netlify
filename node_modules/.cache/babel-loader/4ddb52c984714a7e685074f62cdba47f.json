{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/YTGame/YTGame.js\";\n\n/* eslint-disable react/no-did-mount-set-state */\nimport React, { Component } from 'react';\nimport YTPlayer from '../YTPlayer/YTPlayer';\nimport './YTGame.css'; // import getPlayListItems from '../Api/Api';\n\nimport Shuffle from '../../Utils/Shuffle';\nimport videoDataObject from '../VideoDataObject'; // console.log (getPlayListItems())\n\nclass YTGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {},\n      // oneVideoID: '',\n      randomVideoId: '',\n      // playlistItemsArr: [],\n      // currentSongTitle: '',\n      fourNonShuffledSongsTitles: [],\n      questions: [],\n      // answers:[],\n      currentTitle: ''\n    };\n\n    this.componentDidMount = () => {\n      const json = JSON.stringify(videoDataObject);\n      const newdata = JSON.parse(json); // getting from the pending promise the data\n      // let promise = getPlayListItems();\n      // promise.then((data) => {\n      //   const modifiedData = getPlayListItems(data);\n      //   // save the data into the state\n      // console.log(json)\n\n      this.setState({\n        data: newdata\n      }); // this is the question\n\n      const arrayPlaylist = []; // Recover the videoIDs from the data(api) and push in an array\n\n      newdata.map(element => {\n        // here be the if statement\n        arrayPlaylist.push(element.videoId);\n        return arrayPlaylist;\n      }); // create the random from one videoid\n\n      const randomVideoId = arrayPlaylist[Math.floor(Math.random() * arrayPlaylist.length)];\n      this.setState({\n        randomVideoId,\n        questions: newdata[arrayPlaylist.indexOf(randomVideoId)].questions,\n        currentTitle: newdata[arrayPlaylist.indexOf(randomVideoId)].title // currentSongTitle:\n\n      }); // create the array with the title of the songs for the button shuffle(tu put in other buttons)\n\n      const arraySongTitles = [];\n      newdata.map(element => {\n        arraySongTitles.push(element.title);\n        return arraySongTitles;\n      }); // removed from the array the title of the song that is playing so it wont dublicate in the buttons\n\n      arraySongTitles.splice(arrayPlaylist.indexOf(randomVideoId), 1); // shuffle function that reorganize the order of the song title\n\n      const suffledArraySongTitles = Shuffle(arraySongTitles);\n      const fourNonShuffledSongsTitles = suffledArraySongTitles.slice(0, 3); // actually 3\n      // fourNonShuffledSongsTitles.push(currentSongName); // now 4\n      //  const fourShuffledSongsTitles = Shuffle(fourNonShuffledSongsTitles)\n      // console.log(fourShuffledSongsTitles)\n      // return fourNonShuffledSongsTitles;\n\n      this.setState({\n        fourNonShuffledSongsTitles\n      });\n    };\n  }\n\n  render() {\n    const {\n      fourNonShuffledSongsTitles,\n      randomVideoId,\n      data,\n      currentTitle,\n      questions,\n      stopPlaying\n    } = this.state;\n    const {\n      language\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"yt-all\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cover-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"instuctionsYT\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"yt-player\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(YTPlayer, {\n      det: fourNonShuffledSongsTitles,\n      videoId: randomVideoId,\n      info: data,\n      title: currentTitle,\n      questions: questions,\n      stopPlaying: this.props.stopPlaying,\n      language: language,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default YTGame;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/YTGame/YTGame.js"],"names":["React","Component","YTPlayer","Shuffle","videoDataObject","YTGame","state","data","randomVideoId","fourNonShuffledSongsTitles","questions","currentTitle","componentDidMount","json","JSON","stringify","newdata","parse","setState","arrayPlaylist","map","element","push","videoId","Math","floor","random","length","indexOf","title","arraySongTitles","splice","suffledArraySongTitles","slice","render","stopPlaying","language","props"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-did-mount-set-state */\nimport React, { Component } from 'react';\nimport YTPlayer from '../YTPlayer/YTPlayer';\nimport './YTGame.css';\n// import getPlayListItems from '../Api/Api';\nimport Shuffle from '../../Utils/Shuffle';\nimport videoDataObject from '../VideoDataObject';\n// console.log (getPlayListItems())\n\nclass YTGame extends Component {\n\n    state = {\n        data: {},\n        // oneVideoID: '',\n        randomVideoId: '',\n        // playlistItemsArr: [],\n        // currentSongTitle: '',\n        fourNonShuffledSongsTitles: [],\n        questions: [],\n        // answers:[],\n        currentTitle: '',\n    }\n\n\n    componentDidMount = () => {\n        const json = JSON.stringify(videoDataObject);\n        const newdata = JSON.parse(json);\n        // getting from the pending promise the data\n        // let promise = getPlayListItems();\n        // promise.then((data) => {\n        //   const modifiedData = getPlayListItems(data);\n        //   // save the data into the state\n        // console.log(json)\n\n        this.setState({\n            data: newdata,\n        });\n\n        // this is the question\n\n        const arrayPlaylist = [];\n        // Recover the videoIDs from the data(api) and push in an array\n        newdata.map((element) => {\n        // here be the if statement\n            arrayPlaylist.push(element.videoId);\n            return arrayPlaylist;\n        });\n\n        // create the random from one videoid\n        const randomVideoId = arrayPlaylist[Math.floor(Math.random() * arrayPlaylist.length)];\n        this.setState({\n            randomVideoId,\n            questions: newdata[arrayPlaylist.indexOf(randomVideoId)].questions,\n            currentTitle: newdata[arrayPlaylist.indexOf(randomVideoId)].title,\n            // currentSongTitle:\n        });\n\n\n        // create the array with the title of the songs for the button shuffle(tu put in other buttons)\n        const arraySongTitles = [];\n        newdata.map((element) => {\n            arraySongTitles.push(element.title);\n            return arraySongTitles;\n        });\n        // removed from the array the title of the song that is playing so it wont dublicate in the buttons\n        arraySongTitles.splice(arrayPlaylist.indexOf(randomVideoId), 1);\n\n        // shuffle function that reorganize the order of the song title\n        const suffledArraySongTitles = Shuffle(arraySongTitles);\n        const fourNonShuffledSongsTitles = suffledArraySongTitles.slice(0, 3); // actually 3\n\n        // fourNonShuffledSongsTitles.push(currentSongName); // now 4\n\n        //  const fourShuffledSongsTitles = Shuffle(fourNonShuffledSongsTitles)\n        // console.log(fourShuffledSongsTitles)\n        // return fourNonShuffledSongsTitles;\n        this.setState({\n            fourNonShuffledSongsTitles,\n        });\n    }\n\n\n    render() {\n\n        const { fourNonShuffledSongsTitles, randomVideoId, data, currentTitle, questions, stopPlaying } = this.state;\n\n        const { language } = this.props;\n\n        return (\n            <div className=\"yt-all\">\n                <div className=\"cover-title\">\n                    <span className=\"instuctionsYT\" />\n                </div>\n                <div className=\"yt-player\">\n                    <YTPlayer\n                        det={fourNonShuffledSongsTitles}\n                        videoId={randomVideoId}\n                        info={data}\n                        title={currentTitle}\n                        questions={questions}\n                        stopPlaying={this.props.stopPlaying}\n                        language={language}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default YTGame;\n"]},"metadata":{},"sourceType":"module"}