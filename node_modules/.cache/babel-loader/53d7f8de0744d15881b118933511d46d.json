{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/YTGame/YTGame.js\";\n// /* eslint-disable react/no-did-mount-set-state */\n// import React, { Component } from 'react';\n// import YTPlayer from '../YTPlayer/YTPlayer';\n// import './YTGame.css';\n// // import getPlayListItems from '../Api/Api';\n// import Shuffle from '../../Utils/Shuffle';\n// import videoDataObject from '../VideoDataObject';\n// // console.log (getPlayListItems())\n// class YTGame extends Component {\n//     state = {\n//         data: {},\n//         // oneVideoID: '',\n//         randomVideoId: '',\n//         // playlistItemsArr: [],\n//         // currentSongTitle: '',\n//         fourNonShuffledSongsTitles: [],\n//         questions: [],\n//         // answers:[],\n//         currentTitle: '',\n//     }\n//     componentDidMount = () => {\n//         const json = JSON.stringify(videoDataObject);\n//         const newdata = JSON.parse(json);\n//         // getting from the pending promise the data\n//         // let promise = getPlayListItems();\n//         // promise.then((data) => {\n//         //   const modifiedData = getPlayListItems(data);\n//         //   // save the data into the state\n//         // console.log(json)\n//         this.setState({\n//             data: newdata,\n//         });\n//         // this is the question\n//         const arrayPlaylist = [];\n//         // Recover the videoIDs from the data(api) and push in an array\n//         newdata.map((element) => {\n//         // here be the if statement\n//             arrayPlaylist.push(element.videoId);\n//             return arrayPlaylist;\n//         });\n//         // create the random from one videoid\n//         const randomVideoId = arrayPlaylist[Math.floor(Math.random() * arrayPlaylist.length)];\n//         this.setState({\n//             randomVideoId,\n//             questions: newdata[arrayPlaylist.indexOf(randomVideoId)].questions,\n//             currentTitle: newdata[arrayPlaylist.indexOf(randomVideoId)].title,\n//             // currentSongTitle:\n//         });\n//         // create the array with the title of the songs for the button shuffle(tu put in other buttons)\n//         const arraySongTitles = [];\n//         newdata.map((element) => {\n//             arraySongTitles.push(element.title);\n//             return arraySongTitles;\n//         });\n//         // removed from the array the title of the song that is playing so it wont dublicate in the buttons\n//         // const removed = arraySongTitles.splice(arrayPlaylist.indexOf(randomVideoId), 1);\n//         // shuffle function that reorganize the order of the song title\n//         const suffledArraySongTitles = Shuffle(arraySongTitles);\n//         const fourNonShuffledSongsTitles = suffledArraySongTitles.slice(0, 3); // actually 3\n//         // fourNonShuffledSongsTitles.push(currentSongName); // now 4\n//         //  const fourShuffledSongsTitles = Shuffle(fourNonShuffledSongsTitles)\n//         // console.log(fourShuffledSongsTitles)\n//         // return fourNonShuffledSongsTitles;\n//         this.setState({\n//             fourNonShuffledSongsTitles,\n//         });\n//     }\n//     render() {\n//         const { fourNonShuffledSongsTitles, randomVideoId, data, currentTitle, questions, stopPlaying } = this.state;\n//         const { language } = this.props;\n//         return (\n//             <div className=\"yt-all\">\n//                 <div className=\"cover-title\">\n//                     <span className=\"instuctionsYT\" />\n//                 </div>\n//                 <div className=\"yt-player\">\n//                     <YTPlayer\n//                         det={fourNonShuffledSongsTitles}\n//                         videoId={randomVideoId}\n//                         info={data}\n//                         title={currentTitle}\n//                         questions={questions}\n//                         stopPlaying={stopPlaying}\n//                         language={language}\n//                     />\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n// export default YTGame;\nimport React, { Component } from 'react';\nimport YTPlayer from '../YTPlayer/YTPlayer';\nimport './YTGame.css'; // import getPlayListItems from '../Api/Api';\n\nimport Shuffle from '../../Utils/Shuffle';\nimport videoDataObject from '../VideoDataObject'; // console.log (getPlayListItems())\n\nclass YTGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {},\n      oneVideoID: '',\n      randomVideoId: '',\n      playlistItemsArr: [],\n      currentSongTitle: '',\n      fourNonShuffledSongsTitles: [],\n      questions: [],\n      answers: [],\n      currentTitle: ''\n    };\n\n    this.componentDidMount = () => {\n      const json = JSON.stringify(videoDataObject);\n      const newdata = JSON.parse(json); // getting from the pending promise the data\n      // let promise = getPlayListItems();\n      // promise.then((data) => {\n      //   const modifiedData = getPlayListItems(data);\n      //   // save the data into the state\n      // console.log(json)\n\n      this.setState({\n        data: newdata\n      });\n      console.log(this.state.data); // console.log (this.state.data)\n      // this is the question\n      // console.log (newdata[0].question1.q)\n      // console.log (newdata[2].question2)\n\n      const arrayPlaylist = []; // Recover the videoIDs from the data(api) and push in an array\n\n      newdata.map(element => {\n        // here be the if statement\n        arrayPlaylist.push(element.videoId);\n        return arrayPlaylist;\n      });\n      console.log(arrayPlaylist); //\n      // create the random from one videoid\n\n      const randomVideoId = arrayPlaylist[Math.floor(Math.random() * arrayPlaylist.length)];\n      this.setState({\n        randomVideoId,\n        questions: newdata[arrayPlaylist.indexOf(randomVideoId)].questions,\n        currentTitle: newdata[arrayPlaylist.indexOf(randomVideoId)].title // currentSongTitle:\n\n      });\n      console.log(randomVideoId); // console.log(currentSongTitle)\n\n      console.log(arrayPlaylist.indexOf(randomVideoId)); // setting the state for the questions block that are related to the video\n\n      console.log(newdata[arrayPlaylist.indexOf(randomVideoId)].questions);\n      console.log(newdata[arrayPlaylist.indexOf(randomVideoId)].title); // create the array with the title of the songs for the button shuffle(tu put in other buttons)\n\n      const arraySongTitles = [];\n      newdata.map(element => {\n        arraySongTitles.push(element.title);\n        return arraySongTitles;\n      });\n      console.log(arraySongTitles); // removed from the array the title of the song that is playing so it wont dublicate in the buttons\n\n      const removed = arraySongTitles.splice(arrayPlaylist.indexOf(randomVideoId), 1);\n      console.log(removed);\n      console.log(arraySongTitles); // shuffle function that reorganize the order of the song title\n\n      const suffledArraySongTitles = Shuffle(arraySongTitles);\n      const fourNonShuffledSongsTitles = suffledArraySongTitles.slice(0, 3); // actually 3\n\n      console.log(fourNonShuffledSongsTitles); // fourNonShuffledSongsTitles.push(currentSongName); // now 4\n      //  const fourShuffledSongsTitles = Shuffle(fourNonShuffledSongsTitles)\n      // console.log(fourShuffledSongsTitles)\n      // return fourNonShuffledSongsTitles;\n\n      this.setState({\n        fourNonShuffledSongsTitles\n      }); // })\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"yt-all\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cover-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"instuctionsYT\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"yt-player\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(YTPlayer, {\n      det: this.state.fourNonShuffledSongsTitles,\n      videoId: this.state.randomVideoId,\n      info: this.state.data,\n      title: this.state.currentTitle,\n      questions: this.state.questions,\n      stopPlaying: this.props.stopPlaying,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default YTGame;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/YTGame/YTGame.js"],"names":["React","Component","YTPlayer","Shuffle","videoDataObject","YTGame","state","data","oneVideoID","randomVideoId","playlistItemsArr","currentSongTitle","fourNonShuffledSongsTitles","questions","answers","currentTitle","componentDidMount","json","JSON","stringify","newdata","parse","setState","console","log","arrayPlaylist","map","element","push","videoId","Math","floor","random","length","indexOf","title","arraySongTitles","removed","splice","suffledArraySongTitles","slice","render","props","stopPlaying"],"mappings":"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","sourcesContent":["// /* eslint-disable react/no-did-mount-set-state */\n// import React, { Component } from 'react';\n// import YTPlayer from '../YTPlayer/YTPlayer';\n// import './YTGame.css';\n// // import getPlayListItems from '../Api/Api';\n// import Shuffle from '../../Utils/Shuffle';\n// import videoDataObject from '../VideoDataObject';\n// // console.log (getPlayListItems())\n\n// class YTGame extends Component {\n\n//     state = {\n//         data: {},\n//         // oneVideoID: '',\n//         randomVideoId: '',\n//         // playlistItemsArr: [],\n//         // currentSongTitle: '',\n//         fourNonShuffledSongsTitles: [],\n//         questions: [],\n//         // answers:[],\n//         currentTitle: '',\n//     }\n\n\n//     componentDidMount = () => {\n//         const json = JSON.stringify(videoDataObject);\n//         const newdata = JSON.parse(json);\n//         // getting from the pending promise the data\n//         // let promise = getPlayListItems();\n//         // promise.then((data) => {\n//         //   const modifiedData = getPlayListItems(data);\n//         //   // save the data into the state\n//         // console.log(json)\n\n//         this.setState({\n//             data: newdata,\n//         });\n\n//         // this is the question\n\n//         const arrayPlaylist = [];\n//         // Recover the videoIDs from the data(api) and push in an array\n//         newdata.map((element) => {\n//         // here be the if statement\n//             arrayPlaylist.push(element.videoId);\n//             return arrayPlaylist;\n//         });\n\n//         // create the random from one videoid\n//         const randomVideoId = arrayPlaylist[Math.floor(Math.random() * arrayPlaylist.length)];\n\n//         this.setState({\n//             randomVideoId,\n//             questions: newdata[arrayPlaylist.indexOf(randomVideoId)].questions,\n//             currentTitle: newdata[arrayPlaylist.indexOf(randomVideoId)].title,\n//             // currentSongTitle:\n//         });\n\n//         // create the array with the title of the songs for the button shuffle(tu put in other buttons)\n//         const arraySongTitles = [];\n//         newdata.map((element) => {\n//             arraySongTitles.push(element.title);\n//             return arraySongTitles;\n//         });\n//         // removed from the array the title of the song that is playing so it wont dublicate in the buttons\n//         // const removed = arraySongTitles.splice(arrayPlaylist.indexOf(randomVideoId), 1);\n\n//         // shuffle function that reorganize the order of the song title\n//         const suffledArraySongTitles = Shuffle(arraySongTitles);\n//         const fourNonShuffledSongsTitles = suffledArraySongTitles.slice(0, 3); // actually 3\n\n//         // fourNonShuffledSongsTitles.push(currentSongName); // now 4\n\n//         //  const fourShuffledSongsTitles = Shuffle(fourNonShuffledSongsTitles)\n//         // console.log(fourShuffledSongsTitles)\n//         // return fourNonShuffledSongsTitles;\n//         this.setState({\n//             fourNonShuffledSongsTitles,\n//         });\n//     }\n\n\n//     render() {\n\n//         const { fourNonShuffledSongsTitles, randomVideoId, data, currentTitle, questions, stopPlaying } = this.state;\n\n//         const { language } = this.props;\n\n//         return (\n//             <div className=\"yt-all\">\n//                 <div className=\"cover-title\">\n//                     <span className=\"instuctionsYT\" />\n//                 </div>\n//                 <div className=\"yt-player\">\n//                     <YTPlayer\n//                         det={fourNonShuffledSongsTitles}\n//                         videoId={randomVideoId}\n//                         info={data}\n//                         title={currentTitle}\n//                         questions={questions}\n//                         stopPlaying={stopPlaying}\n//                         language={language}\n//                     />\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n\n// export default YTGame;\n\n\nimport React, { Component } from 'react';\nimport YTPlayer from '../YTPlayer/YTPlayer';\nimport './YTGame.css';\n// import getPlayListItems from '../Api/Api';\nimport Shuffle from '../../Utils/Shuffle';\nimport videoDataObject from '../VideoDataObject';\n// console.log (getPlayListItems())\n\nclass YTGame extends Component {\nstate ={\n    data: {},\n    oneVideoID: '',\n    randomVideoId: '',\n    playlistItemsArr: [],\n    currentSongTitle: '',\n    fourNonShuffledSongsTitles: [],\n    questions: [],\n    answers: [],\n    currentTitle: '',\n}\n\ncomponentDidMount=() => {\n    const json = JSON.stringify(videoDataObject);\n    const newdata = JSON.parse(json);\n    // getting from the pending promise the data\n    // let promise = getPlayListItems();\n    // promise.then((data) => {\n    //   const modifiedData = getPlayListItems(data);\n    //   // save the data into the state\n    // console.log(json)\n    this.setState({\n        data: newdata,\n    });\n    console.log(this.state.data);\n    // console.log (this.state.data)\n    // this is the question\n    // console.log (newdata[0].question1.q)\n\n    // console.log (newdata[2].question2)\n\n\n    const arrayPlaylist = [];\n    // Recover the videoIDs from the data(api) and push in an array\n    newdata.map((element) => {\n    // here be the if statement\n        arrayPlaylist.push(element.videoId);\n        return arrayPlaylist;\n    });\n    console.log(arrayPlaylist);\n    //\n\n\n    // create the random from one videoid\n    const randomVideoId = arrayPlaylist[Math.floor(Math.random() * arrayPlaylist.length)];\n    this.setState({ randomVideoId,\n        questions: newdata[arrayPlaylist.indexOf(randomVideoId)].questions,\n        currentTitle: newdata[arrayPlaylist.indexOf(randomVideoId)].title,\n        // currentSongTitle:\n    });\n    console.log(randomVideoId);\n    // console.log(currentSongTitle)\n    console.log(arrayPlaylist.indexOf(randomVideoId));\n    // setting the state for the questions block that are related to the video\n    console.log(newdata[arrayPlaylist.indexOf(randomVideoId)].questions);\n    console.log(newdata[arrayPlaylist.indexOf(randomVideoId)].title);\n\n\n    // create the array with the title of the songs for the button shuffle(tu put in other buttons)\n    const arraySongTitles = [];\n    newdata.map((element) => {\n        arraySongTitles.push(element.title);\n        return arraySongTitles;\n    });\n    console.log(arraySongTitles);\n    // removed from the array the title of the song that is playing so it wont dublicate in the buttons\n    const removed = arraySongTitles.splice(arrayPlaylist.indexOf(randomVideoId), 1);\n    console.log(removed);\n    console.log(arraySongTitles);\n    // shuffle function that reorganize the order of the song title\n    const suffledArraySongTitles = Shuffle(arraySongTitles);\n    const fourNonShuffledSongsTitles = suffledArraySongTitles.slice(0, 3); // actually 3\n    console.log(fourNonShuffledSongsTitles);\n    // fourNonShuffledSongsTitles.push(currentSongName); // now 4\n\n    //  const fourShuffledSongsTitles = Shuffle(fourNonShuffledSongsTitles)\n    // console.log(fourShuffledSongsTitles)\n    // return fourNonShuffledSongsTitles;\n    this.setState({\n        fourNonShuffledSongsTitles,\n    });\n    // })\n\n}\n\n\nrender() {\n    return (\n        <div className=\"yt-all\">\n            <div className=\"cover-title\">\n                <span className=\"instuctionsYT\" />\n            </div>\n\n\n            <div className=\"yt-player\">\n                <YTPlayer\n                    det={this.state.fourNonShuffledSongsTitles}\n                    videoId={this.state.randomVideoId}\n                    info={this.state.data}\n                    title={this.state.currentTitle}\n                    questions={this.state.questions}\n                    stopPlaying={this.props.stopPlaying}\n                />\n\n            </div>\n        </div>\n    );\n}\n}\n\nexport default YTGame;\n"]},"metadata":{},"sourceType":"module"}