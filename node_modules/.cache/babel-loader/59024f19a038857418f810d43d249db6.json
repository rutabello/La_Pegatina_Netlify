{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Instagram/InstagramRoundOne/InstagramRoundOne.js\";\n\n/* eslint-disable max-len */\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Shuffle from '../../Utils/Shuffle';\nimport ButtonIgRoundOne from './ButtonIgRoundOne';\nimport texts from '../../../texts.json';\nimport SocialMedia from '../../SocialMedia/SocialMedia';\nimport Loading from '../../Utils/Loading/Loading'; // import Register from '../../Register/Register';\n\nimport { MyContext } from '../../../context/MyProvider';\nimport UserForm from '../../Register/User/UserForm/UserForm';\nimport '../Instagram.css';\n\nclass InstagramRoundOne extends Component {\n  constructor(...args) {\n    super(...args);\n    this.NUMBER_OF_ATTEMPTS = 6;\n    this.OFICIAL_NUMBER_OF_ATTEMPTS = this.NUMBER_OF_ATTEMPTS - 1;\n    this.state = {\n      randomImageSrc: '',\n      randomImageTags: '',\n      tagsOptions: [],\n      data: [],\n      gameStatus: 'loading',\n      userClicked: false\n    };\n    this.attempts = 0;\n    this.counter = 0;\n    this.apiCleanedResult = {};\n    this.apiResultLength = 0;\n    this.profileId = '10934686';\n    this.numberOfPosts = '275';\n\n    this.cleanApiResponse = () => {\n      const {\n        data\n      } = this.state;\n      const images = data.filter(img => img.node.edge_media_to_tagged_user.edges.length !== 0 && img.node.edge_media_to_tagged_user.edges.length < 5);\n      const result = images.map(image => ({\n        src: image.node.thumbnail_resources[4].src,\n        tags: image.node.edge_media_to_tagged_user.edges.map(edge => edge.node.user.username)\n      }));\n      this.apiCleanedResult = result;\n      this.apiResultLength = result.length;\n    };\n\n    this.setRandomImageAndTags = () => {\n      Shuffle(this.apiCleanedResult);\n      const firstElement = this.apiCleanedResult.shift();\n      const imagesObjArr = this.apiCleanedResult.slice(0, 3);\n      const threeTagsArr = imagesObjArr.map(imageObj => imageObj.tags);\n      threeTagsArr.push(firstElement.tags); // Cuando hacemos el push, el mismo array, con el mismo nombre, pasa de tener 3 elementos a tener 4.\n      // Si igualamos esta array a una constante, no estaríamos guardando la array de 4 elementos resultante\n      // sino que guardaríamos el resultado del push, que sería soplo el número 4, tantos como elementos tiene dentro la array\n\n      const threeRandomPlusCorrectTagsArr = Shuffle(threeTagsArr);\n      this.setState({\n        randomImageSrc: firstElement.src,\n        randomImageTags: firstElement.tags.map(tag => tag),\n        tagsOptions: threeRandomPlusCorrectTagsArr,\n        gameStatus: 'playing',\n        userClicked: false\n      });\n      this.attempts += 1; // if(this.attempts === this.apiResultLength) {\n\n      if (this.attempts === this.NUMBER_OF_ATTEMPTS) {\n        this.setState({\n          gameStatus: 'gameOver'\n        });\n      }\n    };\n\n    this.addOneToCounter = () => {\n      this.counter += 1;\n    };\n\n    this.userHasClicked = () => {\n      this.setState({\n        userClicked: true\n      });\n    };\n\n    this.formatOptions = arrayOfTaggedPeople => arrayOfTaggedPeople.map(person => `@${person}`).join(', ');\n  }\n\n  componentDidMount() {\n    fetch(`https://www.instagram.com/graphql/query/?query_hash=e769aa130647d2354c40ea6a439bfc08&variables=\n        {\"id\":\"${this.profileId}\",\"first\":${this.numberOfPosts}}`).then(res => res.json()).then(data => this.setState({\n      data: data.data.user.edge_owner_to_timeline_media.edges\n    })).then(() => this.cleanApiResponse()).then(() => this.setRandomImageAndTags());\n  } // Cleans the object retrieved from the api and leaves an array of objects that just have the image\n  // source for the picture and the image location\n\n\n  render() {\n    const {\n      language\n    } = this.props;\n    const {\n      randomImageSrc,\n      tagsOptions,\n      userClicked,\n      gameStatus,\n      randomImageTags\n    } = this.state;\n\n    if (gameStatus === 'loading') {\n      return React.createElement(\"div\", {\n        className: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }));\n    }\n\n    if (gameStatus === 'playing') {\n      return React.createElement(\"div\", {\n        className: \"instagram-game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"imageAndLocationsContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"imageDisplayedContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, texts[language].instagramRoundOneQuestion), React.createElement(\"div\", {\n        className: \"imageDisplayed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: randomImageSrc,\n        alt: \"radom capture from the user's instagram feed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"instagram-location-buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, tagsOptions.map((option, index) => React.createElement(\"div\", {\n        key: index,\n        className: \"instagram-option-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(ButtonIgRoundOne, {\n        value: this.formatOptions(option),\n        currentTags: this.formatOptions(randomImageTags),\n        addToCounter: this.addOneToCounter,\n        key: index,\n        setRandomImageAndTags: this.setRandomImageAndTags,\n        userClicked: userClicked,\n        userHasClicked: this.userHasClicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      })))), React.createElement(\"p\", {\n        className: \"score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, texts[language].correctAnswers, this.counter, \"/\", this.OFICIAL_NUMBER_OF_ATTEMPTS)));\n    }\n\n    if (gameStatus === 'gameOver') {\n      return React.createElement(MyContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, context => React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Te atreves con la segunda ronda?\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Has hecho\", ' ', this.counter * 1729, ' ', \"puntos\"), context.state.name ? React.createElement(Link, {\n        to: \"instagramroundtwo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"navbar-btn\",\n        type: \"button\",\n        onClick: () => context.addPoints(this.counter * 1729),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Guarda los puntos y juega una segunda ronda\")) : React.createElement(UserForm, {\n        language: language,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"social-media-follow-buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(SocialMedia, {\n        language: language,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }))));\n    } // if (gameStatus === 'gameOver' && name !== undefined) {\n    //     return (\n    //         <div>\n    //             <h1>Has llegado al final de esta ronda. Te atreves con la segunda? </h1>\n    //             <Link to=\"instagramroundtwo\">Juega una segunda ronda</Link>\n    //         </div>\n    //     );\n    // }\n    // return (\n    //     <Register currentGame=\"instagram\" />\n    // );\n\n\n    return null;\n  }\n\n}\n\nexport default InstagramRoundOne;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Instagram/InstagramRoundOne/InstagramRoundOne.js"],"names":["React","Component","Link","Shuffle","ButtonIgRoundOne","texts","SocialMedia","Loading","MyContext","UserForm","InstagramRoundOne","NUMBER_OF_ATTEMPTS","OFICIAL_NUMBER_OF_ATTEMPTS","state","randomImageSrc","randomImageTags","tagsOptions","data","gameStatus","userClicked","attempts","counter","apiCleanedResult","apiResultLength","profileId","numberOfPosts","cleanApiResponse","images","filter","img","node","edge_media_to_tagged_user","edges","length","result","map","image","src","thumbnail_resources","tags","edge","user","username","setRandomImageAndTags","firstElement","shift","imagesObjArr","slice","threeTagsArr","imageObj","push","threeRandomPlusCorrectTagsArr","setState","tag","addOneToCounter","userHasClicked","formatOptions","arrayOfTaggedPeople","person","join","componentDidMount","fetch","then","res","json","edge_owner_to_timeline_media","render","language","props","instagramRoundOneQuestion","option","index","correctAnswers","context","name","addPoints"],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Shuffle from '../../Utils/Shuffle';\nimport ButtonIgRoundOne from './ButtonIgRoundOne';\nimport texts from '../../../texts.json';\nimport SocialMedia from '../../SocialMedia/SocialMedia';\n\nimport Loading from '../../Utils/Loading/Loading';\n// import Register from '../../Register/Register';\n\nimport { MyContext } from '../../../context/MyProvider';\nimport UserForm from '../../Register/User/UserForm/UserForm';\nimport '../Instagram.css';\n\nclass InstagramRoundOne extends Component {\n\n    NUMBER_OF_ATTEMPTS = 6\n\n    OFICIAL_NUMBER_OF_ATTEMPTS = this.NUMBER_OF_ATTEMPTS - 1\n\n    state = {\n        randomImageSrc: '',\n        randomImageTags: '',\n        tagsOptions: [],\n        data: [],\n        gameStatus: 'loading',\n        userClicked: false,\n    }\n\n    attempts= 0;\n\n    counter= 0;\n\n    apiCleanedResult = {}\n\n    apiResultLength = 0\n\n    // profileId='32402644';\n    // Rut's ID\n\n    profileId = '10934686';\n    // LaPegatina ID\n\n    numberOfPosts = '275';\n\n    componentDidMount() {\n        fetch(`https://www.instagram.com/graphql/query/?query_hash=e769aa130647d2354c40ea6a439bfc08&variables=\n        {\"id\":\"${this.profileId}\",\"first\":${this.numberOfPosts}}`)\n            .then((res) => res.json())\n            .then((data) => this.setState({ data: data.data.user.edge_owner_to_timeline_media.edges }))\n            .then(() => this.cleanApiResponse())\n            .then(() => this.setRandomImageAndTags());\n    }\n\n    // Cleans the object retrieved from the api and leaves an array of objects that just have the image\n    // source for the picture and the image location\n    cleanApiResponse = () => {\n\n        const { data } = this.state;\n\n        const images = data.filter((img) => img.node.edge_media_to_tagged_user.edges.length !== 0\n            && img.node.edge_media_to_tagged_user.edges.length < 5);\n\n        const result = images.map((image) => ({\n            src: image.node.thumbnail_resources[4].src,\n            tags: image.node.edge_media_to_tagged_user.edges.map((edge) => edge.node.user.username),\n        }));\n\n        this.apiCleanedResult = result;\n\n        this.apiResultLength = result.length;\n    }\n\n    // Takes off the first element of the array resulting in cleanApiResponse (called result) and takes the next 3 elements\n    setRandomImageAndTags = () => {\n\n        Shuffle(this.apiCleanedResult);\n\n        const firstElement = this.apiCleanedResult.shift();\n\n        const imagesObjArr = this.apiCleanedResult.slice(0, 3);\n\n        const threeTagsArr = imagesObjArr.map((imageObj) => imageObj.tags);\n\n        threeTagsArr.push(firstElement.tags);\n        // Cuando hacemos el push, el mismo array, con el mismo nombre, pasa de tener 3 elementos a tener 4.\n        // Si igualamos esta array a una constante, no estaríamos guardando la array de 4 elementos resultante\n        // sino que guardaríamos el resultado del push, que sería soplo el número 4, tantos como elementos tiene dentro la array\n\n        const threeRandomPlusCorrectTagsArr = Shuffle(threeTagsArr);\n\n        this.setState({\n            randomImageSrc: firstElement.src,\n            randomImageTags: firstElement.tags.map((tag) => tag),\n            tagsOptions: threeRandomPlusCorrectTagsArr,\n            gameStatus: 'playing',\n            userClicked: false,\n        });\n\n        this.attempts += 1;\n\n        // if(this.attempts === this.apiResultLength) {\n        if (this.attempts === this.NUMBER_OF_ATTEMPTS) {\n            this.setState({\n                gameStatus: 'gameOver',\n            });\n        }\n    }\n\n    addOneToCounter = () => {\n        this.counter += 1;\n    }\n\n    userHasClicked = () => {\n        this.setState({\n            userClicked: true,\n        });\n    }\n\n    formatOptions = (arrayOfTaggedPeople) => arrayOfTaggedPeople.map((person) => `@${person}`).join(', ')\n\n\n    render() {\n\n        const { language } = this.props;\n\n        const { randomImageSrc, tagsOptions, userClicked, gameStatus, randomImageTags } = this.state;\n\n        if (gameStatus === 'loading') {\n            return (\n                <div className=\"loading\">\n                    <Loading />\n                </div>\n            );\n        }\n\n        if (gameStatus === 'playing') {\n            return (\n                <div className=\"instagram-game\">\n                    <div className=\"imageAndLocationsContainer\">\n                        <div className=\"imageDisplayedContainer\">\n                            <h1>{texts[language].instagramRoundOneQuestion}</h1>\n                            <div className=\"imageDisplayed\">\n                                <img src={randomImageSrc} alt=\"radom capture from the user's instagram feed\" />\n                            </div>\n                        </div>\n\n                        <div className=\"instagram-location-buttons\">\n                            {tagsOptions.map((option, index) => (\n                                <div key={index} className=\"instagram-option-button\">\n                                    <ButtonIgRoundOne\n                                        value={this.formatOptions(option)}\n                                        currentTags={this.formatOptions(randomImageTags)}\n                                        addToCounter={this.addOneToCounter}\n                                        key={index}\n                                        setRandomImageAndTags={this.setRandomImageAndTags}\n                                        userClicked={userClicked}\n                                        userHasClicked={this.userHasClicked}\n                                    />\n                                </div>\n                            ))}\n                        </div>\n                        <p className=\"score\">\n                            {texts[language].correctAnswers}\n                            {this.counter}\n                            /\n                            {this.OFICIAL_NUMBER_OF_ATTEMPTS}\n                        </p>\n                    </div>\n                </div>\n            );\n        }\n\n        if (gameStatus === 'gameOver') {\n            return (\n                <MyContext.Consumer>\n                    {(context) => (\n                        <div>\n                            <h1>Te atreves con la segunda ronda?</h1>\n                            <p>\n                                Has hecho\n                                {' '}\n                                {this.counter * 1729}\n                                {' '}\n                                puntos\n                            </p>\n                            {context.state.name\n                                ? <Link to=\"instagramroundtwo\"><button className=\"navbar-btn\" type=\"button\" onClick={() => context.addPoints(this.counter * 1729)}>Guarda los puntos y juega una segunda ronda</button></Link>\n                                : <UserForm language={language} />}\n                            <div className=\"social-media-follow-buttons\">\n                                <SocialMedia\n                                    language={language}\n                                />\n                            </div>\n                        </div>\n                    )}\n                </MyContext.Consumer>\n            );\n        }\n        // if (gameStatus === 'gameOver' && name !== undefined) {\n        //     return (\n        //         <div>\n        //             <h1>Has llegado al final de esta ronda. Te atreves con la segunda? </h1>\n        //             <Link to=\"instagramroundtwo\">Juega una segunda ronda</Link>\n        //         </div>\n        //     );\n        // }\n\n        // return (\n        //     <Register currentGame=\"instagram\" />\n        // );\n        return null;\n    }\n}\n\n\nexport default InstagramRoundOne;\n"]},"metadata":{},"sourceType":"module"}