{"ast":null,"code":"// !!! IMPORTANT: No push to github as long as the clientId is visible in the files!\nconst clientId = \"5a36a3d1f9bc4712b321e760813bb8f6\"; // const redirectUri = 'http://playwith.es'; \n\nconst redirectUri = 'http://localhost:3000/game';\nlet accessToken = null;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      // We already have a valid one\n      return;\n    } // Otherwise, let's fetch one\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing me to grab a new access token when it expires.\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  getPlaylist(country) {\n    let ID = country; // Spotify.getAccessToken();                   \n\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(`https://api.spotify.com/v1/playlists/${ID}`, {\n      headers: headers\n    }).then(response => {\n      return response.json();\n    });\n  }\n\n}; // This way you can access the returned object. \"collaborative\" is just the first property that appears,\n// probably nothing we will actually use, just as an example of how to access it.\n// const play = Spotify.getPlaylist().then((value) => {console.log(value.collaborative)});\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Utils/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","getPlaylist","country","ID","headers","Authorization","fetch","then","response","json"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,kCAAjB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,4BAApB;AAEA,IAAIC,WAAW,GAAG,IAAlB;AAEA,MAAMC,OAAO,GAAG;AAEdC,EAAAA,cAAc,GAAI;AAChB,QAAIF,WAAJ,EAAgB;AACd;AACA;AACD,KAJe,CAMhB;;;AACA,UAAMG,gBAAgB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAzB;AACA,UAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;;AAEA,QAAIJ,gBAAgB,IAAIK,cAAxB,EAAwC;AACtCR,MAAAA,WAAW,GAAGG,gBAAgB,CAAC,CAAD,CAA9B;AACA,YAAMM,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAD,CAAf,CAAxB;AACAJ,MAAAA,MAAM,CAACO,UAAP,CAAkB,MAAMX,WAAW,GAAG,EAAtC,EAA0CS,SAAS,GAAG,IAAtD;AACAL,MAAAA,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C,EAJsC,CAIe;AAEtD,KAND,MAMO;AACL,YAAMC,SAAS,GAAI,oDAAmDhB,QAAS,kEAAiEC,WAAY,EAA5J;AACAK,MAAAA,MAAM,CAACC,QAAP,GAAkBS,SAAlB;AACD;AACF,GAtBa;;AAwBdC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,QAAIC,EAAE,GAAGD,OAAT,CADmB,CAGnB;;AAEA,UAAME,OAAO,GAAG;AAAEC,MAAAA,aAAa,EAAG,UAASnB,WAAY;AAAvC,KAAhB;AAEA,WAAOoB,KAAK,CAAE,wCAAuCH,EAAG,EAA5C,EAA+C;AAACC,MAAAA,OAAO,EAAEA;AAAV,KAA/C,CAAL,CACNG,IADM,CACDC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHM,CAAP;AAID;;AAnCa,CAAhB,C,CAsCA;AACA;AACA;;AAEA,eAAetB,OAAf","sourcesContent":["// !!! IMPORTANT: No push to github as long as the clientId is visible in the files!\nconst clientId = \"5a36a3d1f9bc4712b321e760813bb8f6\";\n\n// const redirectUri = 'http://playwith.es'; \nconst redirectUri = 'http://localhost:3000/game';\n\nlet accessToken = null;\n\nconst Spotify = {\n\n  getAccessToken () {\n    if (accessToken){\n      // We already have a valid one\n      return;\n    }\n\n    // Otherwise, let's fetch one\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    \n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing me to grab a new access token when it expires.\n\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  getPlaylist(country) {\n    let ID = country;\n    \n    // Spotify.getAccessToken();                   \n    \n    const headers = { Authorization: `Bearer ${accessToken}` };\n\n    return fetch(`https://api.spotify.com/v1/playlists/${ID}`, {headers: headers})\n    .then(response => {\n      return response.json();\n    });\n  }    \n}\n \n// This way you can access the returned object. \"collaborative\" is just the first property that appears,\n// probably nothing we will actually use, just as an example of how to access it.\n// const play = Spotify.getPlaylist().then((value) => {console.log(value.collaborative)});\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}