{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Spotify/SpotifyRoundOne/SpotifyRoundOne.js\";\nimport React from 'react';\nimport '../../../App.css';\nimport '../Spotify.css';\nimport Sound from 'react-sound';\nimport Button from '../Button/Button';\nimport Shuffle from '../../Utils/Shuffle';\nimport Spotify from '../../Utils/Spotify';\nimport PlayerCountdown from '../PlayerCountdown/PlayerCountdown';\nimport ShareTheGame from '../../ShareTheGame/ShareTheGame';\nimport texts from '../../../texts.json';\nimport ListenedSongs from '../ListenedSongs/ListenedSongs';\nimport next from '../../../Pictures/skip-forwards-bw.gif'; // import {Link} from 'react-router-dom';\n// import Register from '../../Register/Register'\n\nclass SpotifyRoundOne extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.spotifyObject = {};\n    this.spotifyFilteredObjArr = [];\n    this.chosenSong = '';\n    this.coincidence = false;\n    this.answerCountShow = false;\n    this.unknownSongs = [];\n    this.NUMBER_OF_SONGS_TO_PLAY_WITH = 3;\n    this.state = {\n      songNames: [],\n      currentSong: {\n        preview_url: '',\n        name: '',\n        uri: ''\n      },\n      hideResults: true,\n      correctAnswers: 0,\n      score: 0,\n      songUrl: '',\n      playerState: Sound.status.PLAYING,\n      playing: false,\n      playlistID: '37i9dQZF1DZ06evO2EUrsw',\n      currentAttempt: 0\n    };\n\n    this.getSongsToDisplay = currentSongName => {\n      const allSongsArr = this.spotifyObject.tracks.items.map(item => item.track.name);\n      const filteredSongsArr = allSongsArr.filter(song => song !== currentSongName);\n      const shuffledFilterSongsArr = Shuffle(filteredSongsArr);\n      const fourNonShuffledSongsArr = shuffledFilterSongsArr.slice(0, 3); // actually 3\n\n      fourNonShuffledSongsArr.push(currentSongName); // now 4\n\n      const fourShuffledSongsArr = Shuffle(fourNonShuffledSongsArr);\n      return fourShuffledSongsArr;\n    };\n\n    this.chooseSongs = () => {\n      const {\n        currentSong\n      } = this.state;\n      this.setState({\n        songNames: this.getSongsToDisplay(currentSong.name)\n      });\n    };\n\n    this.setNewRandomSong = () => {\n      const {\n        currentAttempt\n      } = this.state;\n\n      if (this.spotifyFilteredObjArr.length === 0) {\n        return;\n      }\n\n      if (currentAttempt >= this.NUMBER_OF_SONGS_TO_PLAY_WITH) {\n        this.setState({\n          currentAttempt: currentAttempt + 1\n        });\n        return;\n      }\n\n      const randomSong = this.spotifyFilteredObjArr[Math.floor(Math.random() * this.spotifyFilteredObjArr.length)].track;\n      this.spotifyFilteredObjArr = this.spotifyFilteredObjArr.filter(song => song.track.id !== randomSong.id);\n      this.setState({\n        currentSong: {\n          preview_url: randomSong.preview_url,\n          name: randomSong.name,\n          uri: randomSong.uri\n        },\n        songNames: this.getSongsToDisplay(randomSong.name),\n        hideResults: true,\n        playerState: Sound.status.STOPPED,\n        currentAttempt: currentAttempt + 1\n      });\n    };\n\n    this.writeChosenSong = songName => {\n      this.chosenSong = songName;\n    };\n\n    this.checkCoincidence = () => {\n      const {\n        currentAttempt\n      } = this.state;\n\n      if (currentAttempt > this.NUMBER_OF_SONGS_TO_PLAY_WITH) {\n        return;\n      }\n\n      const {\n        currentSong,\n        correctAnswers,\n        score\n      } = this.state;\n      this.coincidence = currentSong.name === this.chosenSong;\n      this.unknownSongs.push(currentSong);\n      this.setState({\n        hideResults: false,\n        correctAnswers: this.coincidence ? correctAnswers + 1 : correctAnswers,\n        score: this.coincidence ? score + 100 : score\n      });\n    };\n\n    this.showAnswerCount = () => {\n      this.answerCountShow = true;\n    };\n\n    this.getSongUrl = songName => {\n      // allTracksArr is an array made of tracks (each one, in an object,\n      // and as much tracks as songs are in the playlist)\n      const allTracksArr = this.spotifyFilteredObjArr.map(item => item.track); // trackArr is an array with an only index which is an object with 2 properties: name and preview_url\n\n      const oneTrackArr = allTracksArr.filter(track => track.name === songName); // Returns an array with the (only) object that fulfills this condition\n\n      const songUrl = oneTrackArr[0].preview_url;\n      this.setState({\n        songUrl,\n        playerState: Sound.status.PLAYING,\n        playing: true // return this.spotifyObject.tracks.items.filter(item => item.track.name === songName)[0].preview_url\n        // This does the same as getSongUrl but with much less lines\n\n      });\n    };\n\n    this.stopMusic = () => {\n      this.setState({\n        playerState: Sound.status.STOPPED,\n        playing: false\n      });\n    };\n\n    this.filterRightSongsFromSpotifyObject = () => {\n      this.spotifyFilteredObjArr = this.spotifyObject.tracks.items.filter(item => item.track.preview_url !== null);\n    };\n\n    this.setPlayingToFalse = () => {\n      this.setState({\n        playing: false\n      });\n    };\n  }\n\n  // API call to get the playlist data.\n  async componentDidMount() {\n    const {\n      playlistID\n    } = this.state;\n    this.spotifyObject = await Spotify.getPlaylist(playlistID);\n    this.filterRightSongsFromSpotifyObject();\n    this.setNewRandomSong();\n  }\n  /**\n   * This fn returns an array with 4 song names randomly including the current song\n   * @param {string} currentSong - name of the current song playing\n   * @returns {array} songsToDisplay\n  */\n\n\n  render() {\n    const {\n      score,\n      currentSong,\n      hideResults,\n      songNames,\n      name,\n      songUrl,\n      playerState,\n      playing,\n      currentAttempt\n    } = this.state;\n    const {\n      language\n    } = this.props;\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(ShareTheGame, {\n      score: score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), currentAttempt <= this.NUMBER_OF_SONGS_TO_PLAY_WITH ? React.createElement(\"div\", {\n      className: \"show\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"QuestionAndAnswers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Countdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(PlayerCountdown, {\n      language: language,\n      onMusicPlays: this.chooseSongs,\n      setNewRandomSong: this.setNewRandomSong,\n      songURL: currentSong.preview_url,\n      coincidence: this.checkCoincidence,\n      showAnswerCount: this.showAnswerCount,\n      attempt: currentAttempt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: `FourButtons ${hideResults ? 'forceGrayColor' : ''}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, songNames.map(songName => React.createElement(Button, {\n      key: songName,\n      printedSong: songName // We write it like this so the function writeChoosenSong isn't executed when the button is\n      // rendered but when the button is clicked. Different than what we're doing some lines\n      // above in the onMusicPlays, setNewRandomSong or songURL\n      ,\n      onClick: () => this.writeChosenSong(songName),\n      currentSong: currentSong.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      id: \"counter\",\n      className: \"instruct\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: this.answerCountShow ? 'show' : 'hide',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, currentAttempt, ' / ', this.NUMBER_OF_SONGS_TO_PLAY_WITH), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    })))) : React.createElement(ListenedSongs, {\n      username: name,\n      unknownSongs: this.unknownSongs,\n      language: language,\n      url: songUrl,\n      playStatus: playerState,\n      onClick: playing,\n      score: score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default SpotifyRoundOne;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Spotify/SpotifyRoundOne/SpotifyRoundOne.js"],"names":["React","Sound","Button","Shuffle","Spotify","PlayerCountdown","ShareTheGame","texts","ListenedSongs","next","SpotifyRoundOne","Component","spotifyObject","spotifyFilteredObjArr","chosenSong","coincidence","answerCountShow","unknownSongs","NUMBER_OF_SONGS_TO_PLAY_WITH","state","songNames","currentSong","preview_url","name","uri","hideResults","correctAnswers","score","songUrl","playerState","status","PLAYING","playing","playlistID","currentAttempt","getSongsToDisplay","currentSongName","allSongsArr","tracks","items","map","item","track","filteredSongsArr","filter","song","shuffledFilterSongsArr","fourNonShuffledSongsArr","slice","push","fourShuffledSongsArr","chooseSongs","setState","setNewRandomSong","length","randomSong","Math","floor","random","id","STOPPED","writeChosenSong","songName","checkCoincidence","showAnswerCount","getSongUrl","allTracksArr","oneTrackArr","stopMusic","filterRightSongsFromSpotifyObject","setPlayingToFalse","componentDidMount","getPlaylist","render","language","props"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../App.css';\nimport '../Spotify.css';\nimport Sound from 'react-sound';\nimport Button from '../Button/Button';\nimport Shuffle from '../../Utils/Shuffle';\nimport Spotify from '../../Utils/Spotify';\nimport PlayerCountdown from '../PlayerCountdown/PlayerCountdown';\nimport ShareTheGame from '../../ShareTheGame/ShareTheGame';\nimport texts from '../../../texts.json';\nimport ListenedSongs from '../ListenedSongs/ListenedSongs';\nimport next from '../../../Pictures/skip-forwards-bw.gif';\n// import {Link} from 'react-router-dom';\n// import Register from '../../Register/Register'\n\nclass SpotifyRoundOne extends React.Component {\n\n  // We have the object coming from the API call, here\n  spotifyObject = {};\n\n  // This array contains the songs coming from the spotifyObject that DO ave a preview_url\n  spotifyFilteredObjArr = [];\n\n  // Here the actual game mechanics start\n  chosenSong = '';\n\n  coincidence = false;\n\n  answerCountShow= false;\n\n  // All the songs that the user guessed wrong are pushed into this array\n  unknownSongs= [];\n\n  NUMBER_OF_SONGS_TO_PLAY_WITH = 3\n\n  // OFFICIAL_NUMBER_OF_SONGS_TO_PLAY_WITH = this.NUMBER_OF_SONGS_TO_PLAY_WITH - 1\n\n  state = {\n\n      songNames: [],\n      currentSong: {\n          preview_url: '',\n          name: '',\n          uri: '',\n      },\n\n      hideResults: true,\n      correctAnswers: 0,\n      score: 0,\n      songUrl: '',\n      playerState: Sound.status.PLAYING,\n      playing: false,\n      playlistID: '37i9dQZF1DZ06evO2EUrsw',\n      currentAttempt: 0,\n  }\n\n  // API call to get the playlist data.\n  async componentDidMount() {\n\n      const { playlistID } = this.state;\n\n      this.spotifyObject = await Spotify.getPlaylist(playlistID);\n      this.filterRightSongsFromSpotifyObject();\n      this.setNewRandomSong();\n  }\n\n  /**\n   * This fn returns an array with 4 song names randomly including the current song\n   * @param {string} currentSong - name of the current song playing\n   * @returns {array} songsToDisplay\n  */\ngetSongsToDisplay = (currentSongName) => {\n\n    const allSongsArr = this.spotifyObject.tracks.items.map((item) => item.track.name);\n\n    const filteredSongsArr = allSongsArr.filter((song) => (song !== currentSongName));\n\n    const shuffledFilterSongsArr = Shuffle(filteredSongsArr);\n\n    const fourNonShuffledSongsArr = shuffledFilterSongsArr.slice(0, 3); // actually 3\n    fourNonShuffledSongsArr.push(currentSongName); // now 4\n\n    const fourShuffledSongsArr = Shuffle(fourNonShuffledSongsArr);\n\n    return fourShuffledSongsArr;\n}\n\nchooseSongs = () => {\n\n    const { currentSong } = this.state;\n\n    this.setState({\n        songNames: this.getSongsToDisplay(currentSong.name),\n    });\n}\n\nsetNewRandomSong = () => {\n\n    const { currentAttempt } = this.state;\n\n    if (this.spotifyFilteredObjArr.length === 0) {\n\n        return;\n    }\n\n    if (currentAttempt >= this.NUMBER_OF_SONGS_TO_PLAY_WITH) {\n        this.setState({\n            currentAttempt: currentAttempt + 1,\n        });\n\n        return;\n    }\n\n    const randomSong = this.spotifyFilteredObjArr[Math.floor(Math.random() * this.spotifyFilteredObjArr.length)].track;\n\n    this.spotifyFilteredObjArr = this.spotifyFilteredObjArr.filter((song) => song.track.id !== randomSong.id);\n\n    this.setState({\n        currentSong: {\n            preview_url: randomSong.preview_url,\n            name: randomSong.name,\n            uri: randomSong.uri,\n        },\n        songNames: this.getSongsToDisplay(randomSong.name),\n        hideResults: true,\n        playerState: Sound.status.STOPPED,\n        currentAttempt: currentAttempt + 1,\n    });\n}\n\nwriteChosenSong = (songName) => {\n    this.chosenSong = songName;\n}\n\ncheckCoincidence = () => {\n\n    const { currentAttempt } = this.state;\n\n    if (currentAttempt > this.NUMBER_OF_SONGS_TO_PLAY_WITH) {\n        return;\n    }\n\n    const { currentSong, correctAnswers, score } = this.state;\n\n    this.coincidence = currentSong.name === this.chosenSong;\n\n    this.unknownSongs.push(currentSong);\n\n    this.setState({\n        hideResults: false,\n        correctAnswers: this.coincidence ? (correctAnswers + 1) : correctAnswers,\n        score: this.coincidence ? (score + 100) : score,\n    });\n}\n\nshowAnswerCount = () => {\n    this.answerCountShow = true;\n}\n\ngetSongUrl = (songName) => {\n\n    // allTracksArr is an array made of tracks (each one, in an object,\n    // and as much tracks as songs are in the playlist)\n    const allTracksArr = this.spotifyFilteredObjArr.map((item) => item.track);\n\n    // trackArr is an array with an only index which is an object with 2 properties: name and preview_url\n\n    const oneTrackArr = allTracksArr.filter((track) => (track.name === songName));\n    // Returns an array with the (only) object that fulfills this condition\n\n    const songUrl = oneTrackArr[0].preview_url;\n\n    this.setState({\n        songUrl,\n        playerState: Sound.status.PLAYING,\n        playing: true,\n        // return this.spotifyObject.tracks.items.filter(item => item.track.name === songName)[0].preview_url\n        // This does the same as getSongUrl but with much less lines\n    });\n}\n\nstopMusic = () => {\n    this.setState({\n        playerState: Sound.status.STOPPED,\n        playing: false,\n    });\n}\n\nfilterRightSongsFromSpotifyObject = () => {\n    this.spotifyFilteredObjArr = this.spotifyObject.tracks.items.filter((item) => item.track.preview_url !== null);\n}\n\nsetPlayingToFalse = () => {\n    this.setState({\n        playing: false,\n    });\n}\n\n\nrender() {\n\n    const { score, currentSong, hideResults, songNames, name, songUrl, playerState, playing, currentAttempt } = this.state;\n\n    const { language } = this.props;\n\n    return (\n        <section>\n            <ShareTheGame score={score} />\n            {currentAttempt <= this.NUMBER_OF_SONGS_TO_PLAY_WITH\n                ? (\n                    <div className=\"show\">\n                        <div className=\"QuestionAndAnswers\">\n                            <div className=\"Countdown\">\n                                <PlayerCountdown\n                                    language={language}\n                                    onMusicPlays={this.chooseSongs}\n                                    setNewRandomSong={this.setNewRandomSong}\n                                    songURL={currentSong.preview_url}\n                                    coincidence={this.checkCoincidence}\n                                    showAnswerCount={this.showAnswerCount}\n                                    attempt={currentAttempt}\n                                />\n                            </div>\n                            <div className={`FourButtons ${hideResults ? 'forceGrayColor' : ''}`}>\n                                {songNames.map((songName) => (\n                                    <Button\n                                        key={songName}\n                                        printedSong={songName}\n                                        // We write it like this so the function writeChoosenSong isn't executed when the button is\n                                        // rendered but when the button is clicked. Different than what we're doing some lines\n                                        // above in the onMusicPlays, setNewRandomSong or songURL\n                                        onClick={() => this.writeChosenSong(songName)}\n                                        currentSong={currentSong.name}\n                                    />\n                                ))}\n                            </div>\n                            <div id=\"counter\" className=\"instruct\">\n                                <p className={this.answerCountShow ? 'show' : 'hide'}>\n                                    {/* {texts[language].attempts} */}\n                                    {currentAttempt}\n                                    {' / '}\n                                    {/* {texts[language].outofText} */}\n                                    {this.NUMBER_OF_SONGS_TO_PLAY_WITH}\n                                </p>\n                                <br />\n                                {/* <p className={this.answerCountShow ? 'show' : 'hide'}>\n                                    {texts[language].pointsText}\n                                    {score}\n                                </p> */}\n                                <hr />\n                            </div>\n                        </div>\n                    </div>\n                )\n                : (\n                    <ListenedSongs\n                        username={name}\n                        unknownSongs={this.unknownSongs}\n                        language={language}\n                        url={songUrl}\n                        playStatus={playerState}\n                        onClick={playing}\n                        score={score}\n                    />\n                )}\n            {/* {name !== undefined\n                ? <Link to='spotifyRoundTwo'>Go to Spotify round two</Link>\n                : <Register />\n            } */}\n        </section>\n    );\n}\n}\n\nexport default SpotifyRoundOne;\n"]},"metadata":{},"sourceType":"module"}