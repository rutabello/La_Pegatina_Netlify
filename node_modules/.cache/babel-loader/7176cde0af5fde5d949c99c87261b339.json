{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/YTPlayer/YTPlayer.js\";\n// import React, { Component } from 'react';\n// import YouTube from 'react-youtube';\n// import Button from '../Button/Button_YT';\n// import Shuffle from '../../Utils/Shuffle';\n// import './YTPlayer.css';\n// import QuizYT from '../QuizYT/QuizYT';\n// import texts from '../../../texts.json';\n// // import YTCountdown from '../YTCountdown/YTCountdown';\n// // let info=props.info\n// // // console.log(props.det)\n// // console.log(info)\n// class YTPlayer extends Component {\n//     state = {\n//         // data: {},\n//         player: '',\n//         title: '',\n//         // videoUrl: '',\n//         // isMuted: true,\n//         fourShuffledSongsTitles: [],\n//         // fourNonShuffledSongsTitles: [],\n//         showButtons: true,\n//     }\n//     VideoOnReady = (event) => {\n//     // let player = event.target;\n//     // access to player in all event handlers via event.target\n//     // event.target.playVideo();\n//         event.target.seekTo(20);\n//         // plays the video at 10s, in case the video has the name of the song at the start\n//         event.target.mute();\n//         this.setState({\n//             player: event.target,\n//         });\n//     // that prints in console the name of the song\n//     // this.setState({\n//     //   data :{\n//     //     info: event.target.playerInfo.videoData.title, //stored the title into a const\n//     //     toString : () => {\n//     //       return 'data'\n//     //     }\n//     //   }\n//     // })\n//     //  console.log(this.state.data)\n//     }\n//     //   this.sendButtonSelection = e => {\n//     //     this.setState({buttonSelection: e.target.value});\n//     //     console.log(e.target.value);\n//     // };\n//     VideoOnPlay = () => {\n//         const { title, det } = this.props;\n//         // since we have something called \"title\" in props and in state, we give a new name to the title in the state\n//         // access to player in all event handlers via event.target\n//         // const player = event.target\n//         // const info= event.data\n//         // console.log(info)\n//         // alert(player)\n//         // player.seekTo(20)\n//         // alert(event.target.playerInfo.videoData.title)\n//         this.setState({\n//             // title:event.target.playerInfo.videoData.title,\n//             // videoUrl: event.target.playerInfo.videoUrl,\n//             // passing the title props to be written the same way\n//             title,\n//         });\n//         // store the array with 3 random titels in a const\n//         // console.log(props.det)\n//         // console.log(info);\n//         const threeTitlesArr = det;\n//         // push inside the name of the title that is playing now\n//         threeTitlesArr.push(title);\n//         // suffle all titles\n//         const fourShuffledSongsTitles = Shuffle(threeTitlesArr);\n//         // keep the new array , where is included the title of the playing song in the state\n//         this.setState({\n//             fourShuffledSongsTitles,\n//         });\n//         // console.log(fourShuffledSongsTitles);\n//     }\n//     unmuteVideo = () => {\n//         const { player } = this.state;\n//         player.unMute();\n//         this.setState({\n//             showButtons: false,\n//         });\n//     }\n//     render() {\n//         const opts = {\n//             height: '315',\n//             width: '560',\n//             // 560/315\n//             // default 640 h-390\n//             playerVars: { // https://developers.google.com/youtube/player_parameters\n//                 autoplay: 1,\n//                 modestbranding: 1, // not big yt branding\n//                 controls: 0, // the control not displayed\n//                 // mute: 1,// this mutes automaticly the video(in combination with the hidden control, the user can't unmute)\n//                 loop: 1,\n//                 start: 20, // from where the video starts(at 20 s in case the title is at the beginning)\n//                 // end: 90,\n//                 rel: 0, // getting only related videos from the channel\n//             },\n//         };\n//         const { videoId, questions, stopPlaying, language } = this.props;\n//         const { showButtons, fourShuffledSongsTitles, title } = this.state;\n//         return (\n//             <div className=\"thegame\">\n//                 <div className=\"theYTPlayer\">\n//                     <YouTube\n//                         videoId={videoId}\n//                         opts={opts}\n//                         onReady={this.VideoOnReady}\n//                         onPlay={this.VideoOnPlay}\n//                     />\n//                 </div>\n//                 {/* <p>Hello {this.state.title}</p> */}\n//                 {/* the button that redirect on the yt page */}\n//                 {/* <button className='btn-see-video' onClick={()=> window.open(this.state.videoUrl, \"_blank\")}> */}\n//                 {/* <span className= 'text-btn-see-video'>See full video on Youtube</span></button> */}\n//                 {showButtons\n//                     ? (\n//                         <div>\n//                             <p>{texts[language].youtubeQuestion}</p>\n//                             <div className=\"btn-4-YT\">\n//                                 {fourShuffledSongsTitles.map((songTitle) => (\n//                                     <Button\n//                                         unmute={this.unmuteVideo}\n//                                         key={songTitle}\n//                                         displayedSong={songTitle}\n//                                         currentSong={title}\n//                                     />\n//                                 ))}\n//                             </div>\n//                         </div>\n//                     )\n//                     //  /* : <YTCountdown questions={this.props.questions}/> } */}\n//                     : (\n//                         <QuizYT\n//                             questions={questions}\n//                             stopPlaying={stopPlaying}\n//                         />\n//                     )}\n//             </div>\n//         );\n//     }\n// }\n// export default YTPlayer;\n// // <QuizYT url={this.state.videoUrl}\nimport React, { Component } from 'react';\nimport YouTube from 'react-youtube';\nimport Button from '../Button/Button_YT';\nimport Shuffle from '../../Utils/Shuffle';\nimport '../YTPlayer/YTPlayer.css';\nimport QuizYT from '../QuizYT/QuizYT';\nimport YTCountdown from '../YTCountdown/YTCountdown'; // let info=props.info\n// // console.log(props.det)\n// console.log(info)\n\nclass YTPlayer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {},\n      player: '',\n      title: '',\n      videoUrl: '',\n      isMuted: true,\n      fourShuffledSongsTitles: [],\n      fourNonShuffledSongsTitles: [],\n      showButtons: true\n    };\n\n    this.VideoOnReady = event => {\n      // let player = event.target;\n      console.log(event.target);\n      console.log(event.target.playerInfo);\n      console.log(event.target.playerInfo.videoData.title);\n      console.log(event.target.playerInfo.videoUrl); // access to player in all event handlers via event.target\n      // event.target.playVideo();\n\n      event.target.seekTo(20); //plays the video at 10s, in case the video has the name of the song at the start\n\n      event.target.mute();\n      this.setState({\n        player: event.target\n      }); //that prints in consolecthe name of the song\n      // this.setState({\n      //   data :{\n      //     info: event.target.playerInfo.videoData.title, //stored the title into a const\n      //     toString : () => {\n      //       return 'data'\n      //     }\n      //   }\n      // })\n      //  console.log(this.state.data)\n    };\n\n    this.VideoOnPlay = event => {\n      // access to player in all event handlers via event.target\n      // const player = event.target\n      // const info= event.data\n      // console.log(info)\n      // alert(player)\n      // player.seekTo(20)\n      // alert(event.target.playerInfo.videoData.title)\n      this.setState({\n        // title:event.target.playerInfo.videoData.title,\n        videoUrl: event.target.playerInfo.videoUrl,\n        // passing the title props to be written the same way\n        title: this.props.title\n      }); // store the array with 3 random titels in a const\n\n      const info = this.props.info; // console.log(props.det)\n\n      console.log(info);\n      const threeTitlesArr = this.props.det;\n      console.log(threeTitlesArr); //push inside the name of the title that is playing now\n\n      threeTitlesArr.push(this.state.title); //suffle all titles\n\n      const fourShuffledSongsTitles = Shuffle(threeTitlesArr); //keep the new array , where is included the title of the playing song in the state\n\n      this.setState({\n        fourShuffledSongsTitles: fourShuffledSongsTitles\n      });\n      console.log(fourShuffledSongsTitles);\n    };\n\n    this.unmuteVideo = () => {\n      this.state.player.unMute();\n      this.setState({\n        showButtons: false\n      });\n    };\n  }\n\n  render() {\n    const opts = {\n      height: '315',\n      width: '560',\n      // 560/315\n      // default 640 h-390\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n        modestbranding: 1,\n        //not big yt branding\n        controls: 0,\n        //the control not displayed\n        // mute: 1,// this mutes automaticly the video(in combination with the hidden control, the user can't unmute)\n        loop: 1,\n        start: 20,\n        //from where the video starts(at 20 s in case the title is at the beginning)\n        // end: 90,\n        rel: 0 //getting only related videos from the channel\n\n      }\n    };\n    console.log(opts);\n    const {\n      videoId\n    } = this.props;\n    console.log({\n      videoId\n    });\n    return React.createElement(\"div\", {\n      className: \"thegame\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"theYTPlayer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(YouTube, {\n      videoId: videoId,\n      opts: opts,\n      onReady: this.VideoOnReady,\n      onPlay: this.VideoOnPlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    })), this.state.showButtons ? React.createElement(\"div\", {\n      className: \"btn-4-YT\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, this.state.fourShuffledSongsTitles.map(songTitle => {\n      return React.createElement(Button, {\n        unmute: this.unmuteVideo,\n        key: songTitle,\n        displayedSong: songTitle,\n        currentSong: this.state.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      });\n    })) : React.createElement(QuizYT, {\n      questions: this.props.questions,\n      stopPlaying: this.props.stopPlaying,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default YTPlayer; // <QuizYT url={this.state.videoUrl}","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/YTPlayer/YTPlayer.js"],"names":["React","Component","YouTube","Button","Shuffle","QuizYT","YTCountdown","YTPlayer","state","data","player","title","videoUrl","isMuted","fourShuffledSongsTitles","fourNonShuffledSongsTitles","showButtons","VideoOnReady","event","console","log","target","playerInfo","videoData","seekTo","mute","setState","VideoOnPlay","props","info","threeTitlesArr","det","push","unmuteVideo","unMute","render","opts","height","width","playerVars","autoplay","modestbranding","controls","loop","start","rel","videoId","map","songTitle","questions","stopPlaying"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAO,0BAAP;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,WAAP,MAAwB,4BAAxB,C,CACA;AACA;AACA;;AACA,MAAMC,QAAN,SAAuBN,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/BO,KAD+B,GACxB;AACLC,MAAAA,IAAI,EAAG,EADF;AAELC,MAAAA,MAAM,EAAC,EAFF;AAGLC,MAAAA,KAAK,EAAE,EAHF;AAILC,MAAAA,QAAQ,EAAE,EAJL;AAKLC,MAAAA,OAAO,EAAE,IALJ;AAMLC,MAAAA,uBAAuB,EAAC,EANnB;AAOLC,MAAAA,0BAA0B,EAAC,EAPtB;AAQLC,MAAAA,WAAW,EAAE;AARR,KADwB;;AAAA,SAc/BC,YAd+B,GAcjBC,KAAD,IAAS;AACpB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAaF,KAAK,CAACG,MAAnB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAaF,KAAK,CAACG,MAAN,CAAaC,UAA1B;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAaF,KAAK,CAACG,MAAN,CAAaC,UAAb,CAAwBC,SAAxB,CAAkCZ,KAA/C;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAN,CAAaC,UAAb,CAAwBV,QAApC,EALoB,CAMpB;AACA;;AACAM,MAAAA,KAAK,CAACG,MAAN,CAAaG,MAAb,CAAoB,EAApB,EARoB,CAQG;;AACvBN,MAAAA,KAAK,CAACG,MAAN,CAAaI,IAAb;AACA,WAAKC,QAAL,CAAc;AACZhB,QAAAA,MAAM,EAACQ,KAAK,CAACG;AADD,OAAd,EAVoB,CAapB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACG,KArC4B;;AAAA,SA0CjCM,WA1CiC,GA0CpBT,KAAD,IAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAKQ,QAAL,CAAc;AACZ;AACAd,QAAAA,QAAQ,EAACM,KAAK,CAACG,MAAN,CAAaC,UAAb,CAAwBV,QAFrB;AAGZ;AACAD,QAAAA,KAAK,EAAC,KAAKiB,KAAL,CAAWjB;AAJL,OAAd,EARiB,CAcnB;;AACA,YAAMkB,IAAI,GAAC,KAAKD,KAAL,CAAWC,IAAtB,CAfmB,CAgBrB;;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYS,IAAZ;AACA,YAAMC,cAAc,GAAE,KAAKF,KAAL,CAAWG,GAAjC;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYU,cAAZ,EAnBqB,CAoBrB;;AACAA,MAAAA,cAAc,CAACE,IAAf,CAAoB,KAAKxB,KAAL,CAAWG,KAA/B,EArBqB,CAsBrB;;AACA,YAAMG,uBAAuB,GAACV,OAAO,CAAC0B,cAAD,CAArC,CAvBqB,CAwBrB;;AACA,WAAKJ,QAAL,CAAc;AACbZ,QAAAA,uBAAuB,EAACA;AADX,OAAd;AAGAK,MAAAA,OAAO,CAACC,GAAR,CAAYN,uBAAZ;AACC,KAvEgC;;AAAA,SAwEjCmB,WAxEiC,GAwEpB,MAAI;AACf,WAAKzB,KAAL,CAAWE,MAAX,CAAkBwB,MAAlB;AACA,WAAKR,QAAL,CAAc;AACZV,QAAAA,WAAW,EAAC;AADA,OAAd;AAGD,KA7EgC;AAAA;;AA+E/BmB,EAAAA,MAAM,GAAG;AACP,UAAMC,IAAI,GAAG;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,KAAK,EAAE,KAFI;AAGX;AACA;AACAC,MAAAA,UAAU,EAAE;AAAE;AACZC,QAAAA,QAAQ,EAAE,CADA;AAEVC,QAAAA,cAAc,EAAE,CAFN;AAEQ;AAClBC,QAAAA,QAAQ,EAAE,CAHA;AAGE;AACZ;AACAC,QAAAA,IAAI,EAAC,CALK;AAMVC,QAAAA,KAAK,EAAE,EANG;AAMA;AACV;AACAC,QAAAA,GAAG,EAAE,CARK,CAQH;;AARG;AALD,KAAb;AAiBA1B,IAAAA,OAAO,CAACC,GAAR,CAAYgB,IAAZ;AAEA,UAAM;AAAEU,MAAAA;AAAF,QAAc,KAAKlB,KAAzB;AAEAT,IAAAA,OAAO,CAACC,GAAR,CAAa;AAAC0B,MAAAA;AAAD,KAAb;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,OAAD;AACI,MAAA,OAAO,EAAEA,OADb;AAEI,MAAA,IAAI,EAAEV,IAFV;AAGI,MAAA,OAAO,EAAE,KAAKnB,YAHlB;AAII,MAAA,MAAM,EAAE,KAAKU,WAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADA,EAcC,KAAKnB,KAAL,CAAWQ,WAAX,GACC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACD,KAAKR,KAAL,CAAWM,uBAAX,CAAmCiC,GAAnC,CAAwCC,SAAD,IAAe;AAC7C,aACE,oBAAC,MAAD;AACE,QAAA,MAAM,EAAE,KAAKf,WADf;AAEE,QAAA,GAAG,EAAEe,SAFP;AAGE,QAAA,aAAa,EAAEA,SAHjB;AAIE,QAAA,WAAW,EAAE,KAAKxC,KAAL,CAAWG,KAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAMM,KAPf,CADC,CADD,GAWC,oBAAC,MAAD;AAAU,MAAA,SAAS,EAAE,KAAKiB,KAAL,CAAWqB,SAAhC;AACF,MAAA,WAAW,EAAE,KAAKrB,KAAL,CAAWsB,WADtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBF,CADF;AAiCD;;AAxI8B;;AA0IjC,eAAe3C,QAAf,C,CACA","sourcesContent":["// import React, { Component } from 'react';\n// import YouTube from 'react-youtube';\n// import Button from '../Button/Button_YT';\n// import Shuffle from '../../Utils/Shuffle';\n// import './YTPlayer.css';\n// import QuizYT from '../QuizYT/QuizYT';\n// import texts from '../../../texts.json';\n// // import YTCountdown from '../YTCountdown/YTCountdown';\n// // let info=props.info\n// // // console.log(props.det)\n// // console.log(info)\n// class YTPlayer extends Component {\n//     state = {\n//         // data: {},\n//         player: '',\n//         title: '',\n//         // videoUrl: '',\n//         // isMuted: true,\n//         fourShuffledSongsTitles: [],\n//         // fourNonShuffledSongsTitles: [],\n//         showButtons: true,\n//     }\n\n//     VideoOnReady = (event) => {\n//     // let player = event.target;\n//     // access to player in all event handlers via event.target\n//     // event.target.playVideo();\n//         event.target.seekTo(20);\n//         // plays the video at 10s, in case the video has the name of the song at the start\n//         event.target.mute();\n\n//         this.setState({\n//             player: event.target,\n//         });\n\n//     // that prints in console the name of the song\n//     // this.setState({\n//     //   data :{\n//     //     info: event.target.playerInfo.videoData.title, //stored the title into a const\n//     //     toString : () => {\n//     //       return 'data'\n//     //     }\n//     //   }\n//     // })\n//     //  console.log(this.state.data)\n//     }\n//     //   this.sendButtonSelection = e => {\n//     //     this.setState({buttonSelection: e.target.value});\n//     //     console.log(e.target.value);\n//     // };\n\n//     VideoOnPlay = () => {\n\n//         const { title, det } = this.props;\n\n//         // since we have something called \"title\" in props and in state, we give a new name to the title in the state\n\n//         // access to player in all event handlers via event.target\n//         // const player = event.target\n//         // const info= event.data\n//         // console.log(info)\n//         // alert(player)\n//         // player.seekTo(20)\n//         // alert(event.target.playerInfo.videoData.title)\n\n//         this.setState({\n//             // title:event.target.playerInfo.videoData.title,\n//             // videoUrl: event.target.playerInfo.videoUrl,\n//             // passing the title props to be written the same way\n//             title,\n//         });\n//         // store the array with 3 random titels in a const\n//         // console.log(props.det)\n//         // console.log(info);\n\n//         const threeTitlesArr = det;\n\n//         // push inside the name of the title that is playing now\n\n//         threeTitlesArr.push(title);\n//         // suffle all titles\n//         const fourShuffledSongsTitles = Shuffle(threeTitlesArr);\n//         // keep the new array , where is included the title of the playing song in the state\n\n//         this.setState({\n//             fourShuffledSongsTitles,\n//         });\n//         // console.log(fourShuffledSongsTitles);\n//     }\n\n//     unmuteVideo = () => {\n\n//         const { player } = this.state;\n\n//         player.unMute();\n\n//         this.setState({\n//             showButtons: false,\n//         });\n//     }\n\n\n//     render() {\n//         const opts = {\n//             height: '315',\n//             width: '560',\n//             // 560/315\n//             // default 640 h-390\n//             playerVars: { // https://developers.google.com/youtube/player_parameters\n//                 autoplay: 1,\n//                 modestbranding: 1, // not big yt branding\n//                 controls: 0, // the control not displayed\n//                 // mute: 1,// this mutes automaticly the video(in combination with the hidden control, the user can't unmute)\n//                 loop: 1,\n//                 start: 20, // from where the video starts(at 20 s in case the title is at the beginning)\n//                 // end: 90,\n//                 rel: 0, // getting only related videos from the channel\n//             },\n//         };\n\n//         const { videoId, questions, stopPlaying, language } = this.props;\n\n//         const { showButtons, fourShuffledSongsTitles, title } = this.state;\n\n//         return (\n//             <div className=\"thegame\">\n//                 <div className=\"theYTPlayer\">\n//                     <YouTube\n//                         videoId={videoId}\n//                         opts={opts}\n//                         onReady={this.VideoOnReady}\n//                         onPlay={this.VideoOnPlay}\n//                     />\n//                 </div>\n\n//                 {/* <p>Hello {this.state.title}</p> */}\n//                 {/* the button that redirect on the yt page */}\n//                 {/* <button className='btn-see-video' onClick={()=> window.open(this.state.videoUrl, \"_blank\")}> */}\n//                 {/* <span className= 'text-btn-see-video'>See full video on Youtube</span></button> */}\n//                 {showButtons\n//                     ? (\n//                         <div>\n//                             <p>{texts[language].youtubeQuestion}</p>\n//                             <div className=\"btn-4-YT\">\n//                                 {fourShuffledSongsTitles.map((songTitle) => (\n//                                     <Button\n//                                         unmute={this.unmuteVideo}\n//                                         key={songTitle}\n//                                         displayedSong={songTitle}\n//                                         currentSong={title}\n//                                     />\n//                                 ))}\n//                             </div>\n//                         </div>\n//                     )\n//                     //  /* : <YTCountdown questions={this.props.questions}/> } */}\n//                     : (\n//                         <QuizYT\n//                             questions={questions}\n//                             stopPlaying={stopPlaying}\n//                         />\n//                     )}\n//             </div>\n//         );\n//     }\n// }\n\n\n// export default YTPlayer;\n\n// // <QuizYT url={this.state.videoUrl}\n\n\nimport React, { Component } from 'react';\nimport YouTube from 'react-youtube';\nimport Button from '../Button/Button_YT';\nimport Shuffle from '../../Utils/Shuffle';\nimport '../YTPlayer/YTPlayer.css';\nimport QuizYT from '../QuizYT/QuizYT';\nimport YTCountdown from '../YTCountdown/YTCountdown'\n// let info=props.info\n// // console.log(props.det)\n// console.log(info)\nclass YTPlayer extends Component {\n  state ={\n    data : {},\n    player:'',\n    title: '',\n    videoUrl: '',\n    isMuted: true,\n    fourShuffledSongsTitles:[],\n    fourNonShuffledSongsTitles:[],\n    showButtons: true\n\n\n  }\n\n  VideoOnReady=(event)=>{\n    // let player = event.target;\n    console.log (event.target)\n    console.log (event.target.playerInfo)\n    console.log (event.target.playerInfo.videoData.title)\n    console.log(event.target.playerInfo.videoUrl)\n    // access to player in all event handlers via event.target\n    // event.target.playVideo();\n    event.target.seekTo(20)//plays the video at 10s, in case the video has the name of the song at the start\n    event.target.mute()\n    this.setState({\n      player:event.target\n    })\n    //that prints in consolecthe name of the song\n    // this.setState({\n    //   data :{\n    //     info: event.target.playerInfo.videoData.title, //stored the title into a const\n    //     toString : () => {\n    //       return 'data'\n    //     }\n    //   }\n    // })\n  //  console.log(this.state.data)\n    }\n  //   this.sendButtonSelection = e => {\n  //     this.setState({buttonSelection: e.target.value});\n  //     console.log(e.target.value);\n  // };\nVideoOnPlay=(event)=>{\n    // access to player in all event handlers via event.target\n    // const player = event.target\n    // const info= event.data\n    // console.log(info)\n    // alert(player)\n    // player.seekTo(20)\n    // alert(event.target.playerInfo.videoData.title)\n    this.setState({\n      // title:event.target.playerInfo.videoData.title,\n      videoUrl:event.target.playerInfo.videoUrl,\n      // passing the title props to be written the same way\n      title:this.props.title\n  })\n  // store the array with 3 random titels in a const\n  const info=this.props.info\n// console.log(props.det)\nconsole.log(info)\nconst threeTitlesArr= this.props.det\nconsole.log(threeTitlesArr)\n//push inside the name of the title that is playing now\nthreeTitlesArr.push(this.state.title)\n//suffle all titles\nconst fourShuffledSongsTitles=Shuffle(threeTitlesArr)\n//keep the new array , where is included the title of the playing song in the state\nthis.setState({\n fourShuffledSongsTitles:fourShuffledSongsTitles\n})\nconsole.log(fourShuffledSongsTitles)\n}\nunmuteVideo =()=>{\n  this.state.player.unMute()\n  this.setState({\n    showButtons:false\n  })\n}\n\n  render() {\n    const opts = {\n      height: '315',\n      width: '560',\n      // 560/315\n      // default 640 h-390\n      playerVars: { // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n        modestbranding: 1,//not big yt branding\n        controls: 0,//the control not displayed\n        // mute: 1,// this mutes automaticly the video(in combination with the hidden control, the user can't unmute)\n        loop:1,\n        start: 20,//from where the video starts(at 20 s in case the title is at the beginning)\n        // end: 90,\n        rel: 0 //getting only related videos from the channel\n      }\n\n    };\n    console.log(opts)\n\n    const { videoId } = this.props;\n\n    console.log ({videoId})\n\n    return (\n      <div className='thegame'>\n      <div className='theYTPlayer'>\n      <YouTube\n          videoId={videoId}\n          opts={opts}\n          onReady={this.VideoOnReady}\n          onPlay={this.VideoOnPlay}\n        />\n        </div>\n\n      {/* <p>Hello {this.state.title}</p> */}\n      {/* the button that redirect on the yt page */}\n      {/* <button className='btn-see-video' onClick={()=> window.open(this.state.videoUrl, \"_blank\")}> */}\n       {/* <span className= 'text-btn-see-video'>See full video on Youtube</span></button> */}\n      {this.state.showButtons\n      ? <div className='btn-4-YT'>\n      {this.state.fourShuffledSongsTitles.map((songTitle) => {\n                return (\n                  <Button\n                    unmute={this.unmuteVideo}\n                    key={songTitle}\n                    displayedSong={songTitle}\n                    currentSong={this.state.title}\n                  />)})\n      }</div>\n      : <QuizYT   questions={this.props.questions}\n      stopPlaying={this.props.stopPlaying}\n\n      /> }\n\n      </div>\n    );\n  }\n}\nexport default YTPlayer;\n// <QuizYT url={this.state.videoUrl}"]},"metadata":{},"sourceType":"module"}