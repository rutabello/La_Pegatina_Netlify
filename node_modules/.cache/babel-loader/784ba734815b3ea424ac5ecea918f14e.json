{"ast":null,"code":"//!!! IMPORTANT: No push to github as long as the clientId is visible in the files!\n// import { TOKEN } from './token'\nconst clientId = \"5a36a3d1f9bc4712b321e760813bb8f6\";\nconst redirectUri = `${window.location.href}game`;\nlet accessToken; // for connection with the map: connect playlist id to the markers and save it in a const to insert it later in the \n// getplaylist() method.\n\nconst SpotifyAPI = {\n  getaccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing me to grab a new access token when it expires.\n\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  getPlaylist(country) {\n    let ID = country;\n    const accessToken = Spotify.getaccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(`https://api.spotify.com/v1/playlists/${ID}`, {\n      headers: headers\n    }).then(response => {\n      return response.json();\n    });\n  },\n\n  changeID() {\n    let country = \"6HiZDoQlmYliE3RhFm4Fek\";\n    this.setState({\n      playlistID: country\n    });\n  }\n\n}; // This way you can access the returned object. \"collaborative\" is just the first property that appears,\n// probably nothing we will actually use, just as an example of how to access it.\n// const play = Spotify.getPlaylist().then((value) => {console.log(value.collaborative)});\n\nexport default SpotifyAPI;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Utils/SpotifyAPI.js"],"names":["clientId","redirectUri","window","location","href","accessToken","SpotifyAPI","getaccessToken","accessTokenMatch","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","getPlaylist","country","ID","Spotify","headers","Authorization","fetch","then","response","json","changeID","setState","playlistID"],"mappings":"AAAA;AACA;AACA,MAAMA,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAI,GAAEC,MAAM,CAACC,QAAP,CAAgBC,IAAK,MAA5C;AAEA,IAAIC,WAAJ,C,CACA;AACA;;AAEA,MAAMC,UAAU,GAAG;AAEjBC,EAAAA,cAAc,GAAI;AAChB,QAAIF,WAAJ,EAAgB;AACd,aAAOA,WAAP;AACD;;AAED,UAAMG,gBAAgB,GAAGN,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBK,KAArB,CAA2B,sBAA3B,CAAzB;AACA,UAAMC,cAAc,GAAGR,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBK,KAArB,CAA2B,oBAA3B,CAAvB;;AAEA,QAAID,gBAAgB,IAAIE,cAAxB,EAAwC;AACtCL,MAAAA,WAAW,GAAGG,gBAAgB,CAAC,CAAD,CAA9B;AACA,YAAMG,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAD,CAAf,CAAxB;AACAR,MAAAA,MAAM,CAACW,UAAP,CAAkB,MAAMR,WAAW,GAAG,EAAtC,EAA0CM,SAAS,GAAG,IAAtD;AACAT,MAAAA,MAAM,CAACY,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C,EAJsC,CAIe;;AACrD,aAAOV,WAAP;AAED,KAPD,MAOO;AACL,YAAMW,SAAS,GAAI,oDAAmDhB,QAAS,kEAAiEC,WAAY,EAA5J;AACAC,MAAAA,MAAM,CAACC,QAAP,GAAkBa,SAAlB;AACD;AACF,GArBgB;;AAuBjBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,QAAIC,EAAE,GAAGD,OAAT;AACA,UAAMb,WAAW,GAAGe,OAAO,CAACb,cAAR,EAApB;AACA,UAAMc,OAAO,GAAG;AAAEC,MAAAA,aAAa,EAAG,UAASjB,WAAY;AAAvC,KAAhB;AAEA,WAAOkB,KAAK,CAAE,wCAAuCJ,EAAG,EAA5C,EAA+C;AAACE,MAAAA,OAAO,EAAEA;AAAV,KAA/C,CAAL,CACNG,IADM,CACDC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHM,CAAP;AAID,GAhCgB;;AAkCjBC,EAAAA,QAAQ,GAAI;AACV,QAAIT,OAAO,GAAG,wBAAd;AACA,SAAKU,QAAL,CAAc;AACZC,MAAAA,UAAU,EAAEX;AADA,KAAd;AAGD;;AAvCgB,CAAnB,C,CA0CA;AACA;AACA;;AAEA,eAAeZ,UAAf","sourcesContent":["//!!! IMPORTANT: No push to github as long as the clientId is visible in the files!\n// import { TOKEN } from './token'\nconst clientId = \"5a36a3d1f9bc4712b321e760813bb8f6\";\nconst redirectUri = `${window.location.href}game`;\n\nlet accessToken;\n// for connection with the map: connect playlist id to the markers and save it in a const to insert it later in the \n// getplaylist() method.\n\nconst SpotifyAPI = {\n\n  getaccessToken () {\n    if (accessToken){\n      return accessToken ;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    \n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing me to grab a new access token when it expires.\n      return accessToken ;\n    \n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  getPlaylist(country) {\n    let ID = country;\n    const accessToken = Spotify.getaccessToken();                   \n    const headers = { Authorization: `Bearer ${accessToken}` };\n\n    return fetch(`https://api.spotify.com/v1/playlists/${ID}`, {headers: headers})\n    .then(response => {\n      return response.json();\n    });\n  },\n\n  changeID () {\n    let country = \"6HiZDoQlmYliE3RhFm4Fek\"\n    this.setState({\n      playlistID: country,\n    })\n  }     \n}\n \n// This way you can access the returned object. \"collaborative\" is just the first property that appears,\n// probably nothing we will actually use, just as an example of how to access it.\n// const play = Spotify.getPlaylist().then((value) => {console.log(value.collaborative)});\n\nexport default SpotifyAPI;"]},"metadata":{},"sourceType":"module"}