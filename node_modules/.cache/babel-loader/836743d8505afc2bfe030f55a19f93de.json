{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/YTGame/YTGame.js\";\nimport React, { Component } from 'react';\nimport YTPlayer from '../YTPlayer/YTPlayer';\nimport './YTGame.css'; // import getPlayListItems from '../Api/Api';\n\nimport Shuffle from '../../Utils/Shuffle';\nimport videoDataObject from '../VideoDataObject'; // console.log (getPlayListItems())\n\nclass YTGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {},\n      // oneVideoID:'',\n      randomVideoId: '',\n      // playlistItemsArr: [],\n      // currentSongTitle:'',\n      fourNonShuffledSongsTitles: [],\n      questions: [],\n      // answers: [],\n      currentTitle: ''\n    };\n\n    this.componentDidMount = () => {\n      const json = JSON.stringify(videoDataObject);\n      const newdata = JSON.parse(json); // getting from the pending promise the data\n      // let promise = getPlayListItems();\n      // promise.then((data) => {\n      //   const modifiedData = getPlayListItems(data);\n      //   // save the data into the state\n      // console.log(json)\n\n      this.setState({\n        data: newdata\n      });\n      console.log(this.state.data); // console.log (this.state.data)\n      //this is the question\n      // console.log (newdata[0].question1.q)\n      // console.log (newdata[2].question2)\n\n      const arrayPlaylist = []; //Recover the videoIDs from the data(api) and push in an array\n\n      newdata.map(element => {\n        //here be the if statement\n        arrayPlaylist.push(element.videoId);\n        return arrayPlaylist;\n      });\n      console.log(arrayPlaylist); // \n      // create the random from one videoid\n\n      const randomVideoId = arrayPlaylist[Math.floor(Math.random() * arrayPlaylist.length)];\n      this.setState({\n        randomVideoId: randomVideoId,\n        questions: newdata[arrayPlaylist.indexOf(randomVideoId)].questions,\n        currentTitle: newdata[arrayPlaylist.indexOf(randomVideoId)].title // currentSongTitle:\n\n      });\n      console.log(randomVideoId); // console.log(currentSongTitle)\n\n      console.log(arrayPlaylist.indexOf(randomVideoId)); // setting the state for the questions block that are related to the video\n\n      console.log(newdata[arrayPlaylist.indexOf(randomVideoId)].questions);\n      console.log(newdata[arrayPlaylist.indexOf(randomVideoId)].title); //create the array with the title of the songs for the button shuffle(tu put in other buttons)\n\n      const arraySongTitles = [];\n      newdata.map(element => {\n        arraySongTitles.push(element.title);\n        return arraySongTitles;\n      });\n      console.log(arraySongTitles); // removed from the array the title of the song that is playing so it wont dublicate in the buttons\n\n      const removed = arraySongTitles.splice(arrayPlaylist.indexOf(randomVideoId), 1);\n      console.log(removed);\n      console.log(arraySongTitles); //shuffle function that reorganize the order of the song title\n\n      const suffledArraySongTitles = Shuffle(arraySongTitles);\n      const fourNonShuffledSongsTitles = suffledArraySongTitles.slice(0, 3); // actually 3\n\n      console.log(fourNonShuffledSongsTitles); // fourNonShuffledSongsTitles.push(currentSongName); // now 4\n      //  const fourShuffledSongsTitles = Shuffle(fourNonShuffledSongsTitles)\n      // console.log(fourShuffledSongsTitles)\n      // return fourNonShuffledSongsTitles;\n\n      this.setState({\n        fourNonShuffledSongsTitles: fourNonShuffledSongsTitles\n      }); // })\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"yt-all\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cover-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"instuctionsYT\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"yt-player\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(YTPlayer, {\n      det: this.state.fourNonShuffledSongsTitles,\n      videoId: this.state.randomVideoId,\n      info: this.state.data,\n      title: this.state.currentTitle,\n      questions: this.state.questions,\n      stopPlaying: this.props.stopPlaying,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default YTGame;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/YTGame/YTGame.js"],"names":["React","Component","YTPlayer","Shuffle","videoDataObject","YTGame","state","data","randomVideoId","fourNonShuffledSongsTitles","questions","currentTitle","componentDidMount","json","JSON","stringify","newdata","parse","setState","console","log","arrayPlaylist","map","element","push","videoId","Math","floor","random","length","indexOf","title","arraySongTitles","removed","splice","suffledArraySongTitles","slice","render","props","stopPlaying"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport YTPlayer from '../YTPlayer/YTPlayer';\nimport './YTGame.css';\n// import getPlayListItems from '../Api/Api';\nimport Shuffle from '../../Utils/Shuffle';\nimport videoDataObject from '../VideoDataObject';\n// console.log (getPlayListItems())\n\nclass YTGame extends Component {\nstate ={\n    data: {},\n    // oneVideoID:'',\n    randomVideoId: '',\n    // playlistItemsArr: [],\n    // currentSongTitle:'',\n    fourNonShuffledSongsTitles: [],\n    questions: [],\n    // answers: [],\n    currentTitle: '',\n}\n\ncomponentDidMount = () => {\n    const json = JSON.stringify(videoDataObject);\n    const newdata = JSON.parse(json);\n    // getting from the pending promise the data\n    // let promise = getPlayListItems();\n    // promise.then((data) => {\n    //   const modifiedData = getPlayListItems(data);\n    //   // save the data into the state\n    // console.log(json)\n    this.setState ({\n        data: newdata,\n    })\nconsole.log(this.state.data)\n// console.log (this.state.data)\n//this is the question\n// console.log (newdata[0].question1.q)\n\n// console.log (newdata[2].question2)\n\n\n\n  const arrayPlaylist=[];\n  //Recover the videoIDs from the data(api) and push in an array\n   newdata.map((element)=>{\n    //here be the if statement\n      arrayPlaylist.push(element.videoId)\n    return arrayPlaylist\n  })\n  console.log(arrayPlaylist)\n  // \n\n\n  // create the random from one videoid\nconst randomVideoId = arrayPlaylist[Math.floor(Math.random()*arrayPlaylist.length)]\nthis.setState({randomVideoId:randomVideoId,\n  questions:newdata[arrayPlaylist.indexOf(randomVideoId)].questions,\n  currentTitle:newdata[arrayPlaylist.indexOf(randomVideoId)].title\n// currentSongTitle:\n})\nconsole.log(randomVideoId)\n// console.log(currentSongTitle)\nconsole.log(arrayPlaylist.indexOf(randomVideoId))\n// setting the state for the questions block that are related to the video\nconsole.log(newdata[arrayPlaylist.indexOf(randomVideoId)].questions)\nconsole.log(newdata[arrayPlaylist.indexOf(randomVideoId)].title)\n\n\n//create the array with the title of the songs for the button shuffle(tu put in other buttons)\n const arraySongTitles=[];\n newdata.map((element)=>{\n   arraySongTitles.push(element.title)\n     return arraySongTitles\n   })\n        console.log(arraySongTitles)\n        // removed from the array the title of the song that is playing so it wont dublicate in the buttons\n        const removed = arraySongTitles.splice(arrayPlaylist.indexOf(randomVideoId), 1)\n        console.log (removed)\n        console.log(arraySongTitles)\n        //shuffle function that reorganize the order of the song title\nconst suffledArraySongTitles =  Shuffle(arraySongTitles)\nconst fourNonShuffledSongsTitles = suffledArraySongTitles.slice(0, 3); // actually 3\nconsole.log(fourNonShuffledSongsTitles)\n// fourNonShuffledSongsTitles.push(currentSongName); // now 4\n\n//  const fourShuffledSongsTitles = Shuffle(fourNonShuffledSongsTitles)\n// console.log(fourShuffledSongsTitles)\n// return fourNonShuffledSongsTitles;\nthis.setState({\n  fourNonShuffledSongsTitles:fourNonShuffledSongsTitles\n})\n// })\n\n}\n\n\nrender(){\n  return (\n    <div className='yt-all'>\n    <div className='cover-title'><span className='instuctionsYT'></span>\n    </div>\n\n\n    <div className=\"yt-player\">\n       <YTPlayer det={this.state.fourNonShuffledSongsTitles} \n      videoId= {this.state.randomVideoId} info={this.state.data} \n      title= {this.state.currentTitle}\n      questions={this.state.questions} stopPlaying={this.props.stopPlaying}/>  \n    \n    </div>\n    </div>\n  )\n}\n}\n\nexport default YTGame"]},"metadata":{},"sourceType":"module"}