{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Instagram/InstagramTags/InstagramTags.js\";\nimport React, { Component } from 'react';\nimport Shuffle from '../../Utils/Shuffle';\nimport ButtonIG from '../InstagramLocations/Button_Ig';\nimport texts from '../../../texts.json';\nimport './InstagramTags.css';\n\nclass Instagram extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      randomImageSrc: \"\",\n      randomImageTags: \"\",\n      locationOptions: [],\n      data: []\n    };\n    this.attempts = 0;\n    this.counter = 0;\n    this.apiCleanedResult = {};\n    this.apiResultLength = 0;\n\n    this.cleanApiResponse = () => {\n      const images = this.state.data.filter(img => img.node.edge_media_to_tagged_user.edges !== null);\n      const result = images.map(image => ({\n        src: image.node.thumbnail_resources[4].src,\n        tags: image.node.edge_media_to_tagged_user.edges.map(edge => edge.node.user.username)\n      }));\n      this.apiCleanedResult = result;\n      console.log(\"api clean result\", this.apiCleanedResult);\n      this.apiResultLength = result.length;\n      console.log('llargaria', images);\n    };\n\n    this.setRandomImageAndTags = () => {\n      Shuffle(this.apiCleanedResult);\n      const firstElement = this.apiCleanedResult.shift();\n      const imagesObjArr = this.apiCleanedResult.slice(0, 3);\n      const threeTagsArr = imagesObjArr.map(imageObj => imageObj.tags);\n      threeTagsArr.push(firstElement.tags); //Cuando hacemos el push, el mismo array, con el mismo nombre, pasa de tener 3 elementos a tener 4. Si igualamos esta array a una constante, no estaríamos guardando la array de 4 elementos resultante sinó que guardaríamos el resultado del push, que sería soplo el número 4, tantos como elementos tiene dentro la array\n\n      const threeRandomPlusCorrectTagsArr = Shuffle(threeTagsArr);\n      this.setState({\n        randomImageSrc: firstElement.src,\n        randomImageTags: firstElement.location,\n        locationOptions: threeRandomPlusCorrectTagsArr\n      });\n      this.attempts = this.attempts + 1;\n    };\n\n    this.addOneToCounter = () => {\n      this.counter = this.counter + 1;\n    };\n\n    this.profileId = '42596988';\n    this.numberOfPosts = '200000';\n  }\n\n  componentDidMount() {\n    fetch(`https://www.instagram.com/graphql/query/?query_hash=e769aa130647d2354c40ea6a439bfc08&variables={\"id\":\"${this.profileId}\",\"first\":${this.numberOfPosts}}`).then(res => res.json()).then(data => this.setState({\n      data: data.data.user.edge_owner_to_timeline_media.edges\n    })).then(() => this.cleanApiResponse()).then(() => this.setRandomImageAndTags());\n  }\n\n  render() {\n    // const { randomImageSrc, locationOptions } = this.state;\n    // if (this.attempts < this.apiResultLength) {\n    //     return (\n    //         <div className=\"instagram-game\">\n    //             <div className=\"imageAndLocationsContainer\">\n    //             <h1>{texts[this.props.language].instagramQuestion}</h1>\n    //                 <div className=\"imageDisplayedContainer\">\n    //                     <div className=\"imageDisplayed\">\n    //                         <img src={randomImageSrc} alt=\"radom capture from the user's instagram feed\" />\n    //                     </div>\n    //                 </div>\n    //                 {locationOptions.map((option, index) => {\n    //                     return (\n    //                         <div key={index} className=\"instagram-location-buttons\">\n    //                             <ButtonIG value={option} currentLocation={this.state.randomImageLocation} addToCounter={this.addOneToCounter} key={index} setRandomImageAndTags={this.setRandomImageAndTags}\n    //                             >\n    //                             </ButtonIG>\n    //                         </div>\n    //                     )\n    //                 })}\n    //                 <p>{texts[this.props.language].correctAnswers} {this.counter}</p>\n    //             </div>\n    //         </div>\n    //     )\n    // } else {\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Has llegado al final! Ahora prueba de jugar con La Pegatina en Spotify o en Youtube\"); // }\n  }\n\n}\n\nexport default Instagram;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Instagram/InstagramTags/InstagramTags.js"],"names":["React","Component","Shuffle","ButtonIG","texts","Instagram","state","randomImageSrc","randomImageTags","locationOptions","data","attempts","counter","apiCleanedResult","apiResultLength","cleanApiResponse","images","filter","img","node","edge_media_to_tagged_user","edges","result","map","image","src","thumbnail_resources","tags","edge","user","username","console","log","length","setRandomImageAndTags","firstElement","shift","imagesObjArr","slice","threeTagsArr","imageObj","push","threeRandomPlusCorrectTagsArr","setState","location","addOneToCounter","profileId","numberOfPosts","componentDidMount","fetch","then","res","json","edge_owner_to_timeline_media","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Shuffle from '../../Utils/Shuffle'\nimport ButtonIG from '../InstagramLocations/Button_Ig';\nimport texts from '../../../texts.json';\n\nimport './InstagramTags.css';\n\nclass Instagram extends Component {\n\n    state = {\n        randomImageSrc: \"\",\n        randomImageTags: \"\",\n        locationOptions: [],\n        data: [],\n    }\n\n    attempts= 0;\n    counter= 0;\n    apiCleanedResult = {}\n    apiResultLength = 0\n\n\n   //Cleans the object retrieved from the api and leaves an array of objects that just have the image source for the picture and the image location\n    cleanApiResponse = () => {\n        const images = this.state.data.filter(img => img.node.edge_media_to_tagged_user.edges !== null)\n\n        const result = images.map((image) => ({\n            src: image.node.thumbnail_resources[4].src,\n            tags: image.node.edge_media_to_tagged_user.edges.map((edge) => edge.node.user.username)\n        }))\n\n        this.apiCleanedResult = result;\n        console.log(\"api clean result\", this.apiCleanedResult)\n\n        this.apiResultLength = result.length\n\n        console.log('llargaria', images)\n    }\n\n    //Takes off the first element of the array resulting in cleanApiResponse (called result) and takes the next 3 elements\n    setRandomImageAndTags = () => {\n\n        Shuffle(this.apiCleanedResult)\n\n        const firstElement = this.apiCleanedResult.shift();\n\n        const imagesObjArr = this.apiCleanedResult.slice(0, 3);\n\n        const threeTagsArr = imagesObjArr.map((imageObj) => imageObj.tags)\n\n        threeTagsArr.push(firstElement.tags) //Cuando hacemos el push, el mismo array, con el mismo nombre, pasa de tener 3 elementos a tener 4. Si igualamos esta array a una constante, no estaríamos guardando la array de 4 elementos resultante sinó que guardaríamos el resultado del push, que sería soplo el número 4, tantos como elementos tiene dentro la array\n\n        const threeRandomPlusCorrectTagsArr = Shuffle(threeTagsArr)\n\n        this.setState ({\n            randomImageSrc: firstElement.src,\n            randomImageTags: firstElement.location,\n            locationOptions: threeRandomPlusCorrectTagsArr,\n        })\n\n        this.attempts = this.attempts+1\n    }\n\n    addOneToCounter = () => {\n        this.counter = this.counter+1\n    }\n\n    profileId = '42596988';\n    //cuore ID\n    numberOfPosts = '200000';\n\n    componentDidMount() {\n        fetch(`https://www.instagram.com/graphql/query/?query_hash=e769aa130647d2354c40ea6a439bfc08&variables={\"id\":\"${this.profileId}\",\"first\":${this.numberOfPosts}}`)\n          .then(res => res.json())\n          .then(data => this.setState({ data: data.data.user.edge_owner_to_timeline_media.edges }))\n          .then(() => this.cleanApiResponse())\n          .then(() => this.setRandomImageAndTags())\n    }\n\n\n    render () {\n\n        // const { randomImageSrc, locationOptions } = this.state;\n\n        // if (this.attempts < this.apiResultLength) {\n        //     return (\n        //         <div className=\"instagram-game\">\n        //             <div className=\"imageAndLocationsContainer\">\n        //             <h1>{texts[this.props.language].instagramQuestion}</h1>\n        //                 <div className=\"imageDisplayedContainer\">\n        //                     <div className=\"imageDisplayed\">\n        //                         <img src={randomImageSrc} alt=\"radom capture from the user's instagram feed\" />\n        //                     </div>\n        //                 </div>\n                        \n        //                 {locationOptions.map((option, index) => {\n        //                     return (\n        //                         <div key={index} className=\"instagram-location-buttons\">\n        //                             <ButtonIG value={option} currentLocation={this.state.randomImageLocation} addToCounter={this.addOneToCounter} key={index} setRandomImageAndTags={this.setRandomImageAndTags}\n        //                             >\n        //                             </ButtonIG>\n        //                         </div>\n        //                     )\n        //                 })}\n        //                 <p>{texts[this.props.language].correctAnswers} {this.counter}</p>\n        //             </div>\n        //         </div>\n        //     )\n        // } else {\n            return (\n                <h1>Has llegado al final! Ahora prueba de jugar con La Pegatina en Spotify o en Youtube</h1>\n            )\n        // }\n    }\n\n}\n\nexport default Instagram;\n\n"]},"metadata":{},"sourceType":"module"}