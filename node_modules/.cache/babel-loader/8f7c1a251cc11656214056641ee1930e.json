{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Spotify/SpotifyRoundOne/SpotifyRoundOne.js\";\nimport React from 'react';\nimport '../../../App.css';\nimport '../Spotify.css';\nimport Sound from 'react-sound';\nimport Button from '../Button/Button';\nimport Shuffle from '../../Utils/Shuffle';\nimport Spotify from '../../Utils/Spotify';\nimport PlayerCountdown from '../PlayerCountdown/PlayerCountdown';\nimport ShareTheGame from '../../ShareTheGame/ShareTheGame';\nimport texts from '../../../texts.json';\nimport ListenedSongs from '../ListenedSongs/ListenedSongs'; // import {Link} from 'react-router-dom';\n// import Register from '../../Register/Register'\n\nclass SpotifyRoundOne extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.spotifyObject = {};\n    this.spotifyFilteredObjArr = [];\n    this.chosenSong = '';\n    this.coincidence = false;\n    this.answerCountShow = false;\n    this.unknownSongs = [];\n    this.state = {\n      songNames: [],\n      currentSong: {\n        preview_url: '',\n        name: '',\n        uri: ''\n      },\n      hideResults: true,\n      correctAnswers: 0,\n      total: 0,\n      score: 0,\n      songUrl: '',\n      playerState: Sound.status.PLAYING,\n      playing: false,\n      playlistID: '37i9dQZF1DZ06evO2EUrsw',\n      userClicked: false\n    };\n\n    this.getSongsToDisplay = currentSongName => {\n      const allSongsArr = this.spotifyObject.tracks.items.map(item => item.track.name);\n      const filteredSongsArr = allSongsArr.filter(song => song !== currentSongName);\n      const shuffledFilterSongsArr = Shuffle(filteredSongsArr);\n      const fourNonShuffledSongsArr = shuffledFilterSongsArr.slice(0, 3); // actually 3\n\n      fourNonShuffledSongsArr.push(currentSongName); // now 4\n\n      const fourShuffledSongsArr = Shuffle(fourNonShuffledSongsArr);\n      return fourShuffledSongsArr;\n    };\n\n    this.chooseSongs = () => {\n      const {\n        currentSong\n      } = this.state;\n      this.setState({\n        songNames: this.getSongsToDisplay(currentSong.name)\n      });\n    };\n\n    this.setNewRandomSong = () => {\n      const {\n        total\n      } = this.state;\n\n      if (this.spotifyFilteredObjArr.length === 0) {\n        return;\n      }\n\n      const randomSong = this.spotifyFilteredObjArr[Math.floor(Math.random() * this.spotifyFilteredObjArr.length)].track;\n      this.spotifyFilteredObjArr = this.spotifyFilteredObjArr.filter(song => song.track.id !== randomSong.id);\n      this.setState({\n        currentSong: {\n          preview_url: randomSong.preview_url,\n          name: randomSong.name,\n          uri: randomSong.uri\n        },\n        songNames: this.getSongsToDisplay(randomSong.name),\n        hideResults: true,\n        total: total + 1,\n        playerState: Sound.status.STOPPED\n      });\n    };\n\n    this.userHasClicked = () => {\n      this.setState({\n        userClicked: true\n      });\n    };\n\n    this.writeChosenSong = songName => {\n      this.chosenSong = songName;\n\n      if (props.userClicked) {\n        // A button has been already clicked, this will block\n        // clicks on the rest of the buttons\n        return;\n      } // set userClicked to true, so next buttons clicked will do nothing\n\n\n      userHasClicked();\n    };\n\n    this.checkCoincidence = () => {\n      const {\n        currentSong,\n        correctAnswers,\n        score\n      } = this.state;\n      this.coincidence = currentSong.name === this.chosenSong;\n      this.unknownSongs.push(currentSong);\n      this.setState({\n        hideResults: false,\n        correctAnswers: this.coincidence ? correctAnswers + 1 : correctAnswers,\n        score: this.coincidence ? score + 100 : score\n      });\n    };\n\n    this.showAnswerCount = () => {\n      this.answerCountShow = true;\n    };\n\n    this.getSongUrl = songName => {\n      // allTracksArr is an array made of tracks (each one, in an object,\n      // and as much tracks as songs are in the playlist)\n      const allTracksArr = this.spotifyFilteredObjArr.map(item => item.track); // trackArr is an array with an only index which is an object with 2 properties: name and preview_url\n\n      const oneTrackArr = allTracksArr.filter(track => track.name === songName); // Returns an array with the (only) object that fulfills this condition\n\n      const songUrl = oneTrackArr[0].preview_url;\n      this.setState({\n        songUrl,\n        playerState: Sound.status.PLAYING,\n        playing: true // return this.spotifyObject.tracks.items.filter(item => item.track.name === songName)[0].preview_url\n        // This does the same as getSongUrl but with much less lines\n\n      });\n    };\n\n    this.stopMusic = () => {\n      this.setState({\n        playerState: Sound.status.STOPPED,\n        playing: false\n      });\n    };\n\n    this.filterRightSongsFromSpotifyObject = () => {\n      this.spotifyFilteredObjArr = this.spotifyObject.tracks.items.filter(item => item.track.preview_url !== null);\n    };\n\n    this.setPlayingToFalse = () => {\n      this.setState({\n        playing: false\n      });\n    };\n  }\n\n  // API call to get the playlist data.\n  async componentDidMount() {\n    const {\n      playlistID\n    } = this.state;\n    this.spotifyObject = await Spotify.getPlaylist(playlistID);\n    this.filterRightSongsFromSpotifyObject();\n    this.setNewRandomSong();\n  }\n  /**\n   * This fn returns an array with 4 song names randomly including the current song\n   * @param {string} currentSong - name of the current song playing\n   * @returns {array} songsToDisplay\n  */\n\n\n  render() {\n    const {\n      score,\n      total,\n      currentSong,\n      hideResults,\n      songNames,\n      name,\n      songUrl,\n      correctAnswers,\n      playerState,\n      playing\n    } = this.state;\n    const {\n      language\n    } = this.props;\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(ShareTheGame, {\n      score: score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), total < 5 ? React.createElement(\"div\", {\n      className: \"show\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"QuestionAndAnswers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Countdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(PlayerCountdown, {\n      language: language,\n      onMusicPlays: this.chooseSongs,\n      setNewRandomSong: this.setNewRandomSong,\n      songURL: currentSong.preview_url,\n      coincidence: this.checkCoincidence,\n      showAnswerCount: this.showAnswerCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: `FourButtons ${hideResults ? 'forceGrayColor' : ''}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, songNames.map(songName => React.createElement(Button, {\n      key: songName,\n      printedSong: songName // We write it like this so the function writeChoosenSong isn't executed when the button is\n      // rendered but when the button is clicked. Different than what we're doing some lines\n      // above in the onMusicPlays, setNewRandomSong or songURL\n      ,\n      onClick: () => this.writeChosenSong(songName),\n      currentSong: currentSong.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      id: \"counter\",\n      className: \"instruct\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: this.answerCountShow ? 'show' : 'hide',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, texts[language].correctAnswers, correctAnswers, texts[language].outofText, total), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: this.answerCountShow ? 'show' : 'hide',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, texts[language].pointsText, score), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    })))) : React.createElement(ListenedSongs, {\n      username: name,\n      unknownSongs: this.unknownSongs,\n      language: language,\n      url: songUrl,\n      playStatus: playerState,\n      onClick: playing,\n      score: score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default SpotifyRoundOne;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Spotify/SpotifyRoundOne/SpotifyRoundOne.js"],"names":["React","Sound","Button","Shuffle","Spotify","PlayerCountdown","ShareTheGame","texts","ListenedSongs","SpotifyRoundOne","Component","spotifyObject","spotifyFilteredObjArr","chosenSong","coincidence","answerCountShow","unknownSongs","state","songNames","currentSong","preview_url","name","uri","hideResults","correctAnswers","total","score","songUrl","playerState","status","PLAYING","playing","playlistID","userClicked","getSongsToDisplay","currentSongName","allSongsArr","tracks","items","map","item","track","filteredSongsArr","filter","song","shuffledFilterSongsArr","fourNonShuffledSongsArr","slice","push","fourShuffledSongsArr","chooseSongs","setState","setNewRandomSong","length","randomSong","Math","floor","random","id","STOPPED","userHasClicked","writeChosenSong","songName","props","checkCoincidence","showAnswerCount","getSongUrl","allTracksArr","oneTrackArr","stopMusic","filterRightSongsFromSpotifyObject","setPlayingToFalse","componentDidMount","getPlaylist","render","language","outofText","pointsText"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../App.css';\nimport '../Spotify.css';\nimport Sound from 'react-sound';\nimport Button from '../Button/Button';\nimport Shuffle from '../../Utils/Shuffle';\nimport Spotify from '../../Utils/Spotify';\nimport PlayerCountdown from '../PlayerCountdown/PlayerCountdown';\nimport ShareTheGame from '../../ShareTheGame/ShareTheGame';\nimport texts from '../../../texts.json';\nimport ListenedSongs from '../ListenedSongs/ListenedSongs';\n// import {Link} from 'react-router-dom';\n// import Register from '../../Register/Register'\n\nclass SpotifyRoundOne extends React.Component {\n\n  // We have the object coming from the API call, here\n  spotifyObject = {};\n\n  // This array contains the songs coming from the spotifyObject that DO ave a preview_url\n  spotifyFilteredObjArr = [];\n\n  // Here the actual game mechanics start\n  chosenSong = '';\n\n  coincidence = false;\n\n  answerCountShow= false;\n\n  // All the songs that the user guessed wrong are pushed into this array\n  unknownSongs= [];\n\n  state = {\n\n      songNames: [],\n      currentSong: {\n          preview_url: '',\n          name: '',\n          uri: '',\n      },\n\n      hideResults: true,\n      correctAnswers: 0,\n      total: 0,\n      score: 0,\n      songUrl: '',\n      playerState: Sound.status.PLAYING,\n      playing: false,\n      playlistID: '37i9dQZF1DZ06evO2EUrsw',\n      userClicked: false,\n  }\n\n  // API call to get the playlist data.\n  async componentDidMount() {\n\n      const { playlistID } = this.state;\n\n      this.spotifyObject = await Spotify.getPlaylist(playlistID);\n      this.filterRightSongsFromSpotifyObject();\n      this.setNewRandomSong();\n  }\n\n  /**\n   * This fn returns an array with 4 song names randomly including the current song\n   * @param {string} currentSong - name of the current song playing\n   * @returns {array} songsToDisplay\n  */\ngetSongsToDisplay = (currentSongName) => {\n\n    const allSongsArr = this.spotifyObject.tracks.items.map((item) => item.track.name);\n\n    const filteredSongsArr = allSongsArr.filter((song) => (song !== currentSongName));\n\n    const shuffledFilterSongsArr = Shuffle(filteredSongsArr);\n\n    const fourNonShuffledSongsArr = shuffledFilterSongsArr.slice(0, 3); // actually 3\n    fourNonShuffledSongsArr.push(currentSongName); // now 4\n\n    const fourShuffledSongsArr = Shuffle(fourNonShuffledSongsArr);\n\n    return fourShuffledSongsArr;\n}\n\nchooseSongs = () => {\n\n    const { currentSong } = this.state;\n\n    this.setState({\n        songNames: this.getSongsToDisplay(currentSong.name),\n    });\n}\n\nsetNewRandomSong = () => {\n\n    const { total } = this.state;\n\n    if (this.spotifyFilteredObjArr.length === 0) {\n        return;\n    }\n\n    const randomSong = this.spotifyFilteredObjArr[Math.floor(Math.random() * this.spotifyFilteredObjArr.length)].track;\n\n    this.spotifyFilteredObjArr = this.spotifyFilteredObjArr.filter((song) => song.track.id !== randomSong.id);\n\n    this.setState({\n        currentSong: {\n            preview_url: randomSong.preview_url,\n            name: randomSong.name,\n            uri: randomSong.uri,\n        },\n        songNames: this.getSongsToDisplay(randomSong.name),\n        hideResults: true,\n        total: total + 1,\n        playerState: Sound.status.STOPPED,\n    });\n}\n\nuserHasClicked = () => {\n    this.setState({\n        userClicked: true,\n    });\n}\n\nwriteChosenSong = (songName) => {\n    this.chosenSong = songName;\n\n    if (props.userClicked) {\n        // A button has been already clicked, this will block\n        // clicks on the rest of the buttons\n        return;\n    }\n\n    // set userClicked to true, so next buttons clicked will do nothing\n    userHasClicked();\n}\n\ncheckCoincidence = () => {\n\n    const { currentSong, correctAnswers, score } = this.state;\n\n    this.coincidence = currentSong.name === this.chosenSong;\n\n    this.unknownSongs.push(currentSong);\n\n    this.setState({\n        hideResults: false,\n        correctAnswers: this.coincidence ? (correctAnswers + 1) : correctAnswers,\n        score: this.coincidence ? (score + 100) : score,\n    });\n}\n\nshowAnswerCount = () => {\n    this.answerCountShow = true;\n}\n\ngetSongUrl = (songName) => {\n\n    // allTracksArr is an array made of tracks (each one, in an object,\n    // and as much tracks as songs are in the playlist)\n    const allTracksArr = this.spotifyFilteredObjArr.map((item) => item.track);\n\n    // trackArr is an array with an only index which is an object with 2 properties: name and preview_url\n\n    const oneTrackArr = allTracksArr.filter((track) => (track.name === songName));\n    // Returns an array with the (only) object that fulfills this condition\n\n    const songUrl = oneTrackArr[0].preview_url;\n\n    this.setState({\n        songUrl,\n        playerState: Sound.status.PLAYING,\n        playing: true,\n        // return this.spotifyObject.tracks.items.filter(item => item.track.name === songName)[0].preview_url\n        // This does the same as getSongUrl but with much less lines\n    });\n}\n\nstopMusic = () => {\n    this.setState({\n        playerState: Sound.status.STOPPED,\n        playing: false,\n    });\n}\n\nfilterRightSongsFromSpotifyObject = () => {\n    this.spotifyFilteredObjArr = this.spotifyObject.tracks.items.filter((item) => item.track.preview_url !== null);\n}\n\nsetPlayingToFalse = () => {\n    this.setState({\n        playing: false,\n    });\n}\n\n\nrender() {\n\n    const { score, total, currentSong, hideResults, songNames, name, songUrl, correctAnswers, playerState, playing } = this.state;\n\n    const { language } = this.props;\n\n    return (\n        <section>\n            <ShareTheGame score={score} />\n            {total < 5\n                ? (\n                    <div className=\"show\">\n                        <div className=\"QuestionAndAnswers\">\n                            <div className=\"Countdown\">\n                                <PlayerCountdown\n                                    language={language}\n                                    onMusicPlays={this.chooseSongs}\n                                    setNewRandomSong={this.setNewRandomSong}\n                                    songURL={currentSong.preview_url}\n                                    coincidence={this.checkCoincidence}\n                                    showAnswerCount={this.showAnswerCount}\n                                />\n                            </div>\n                            <div className={`FourButtons ${hideResults ? 'forceGrayColor' : ''}`}>\n                                {songNames.map((songName) => (\n                                    <Button\n                                        key={songName}\n                                        printedSong={songName}\n                                        // We write it like this so the function writeChoosenSong isn't executed when the button is\n                                        // rendered but when the button is clicked. Different than what we're doing some lines\n                                        // above in the onMusicPlays, setNewRandomSong or songURL\n                                        onClick={() => this.writeChosenSong(songName)}\n                                        currentSong={currentSong.name}\n                                    />\n                                ))}\n                            </div>\n                            <div id=\"counter\" className=\"instruct\">\n                                <p className={this.answerCountShow ? 'show' : 'hide'}>\n                                    {texts[language].correctAnswers}\n                                    {correctAnswers}\n                                    {texts[language].outofText}\n                                    {total}\n                                </p>\n                                <br />\n                                <p className={this.answerCountShow ? 'show' : 'hide'}>\n                                    {texts[language].pointsText}\n                                    {score}\n                                </p>\n                                <hr />\n                            </div>\n                        </div>\n                    </div>\n                )\n                : (\n                    <ListenedSongs\n                        username={name}\n                        unknownSongs={this.unknownSongs}\n                        language={language}\n                        url={songUrl}\n                        playStatus={playerState}\n                        onClick={playing}\n                        score={score}\n                    />\n                )}\n            {/* {name !== undefined\n                ? <Link to='spotifyRoundTwo'>Go to Spotify round two</Link>\n                : <Register />\n            } */}\n        </section>\n    );\n}\n}\n\nexport default SpotifyRoundOne;\n"]},"metadata":{},"sourceType":"module"}