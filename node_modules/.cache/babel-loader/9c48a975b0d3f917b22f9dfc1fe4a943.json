{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Instagram/Instagram.js\";\nimport React, { Component } from 'react';\nimport Shuffle from '../Utils/Shuffle';\nimport ButtonIG from './Button_Ig';\n\nclass Instagram extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imagesFromAPIArrOfObj: [],\n      //Array of objects retrieved from the API. Each object is for a different image but contains different keys\n      imagesWithLocationArrOfObj: [],\n      //imagesFromAPIArrOfObj but only the ones that have .location. Still an array of objects\n      onlyImagesArr: [],\n      //Array of images, JUST images, no other keys, retrieved from the API and shuffled\n      fourImagesArr: [],\n      imageCounter: 0,\n      //Index from the onlyImagesArray of the image displayed\n      allPicturesLocationsArr: [],\n      //Array with just the NAMES of the locations of ALL images retrieved from the API that DO have a location\n      fourLocationsToPrintInTheButtonArr: []\n    };\n\n    this.getPhotosToDisplay = () => {\n      this.setState({\n        onlyImagesArr: Shuffle(this.state.imagesWithLocationArrOfObj.map(image => image.node.thumbnail_resources[4].src))\n      });\n      this.getFourPhotosToDisplay();\n    };\n\n    this.getFourPhotosToDisplay = () => {\n      let fourPhotosToDisplayArr = this.state.onlyImagesArr.slice(0, 4);\n      this.setState({\n        fourImagesArr: fourPhotosToDisplayArr\n      });\n      this.getFourLocationsToPrintInTheButtons();\n    };\n\n    this.getFourLocationsToPrintInTheButtons = () => {\n      let fourLocationsToPrintInTheButtonArr = this.state.allPicturesLocationsArr.slice(0, 4);\n      this.setState({\n        fourLocationsToPrintInTheButtonArr\n      });\n    };\n  }\n\n  async componentDidMount() {\n    const response = await fetch('https://www.instagram.com/bestvacations/?__a=1');\n    const data = await response.json();\n    console.log(\"FROM the API\", data.graphql);\n    this.setState({\n      imagesFromAPIArrOfObj: data.graphql.user.edge_owner_to_timeline_media.edges\n    });\n    const imagesWithLocationArrOfObj = data.graphql.user.edge_owner_to_timeline_media.edges.filter(img => img.node.location !== null);\n    this.setState({\n      imagesWithLocationArrOfObj,\n      locationsArr: imagesWithLocationArrOfObj.map(image => image.node.location.name)\n    });\n    console.log(\"Locations Array\", this.state.locationsArr);\n    this.getPhotosToDisplay();\n  }\n\n  render() {\n    const {\n      onlyImagesArr,\n      imageCounter,\n      fourImagesArr,\n      fourLocationsToPrintInTheButtonArr\n    } = this.state;\n    console.log(fourLocationsToPrintInTheButtonArr);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: fourImagesArr[imageCounter],\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), fourLocationsToPrintInTheButtonArr.map(location => {\n      return React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, location);\n    }));\n  }\n\n}\n\nexport default Instagram;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Instagram/Instagram.js"],"names":["React","Component","Shuffle","ButtonIG","Instagram","state","imagesFromAPIArrOfObj","imagesWithLocationArrOfObj","onlyImagesArr","fourImagesArr","imageCounter","allPicturesLocationsArr","fourLocationsToPrintInTheButtonArr","getPhotosToDisplay","setState","map","image","node","thumbnail_resources","src","getFourPhotosToDisplay","fourPhotosToDisplayArr","slice","getFourLocationsToPrintInTheButtons","componentDidMount","response","fetch","data","json","console","log","graphql","user","edge_owner_to_timeline_media","edges","filter","img","location","locationsArr","name","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Shuffle from '../Utils/Shuffle'\nimport ButtonIG from './Button_Ig';\n\nclass Instagram extends Component {\n\n    state= {\n        imagesFromAPIArrOfObj: [], //Array of objects retrieved from the API. Each object is for a different image but contains different keys\n        imagesWithLocationArrOfObj: [], //imagesFromAPIArrOfObj but only the ones that have .location. Still an array of objects\n        onlyImagesArr: [], //Array of images, JUST images, no other keys, retrieved from the API and shuffled\n        fourImagesArr: [],\n        imageCounter: 0, //Index from the onlyImagesArray of the image displayed\n        allPicturesLocationsArr: [], //Array with just the NAMES of the locations of ALL images retrieved from the API that DO have a location\n        fourLocationsToPrintInTheButtonArr: [],\n    }\n\n    getPhotosToDisplay = () => { \n        \n        this.setState({\n            onlyImagesArr: Shuffle(this.state.imagesWithLocationArrOfObj.map((image) => image.node.thumbnail_resources[4].src))\n        })\n\n        this.getFourPhotosToDisplay();\n    }\n\n    getFourPhotosToDisplay = () => {\n\n        let fourPhotosToDisplayArr = this.state.onlyImagesArr.slice(0, 4);\n        \n        this.setState({\n            fourImagesArr: fourPhotosToDisplayArr\n        })\n\n        this.getFourLocationsToPrintInTheButtons();\n    }\n\n    getFourLocationsToPrintInTheButtons = () => {\n        let fourLocationsToPrintInTheButtonArr = this.state.allPicturesLocationsArr.slice(0, 4);\n\n        this.setState({\n            fourLocationsToPrintInTheButtonArr\n        })\n    }\n\n\n\n\n    async componentDidMount() {\n    \n        const response = await fetch('https://www.instagram.com/bestvacations/?__a=1');\n    \n        const data = await response.json();\n    \n        console.log(\"FROM the API\", data.graphql);\n\n        this.setState({\n            imagesFromAPIArrOfObj: data.graphql.user.edge_owner_to_timeline_media.edges\n        })\n\n        const imagesWithLocationArrOfObj = data.graphql.user.edge_owner_to_timeline_media.edges.filter(img => img.node.location !== null)\n\n        this.setState ({\n            imagesWithLocationArrOfObj,\n            locationsArr: imagesWithLocationArrOfObj.map((image) => image.node.location.name)\n        })\n\n        console.log(\"Locations Array\", this.state.locationsArr)\n\n        this.getPhotosToDisplay();\n    };\n\n\n\n\n    render () {\n\n        const { onlyImagesArr, imageCounter, fourImagesArr, fourLocationsToPrintInTheButtonArr } = this.state;\n\n        console.log(fourLocationsToPrintInTheButtonArr)\n\n        return (\n            <div>\n\n                <img src={fourImagesArr[imageCounter]} alt=\"\" />\n\n                {fourLocationsToPrintInTheButtonArr.map((location) => {\n                    return (\n                        <button>{location}</button>\n                    )\n                })}\n            </div>\n        )\n    }\n\n}\n\nexport default Instagram;\n\n"]},"metadata":{},"sourceType":"module"}