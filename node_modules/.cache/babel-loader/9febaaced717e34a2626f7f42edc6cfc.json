{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Instagram/InstagramTags/InstagramTags.js\";\nimport React, { Component } from 'react';\nimport Shuffle from '../../Utils/Shuffle';\nimport ButtonIG from '../InstagramTags/ButtonIgTags';\nimport texts from '../../../texts.json';\nimport './InstagramTags.css';\n\nclass Instagram extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      randomImageSrc: \"\",\n      randomImageTags: \"\",\n      tagsOptions: [],\n      data: []\n    };\n    this.attempts = 0;\n    this.counter = 0;\n    this.apiCleanedResult = {};\n    this.apiResultLength = 0;\n\n    this.cleanApiResponse = () => {\n      const images = this.state.data.filter(img => img.node.edge_media_to_tagged_user.edges !== null);\n      const result = images.map(image => ({\n        src: image.node.thumbnail_resources[4].src,\n        tags: image.node.edge_media_to_tagged_user.edges.map(edge => edge.node.user.username)\n      }));\n      this.apiCleanedResult = result;\n      console.log(\"api clean result\", this.apiCleanedResult);\n      this.apiResultLength = result.length;\n      console.log('llargaria', images);\n    };\n\n    this.setRandomImageAndTags = () => {\n      Shuffle(this.apiCleanedResult);\n      const firstElement = this.apiCleanedResult.shift();\n      console.log(\"firstElement\", firstElement);\n      const imagesObjArr = this.apiCleanedResult.slice(0, 3);\n      const threeTagsArr = imagesObjArr.map(imageObj => imageObj.tags);\n      threeTagsArr.push(firstElement.tags); //Cuando hacemos el push, el mismo array, con el mismo nombre, pasa de tener 3 elementos a tener 4. Si igualamos esta array a una constante, no estaríamos guardando la array de 4 elementos resultante sinó que guardaríamos el resultado del push, que sería soplo el número 4, tantos como elementos tiene dentro la array\n\n      const threeRandomPlusCorrectTagsArr = Shuffle(threeTagsArr);\n      this.setState({\n        randomImageSrc: firstElement.src,\n        randomImageTags: firstElement.tags.map(tag => tag),\n        tagsOptions: threeRandomPlusCorrectTagsArr\n      });\n      this.attempts = this.attempts + 1;\n    };\n\n    this.addOneToCounter = () => {\n      this.counter = this.counter + 1;\n    };\n\n    this.profileId = '32402644';\n    this.numberOfPosts = '200000';\n  }\n\n  componentDidMount() {\n    fetch(`https://www.instagram.com/graphql/query/?query_hash=e769aa130647d2354c40ea6a439bfc08&variables={\"id\":\"${this.profileId}\",\"first\":${this.numberOfPosts}}`).then(res => res.json()).then(data => this.setState({\n      data: data.data.user.edge_owner_to_timeline_media.edges\n    })).then(() => this.cleanApiResponse()).then(() => this.setRandomImageAndTags());\n  }\n\n  render() {\n    const {\n      randomImageSrc,\n      tagsOptions\n    } = this.state;\n\n    if (this.attempts < this.apiResultLength) {\n      return React.createElement(\"div\", {\n        className: \"instagram-game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"imageAndLocationsContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, texts[this.props.language].whosTaggedQuestionText), React.createElement(\"div\", {\n        className: \"imageDisplayedContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"imageDisplayed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: randomImageSrc,\n        alt: \"radom capture from the user's instagram feed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }))), tagsOptions.map((option, index) => {\n        return React.createElement(\"div\", {\n          key: index,\n          className: \"instagram-location-buttons\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, React.createElement(ButtonIG, {\n          value: option,\n          currentTags: this.state.randomImageTags,\n          addToCounter: this.addOneToCounter,\n          key: index,\n          setRandomImageAndTags: this.setRandomImageAndTags,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }));\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, texts[this.props.language].correctAnswers, \" \", this.counter)));\n    } else {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Has llegado al final! Ahora prueba de jugar con La Pegatina en Spotify o en Youtube\");\n    }\n  }\n\n}\n\nexport default Instagram;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Instagram/InstagramTags/InstagramTags.js"],"names":["React","Component","Shuffle","ButtonIG","texts","Instagram","state","randomImageSrc","randomImageTags","tagsOptions","data","attempts","counter","apiCleanedResult","apiResultLength","cleanApiResponse","images","filter","img","node","edge_media_to_tagged_user","edges","result","map","image","src","thumbnail_resources","tags","edge","user","username","console","log","length","setRandomImageAndTags","firstElement","shift","imagesObjArr","slice","threeTagsArr","imageObj","push","threeRandomPlusCorrectTagsArr","setState","tag","addOneToCounter","profileId","numberOfPosts","componentDidMount","fetch","then","res","json","edge_owner_to_timeline_media","render","props","language","whosTaggedQuestionText","option","index","correctAnswers"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Shuffle from '../../Utils/Shuffle'\nimport ButtonIG from '../InstagramTags/ButtonIgTags';\nimport texts from '../../../texts.json';\n\nimport './InstagramTags.css';\n\nclass Instagram extends Component {\n\n    state = {\n        randomImageSrc: \"\",\n        randomImageTags: \"\",\n        tagsOptions: [],\n        data: [],\n    }\n\n    attempts= 0;\n    counter= 0;\n    apiCleanedResult = {}\n    apiResultLength = 0\n\n\n   //Cleans the object retrieved from the api and leaves an array of objects that just have the image source for the picture and the image location\n    cleanApiResponse = () => {\n        const images = this.state.data.filter(img => img.node.edge_media_to_tagged_user.edges !== null)\n\n        const result = images.map((image) => ({\n            src: image.node.thumbnail_resources[4].src,\n            tags: image.node.edge_media_to_tagged_user.edges.map((edge) => edge.node.user.username)\n        }))\n\n        this.apiCleanedResult = result;\n        console.log(\"api clean result\", this.apiCleanedResult)\n\n        this.apiResultLength = result.length\n\n        console.log('llargaria', images)\n    }\n\n    //Takes off the first element of the array resulting in cleanApiResponse (called result) and takes the next 3 elements\n    setRandomImageAndTags = () => {\n\n        Shuffle(this.apiCleanedResult)\n\n        const firstElement = this.apiCleanedResult.shift();\n\n        console.log(\"firstElement\", firstElement)\n\n        const imagesObjArr = this.apiCleanedResult.slice(0, 3);\n\n        const threeTagsArr = imagesObjArr.map((imageObj) => imageObj.tags)\n\n        threeTagsArr.push(firstElement.tags) //Cuando hacemos el push, el mismo array, con el mismo nombre, pasa de tener 3 elementos a tener 4. Si igualamos esta array a una constante, no estaríamos guardando la array de 4 elementos resultante sinó que guardaríamos el resultado del push, que sería soplo el número 4, tantos como elementos tiene dentro la array\n\n        const threeRandomPlusCorrectTagsArr = Shuffle(threeTagsArr)\n\n        this.setState ({\n            randomImageSrc: firstElement.src,\n            randomImageTags: firstElement.tags.map((tag) => tag),\n            tagsOptions: threeRandomPlusCorrectTagsArr,\n        })\n\n        this.attempts = this.attempts+1\n    }\n\n    addOneToCounter = () => {\n        this.counter = this.counter+1\n    }\n\n    // profileId = '42596988';\n    //cuore ID\n\n    profileId='32402644';\n    //Rut's ID\n    numberOfPosts = '200000';\n\n    componentDidMount() {\n        fetch(`https://www.instagram.com/graphql/query/?query_hash=e769aa130647d2354c40ea6a439bfc08&variables={\"id\":\"${this.profileId}\",\"first\":${this.numberOfPosts}}`)\n          .then(res => res.json())\n          .then(data => this.setState({ data: data.data.user.edge_owner_to_timeline_media.edges }))\n          .then(() => this.cleanApiResponse())\n          .then(() => this.setRandomImageAndTags())\n    }\n\n\n    render () {\n\n        const { randomImageSrc, tagsOptions } = this.state;\n\n        if (this.attempts < this.apiResultLength) {\n            return (\n                <div className=\"instagram-game\">\n                    <div className=\"imageAndLocationsContainer\">\n                    <h1>{texts[this.props.language].whosTaggedQuestionText}</h1>\n                        <div className=\"imageDisplayedContainer\">\n                            <div className=\"imageDisplayed\">\n                                <img src={randomImageSrc} alt=\"radom capture from the user's instagram feed\" />\n                            </div>\n                        </div>\n                        \n                        {tagsOptions.map((option, index) => {\n                            return (\n                                <div key={index} className=\"instagram-location-buttons\">\n                                    <ButtonIG value={option} currentTags={this.state.randomImageTags} addToCounter={this.addOneToCounter} key={index} setRandomImageAndTags={this.setRandomImageAndTags}\n                                    >\n                                    </ButtonIG>\n                                </div>\n                            )\n                        })}\n                        <p>{texts[this.props.language].correctAnswers} {this.counter}</p>\n                    </div>\n                </div>\n            )\n        } else {\n            return (\n                <h1>Has llegado al final! Ahora prueba de jugar con La Pegatina en Spotify o en Youtube</h1>\n            )\n        }\n    }\n\n}\n\nexport default Instagram;\n\n"]},"metadata":{},"sourceType":"module"}