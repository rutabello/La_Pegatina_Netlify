{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Game/Game.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../../App.css';\nimport './Game.css';\nimport Button from '../Button/Button';\nimport Shuffle from '../Utils/Shuffle';\nimport Spotify from '../Utils/Spotify';\nimport PlayerCountdown from '../PlayerCountdown/PlayerCountdown';\nimport Sound from 'react-sound';\nimport { EmailShareButton, FacebookShareButton, LinkedinShareButton, PinterestShareButton, RedditShareButton, TelegramShareButton, TumblrShareButton, TwitterShareButton, WhatsappShareButton } from \"react-share\";\nimport { EmailIcon, FacebookIcon, LinkedinIcon, PinterestIcon, RedditIcon, TelegramIcon, TumblrIcon, TwitterIcon, WhatsappIcon } from \"react-share\";\nimport arrow from \"../../Pictures/arrow_left.svg\";\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.spotifyObject = {};\n    this.spotifyFilteredObjArr = [];\n    this.chosenSong = \"\";\n    this.coincidence = false;\n    this.answerCountShow = false;\n    this.unknownSongs = [];\n    this.shareurl = \"https://juegaconlapegatina.netlify.com/\";\n    this.socialIconSize = 33;\n    this.state = {\n      songNames: [],\n      currentSong: {\n        preview_url: \"\",\n        name: \"\",\n        uri: \"\",\n        album: \"\"\n      },\n      hideResults: true,\n      correctAnswers: 0,\n      total: 0,\n      score: 0,\n      songUrl: \"\",\n      playerState: Sound.status.PLAYING,\n      playing: false,\n      replayingSong: \"\",\n      //create a playlist array to save the chosen tracks from the user\n      playlistTracks: [],\n      noTracks: true,\n      songList: [],\n      playlistName: \"Mis favoritos\",\n      playlistID: \"37i9dQZF1DZ06evO2EUrsw\",\n      addedSong: false,\n      buttonText: \"Ponle en tu playlist!\",\n      buttonText2: \"Ya ésta en tú lista!\"\n    };\n\n    this.getSongsToDisplay = currentSongName => {\n      let allSongsArr = this.spotifyObject.tracks.items.map(function (item) {\n        return item.track.name;\n      });\n      let filteredSongsArr = allSongsArr.filter(function (song) {\n        return song !== currentSongName;\n      });\n      let shuffledFilterSongsArr = Shuffle(filteredSongsArr);\n      let fourNonShuffledSongsArr = shuffledFilterSongsArr.slice(0, 3); // actually 3\n\n      fourNonShuffledSongsArr.push(currentSongName); // now 4\n\n      let fourShuffledSongsArr = Shuffle(fourNonShuffledSongsArr);\n      return fourShuffledSongsArr;\n    };\n\n    this.chooseSongs = () => {\n      this.setState({\n        songNames: this.getSongsToDisplay(this.state.currentSong.name)\n      });\n    };\n\n    this.setNewRandomSong = () => {\n      if (this.spotifyFilteredObjArr.length === 0) {\n        return;\n      }\n\n      let randomSong = this.spotifyFilteredObjArr[Math.floor(Math.random() * this.spotifyFilteredObjArr.length)].track;\n      this.spotifyFilteredObjArr = this.spotifyFilteredObjArr.filter(song => song.track.id !== randomSong.id);\n      this.setState({\n        currentSong: {\n          preview_url: randomSong.preview_url,\n          name: randomSong.name,\n          uri: randomSong.uri,\n          album: randomSong.album.name\n        },\n        songNames: this.getSongsToDisplay(randomSong.name),\n        hideResults: true,\n        total: this.state.total + 1,\n        playerState: Sound.status.STOPPED\n      });\n    };\n\n    this.writeChosenSong = songName => {\n      this.chosenSong = songName;\n    };\n\n    this.showAnswerCount = () => {\n      this.answerCountShow = true;\n    };\n\n    this.getSongUrl = songName => {\n      //allTracksArr is an array made of tracks (each one, in an object,\n      // and as much tracks as songs are in the playlist)\n      let allTracksArr = this.spotifyFilteredObjArr.map(item => {\n        return item.track;\n      }); //trackArr is an array with an only index which is an object with 2 properties: name and preview_url\n\n      let oneTrackArr = allTracksArr.filter(track => {\n        //Returns an array with the (only) object that fulfills this condition \n        return track.name === songName;\n      });\n      let songUrl = oneTrackArr[0].preview_url;\n      this.setState({\n        songUrl: songUrl,\n        playerState: Sound.status.PLAYING,\n        playing: true,\n        replayingSong: songName // return this.spotifyObject.tracks.items.filter(item => item.track.name === songName)[0].preview_url \n        // This does the same as getSongUrl but with much less lines\n\n      });\n    };\n\n    this.stopMusic = () => {\n      this.setState({\n        playerState: Sound.status.STOPPED,\n        playing: false\n      });\n    };\n\n    this.filterRightSongsFromSpotifyObject = spotifyObject => {\n      this.spotifyFilteredObjArr = this.spotifyObject.tracks.items.filter(function (item) {\n        return item.track.preview_url !== null;\n      });\n      console.log(this.spotifyFilteredObjArr);\n    };\n\n    this.setPlayingToFalse = () => {\n      this.setState({\n        playing: false\n      });\n    };\n\n    this.checkCoincidence = () => {\n      this.coincidence = this.state.currentSong.name === this.chosenSong;\n\n      if (this.coincidence !== true) {\n        this.unknownSongs.push(this.state.currentSong);\n      }\n\n      this.setState({\n        hideResults: false,\n        correctAnswers: this.coincidence ? this.state.correctAnswers + 1 : this.state.correctAnswers,\n        score: this.coincidence ? this.state.score + 10 : this.state.score,\n        listIsEmpty: this.coincidence ? this.state.listIsEmpty : false\n      });\n      console.log(this.unknownSongs);\n    };\n\n    this.addTrack = track => {\n      const songIndex = track.target.id;\n      const selectedSong = this.unknownSongs[songIndex];\n      let mySongs = [...this.state.playlistTracks];\n      mySongs.push(selectedSong);\n      this.setState({\n        playlistTracks: mySongs,\n        noTracks: false,\n        addedSong: true\n      });\n    };\n\n    this.removeTrack = track => {\n      let newTracks = [...this.state.playlistTracks];\n      let index = track.target.id;\n      newTracks.splice(index, 1);\n      this.setState({\n        playlistTracks: newTracks\n      });\n    };\n\n    this.updatePlaylistName = name => {\n      let newName = name.target.value;\n      this.setState({\n        playlistName: newName\n      });\n    };\n\n    this.savePlaylist = () => {\n      const trackUris = this.state.playlistTracks.map(track => track.uri);\n      Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n        this.setState({\n          playlistName: 'Pegatinas Best',\n          playlistTracks: []\n        });\n      });\n    };\n  }\n\n  //API call to get the playlist data.\n  async componentDidMount() {\n    this.spotifyObject = await Spotify.getPlaylist(this.state.playlistID);\n    this.filterRightSongsFromSpotifyObject();\n    this.setNewRandomSong();\n    console.log(this.spotifyObject);\n  }\n  /**\n   * This fn returns an array with 4 song names randomly including the current song \n   * @param {string} currentSong - name of the current song playing\n   * @returns {array} songsToDisplay\n  */\n\n\n  //since we're probably only play with one playlist we might not need the following method\n  //BUT: it could be useful for the next stages (playing with different levels/prices)\n\n  /* componentDidUpdate  = async  (prevProps, prevState) => {\n    if (prevState.clave !== this.state.clave) {\n        \n      this.spotifyObject = await Spotify.getPlaylist(this.state.playlistID)\n      this.filterRightSongsFromSpotifyObject();\n    }\n  } \n   show = (event) => {\n     let newList = event.target.className; \n     this.setState({\n        clave: newList,\n     })\n  }*/\n  render() {\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"show\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"QuestionAndAnswers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Countdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(PlayerCountdown, {\n      onMusicPlays: this.chooseSongs,\n      setNewRandomSong: this.setNewRandomSong,\n      songURL: this.state.currentSong.preview_url,\n      coincidence: this.checkCoincidence,\n      showAnswerCount: this.showAnswerCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"FourButtons \" + (this.state.hideResults ? 'forceGrayColor' : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, this.state.songNames.map(songName => {\n      return React.createElement(Button, {\n        key: songName,\n        printedSong: songName //We write it like this so the function writeChoosenSong isn't executed when the button is rendered but when the button \n        //is clicked. Different than what we're doing some lines above in the onMusicPlays, setNewRandomSong or songURL\n        ,\n        onClick: () => this.writeChosenSong(songName),\n        currentSong: this.state.currentSong.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      id: \"counter\",\n      className: \"instruct\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: this.answerCountShow ? \"show\" : \"hide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"Respuestas correctas: \", this.state.correctAnswers, \" de \", this.state.total), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: this.answerCountShow ? \"show\" : \"hide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, \"Puntos: \", this.state.score)), React.createElement(\"div\", {\n      class: \"sharethis-inline-share-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: this.unknownSongs.length > 0 ? \"show\" : \"hide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"instruct\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, \"Aprende de tus errores:\"), React.createElement(\"ul\", {\n      id: \"mistakes\",\n      className: \"instruct\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, this.unknownSongs.map((song, index) => {\n      return React.createElement(\"li\", {\n        key: index,\n        id: index,\n        className: \"mistake-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"song-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, song.name, \" (\", song.album, \")\"), React.createElement(\"button\", {\n        className: \"repeat-button\",\n        onClick: this.state.playing ? () => this.stopMusic() : () => this.getSongUrl(song),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, this.state.playing ? \"Pausa\" : \"Vuelve a escucharla\"), React.createElement(\"button\", {\n        id: index,\n        onClick: this.addTrack,\n        className: \"repeat-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, this.state.buttonText));\n    })), React.createElement(\"input\", {\n      id: \"playlistName\",\n      className: \"repeat-button\",\n      onChange: this.updatePlaylistName,\n      defaultValue: this.state.playlistName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"playlistSave\",\n      className: \"repeat-button\",\n      onClick: this.savePlaylist,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"Save Playlist\"), React.createElement(\"div\", {\n      className: \"playlist-spotify\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, this.state.noTracks ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \"Elige canciones para tu nueva lista!\") : this.state.playlistTracks.map((selected, index) => React.createElement(\"div\", {\n      key: index,\n      id: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, \" \", selected.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, \" (\", selected.album, \")\"), React.createElement(\"button\", {\n      className: \"remove-button\",\n      onClick: this.removeTrack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, \"-\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    })))), React.createElement(Sound, {\n      url: this.state.songUrl,\n      playStatus: this.state.playerState,\n      autoLoad: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    })))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(Link, {\n      className: \"link\",\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, \"Volver al inicio\")), React.createElement(\"div\", {\n      id: \"media-share-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"arrow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: arrow,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"share-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(EmailShareButton, {\n      url: this.shareurl,\n      title: `He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`,\n      className: \"Demo_some-network__share-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(EmailIcon, {\n      size: 50,\n      round: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    })), React.createElement(FacebookShareButton, {\n      url: this.shareurl,\n      title: `He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`,\n      className: \"Demo_some-network__share-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, React.createElement(FacebookIcon, {\n      size: 50,\n      round: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    })), React.createElement(LinkedinShareButton, {\n      url: this.shareurl,\n      title: `He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`,\n      className: \"Demo_some-network__share-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(LinkedinIcon, {\n      size: 50,\n      round: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    })), React.createElement(PinterestShareButton, {\n      url: this.shareurl,\n      title: `He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`,\n      className: \"Demo_some-network__share-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, React.createElement(PinterestIcon, {\n      size: 50,\n      round: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    })), React.createElement(RedditShareButton, {\n      url: this.shareurl,\n      title: `He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`,\n      className: \"Demo_some-network__share-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, React.createElement(RedditIcon, {\n      size: 50,\n      round: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    })), React.createElement(TelegramShareButton, {\n      url: this.shareurl,\n      title: `He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`,\n      className: \"Demo_some-network__share-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, React.createElement(TelegramIcon, {\n      size: 50,\n      round: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    })), React.createElement(TumblrShareButton, {\n      url: this.shareurl,\n      title: `He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`,\n      className: \"Demo_some-network__share-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(TumblrIcon, {\n      size: 50,\n      round: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    })), React.createElement(TwitterShareButton, {\n      url: this.shareurl,\n      title: `He jugado con las canciones de @LaPegatina y he hecho ${this.state.score} puntos. ¿Me superas?`,\n      className: \"Demo_some-network__share-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, React.createElement(TwitterIcon, {\n      size: 50,\n      round: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    })), React.createElement(WhatsappShareButton, {\n      url: this.shareurl,\n      title: `He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`,\n      className: \"Demo_some-network__share-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, React.createElement(WhatsappIcon, {\n      size: 50,\n      round: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Game/Game.js"],"names":["React","Link","Button","Shuffle","Spotify","PlayerCountdown","Sound","EmailShareButton","FacebookShareButton","LinkedinShareButton","PinterestShareButton","RedditShareButton","TelegramShareButton","TumblrShareButton","TwitterShareButton","WhatsappShareButton","EmailIcon","FacebookIcon","LinkedinIcon","PinterestIcon","RedditIcon","TelegramIcon","TumblrIcon","TwitterIcon","WhatsappIcon","Game","Component","spotifyObject","spotifyFilteredObjArr","chosenSong","coincidence","answerCountShow","unknownSongs","shareurl","socialIconSize","state","songNames","currentSong","preview_url","name","uri","album","hideResults","correctAnswers","total","score","songUrl","playerState","status","PLAYING","playing","replayingSong","playlistTracks","noTracks","songList","playlistName","playlistID","addedSong","buttonText","buttonText2","getSongsToDisplay","currentSongName","allSongsArr","tracks","items","map","item","track","filteredSongsArr","filter","song","shuffledFilterSongsArr","fourNonShuffledSongsArr","slice","push","fourShuffledSongsArr","chooseSongs","setState","setNewRandomSong","length","randomSong","Math","floor","random","id","STOPPED","writeChosenSong","songName","showAnswerCount","getSongUrl","allTracksArr","oneTrackArr","stopMusic","filterRightSongsFromSpotifyObject","console","log","setPlayingToFalse","checkCoincidence","listIsEmpty","addTrack","songIndex","target","selectedSong","mySongs","removeTrack","newTracks","index","splice","updatePlaylistName","newName","value","savePlaylist","trackUris","then","componentDidMount","getPlaylist","render","selected","arrow"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\nimport '../../App.css';\nimport './Game.css';\nimport Button from '../Button/Button';\nimport Shuffle from '../Utils/Shuffle';\nimport Spotify from '../Utils/Spotify';\nimport PlayerCountdown from '../PlayerCountdown/PlayerCountdown';\nimport Sound from 'react-sound';\nimport {\n  EmailShareButton,\n  FacebookShareButton,\n  LinkedinShareButton,\n  PinterestShareButton,\n  RedditShareButton,\n  TelegramShareButton,\n  TumblrShareButton,\n  TwitterShareButton,\n  WhatsappShareButton,\n} from \"react-share\";\n\nimport {\n  EmailIcon,\n  FacebookIcon,\n  LinkedinIcon,\n  PinterestIcon,\n  RedditIcon,\n  TelegramIcon,\n  TumblrIcon,\n  TwitterIcon,\n  WhatsappIcon,\n} from \"react-share\";\n\nimport arrow from '../../Pictures/arrow_left.svg'\n\nclass Game extends React.Component {\n\n  // We have the object coming from the API call here with ALL the retrieved songs\n  spotifyObject = {}; \n  //This array contains the songs coming from the spotifyObject that DO have a preview_url\n  spotifyFilteredObjArr = []; \n  //Here the actual game mechanics start\n  chosenSong = \"\";\n  coincidence = false;\n  answerCountShow= false;\n  //All the songs that the user guessed wrong are pushed into this array\n  unknownSongs= []; \n\n  shareurl=\"https://juegaconlapegatina.netlify.com/\";\n\n  socialIconSize=33;\n\n  state = {\n \n    songNames: [],\n    currentSong: {\n        preview_url: \"\",\n        name: \"\",\n        uri: \"\",\n        album: \"\"\n    },  \n\n    hideResults: true,\n    correctAnswers: 0,\n    total: 0,\n    score: 0,\n    songUrl: \"\",\n    playerState: Sound.status.PLAYING,\n    playing: false,\n    replayingSong: \"\",\n    \n    //create a playlist array to save the chosen tracks from the user\n    playlistTracks : [],\n    noTracks: true,\n    songList: [],\n    playlistName: \"Mis favoritos\",\n    playlistID: \"37i9dQZF1DZ06evO2EUrsw\",\n    addedSong: false,\n    buttonText: \"Ponle en tu playlist!\",\n    buttonText2: \"Ya ésta en tú lista!\"\n  }\n\n  //API call to get the playlist data.\n  async componentDidMount() {   \n    this.spotifyObject = await Spotify.getPlaylist(this.state.playlistID);\n    this.filterRightSongsFromSpotifyObject();\n    this.setNewRandomSong();\n    console.log(this.spotifyObject)\n  }\n\n  /**\n   * This fn returns an array with 4 song names randomly including the current song \n   * @param {string} currentSong - name of the current song playing\n   * @returns {array} songsToDisplay\n  */\n  getSongsToDisplay = (currentSongName) => {\n\n    let allSongsArr = this.spotifyObject.tracks.items.map(function (item){\n      return item.track.name;\n    });\n    \n    let filteredSongsArr = allSongsArr.filter(function (song) {\n\n      return song !== currentSongName;\n    });\n\n    let shuffledFilterSongsArr = Shuffle(filteredSongsArr);\n\n    let fourNonShuffledSongsArr = shuffledFilterSongsArr.slice(0, 3); // actually 3\n    fourNonShuffledSongsArr.push(currentSongName); // now 4\n    \n    let fourShuffledSongsArr = Shuffle(fourNonShuffledSongsArr);\n\n    return fourShuffledSongsArr;\n  }\n\n  chooseSongs = () => {\n    this.setState({\n      songNames: this.getSongsToDisplay(this.state.currentSong.name)\n    })\n  }\n\n  setNewRandomSong = () => {\n\n    if (this.spotifyFilteredObjArr.length === 0) {\n      return\n    }\n\n    let randomSong = this.spotifyFilteredObjArr[Math.floor(Math.random()*this.spotifyFilteredObjArr.length)].track;\n\n    this.spotifyFilteredObjArr = this.spotifyFilteredObjArr.filter(song => song.track.id !== randomSong.id)\n\n    this.setState({\n      currentSong: {\n        preview_url: randomSong.preview_url,\n        name: randomSong.name,\n        uri: randomSong.uri,\n        album: randomSong.album.name\n\n      },\n      \n      songNames: this.getSongsToDisplay(randomSong.name),\n      hideResults: true,\n      total: this.state.total +1,\n      playerState: Sound.status.STOPPED\n    });\n  }\n  \n  writeChosenSong = (songName) => {\n    this.chosenSong = songName;\n  }\n  \n  \n  showAnswerCount = () => {\n    this.answerCountShow= true;\n  }\n  \n  getSongUrl = (songName) => {\n    \n    //allTracksArr is an array made of tracks (each one, in an object,\n    // and as much tracks as songs are in the playlist)\n    let allTracksArr = this.spotifyFilteredObjArr.map((item) => { \n      return item.track;\n    })\n\n    //trackArr is an array with an only index which is an object with 2 properties: name and preview_url\n    \n    let oneTrackArr = allTracksArr.filter((track) => { \n      //Returns an array with the (only) object that fulfills this condition \n      return track.name === songName;\n    })\n\n    let songUrl = oneTrackArr[0].preview_url;\n\n    this.setState({\n      songUrl: songUrl,\n      playerState: Sound.status.PLAYING,\n      playing: true,\n      replayingSong: songName\n      // return this.spotifyObject.tracks.items.filter(item => item.track.name === songName)[0].preview_url \n      // This does the same as getSongUrl but with much less lines\n    }) \n  }\n  \n  stopMusic = () => {\n    this.setState({\n      playerState: Sound.status.STOPPED,\n      playing: false\n    })\n  }\n  \n  filterRightSongsFromSpotifyObject = (spotifyObject) => {\n    this.spotifyFilteredObjArr = this.spotifyObject.tracks.items.filter(function (item) {\n    return item.track.preview_url !== null})\n    console.log(this.spotifyFilteredObjArr)\n  }\n  \n  setPlayingToFalse = () => {\n    this.setState({\n      playing: false\n    })\n  }\n\n  checkCoincidence = () => {  \n    this.coincidence = this.state.currentSong.name === this.chosenSong;\n\n    if (this.coincidence !== true) { \n      this.unknownSongs.push(this.state.currentSong)\n    }\n\n    this.setState({\n      hideResults: false,\n      correctAnswers: this.coincidence ? (this.state.correctAnswers +1) : this.state.correctAnswers,\n      score: this.coincidence ? (this.state.score +10) : this.state.score,\n      listIsEmpty: this.coincidence ? (this.state.listIsEmpty) : false\n    })\n\n    console.log(this.unknownSongs)\n  }\n\n  addTrack = (track) => {\n\n    const songIndex = track.target.id;\n    const selectedSong = this.unknownSongs[songIndex];\n\n   let mySongs = [...this.state.playlistTracks];\n   mySongs.push(selectedSong);\n\n   this.setState({\n\n     playlistTracks: mySongs,\n     noTracks: false,\n     addedSong: true\n   }) \n }\n\n   removeTrack = (track) => {\n\n    let newTracks = [...this.state.playlistTracks];    \n    let index = track.target.id;\n\n     newTracks.splice(index, 1);\n\n     this.setState({\n       playlistTracks: newTracks\n      }); \n\n \n}\n\nupdatePlaylistName = (name) => {\n\n  let newName = name.target.value;\n\n  this.setState({\n    playlistName: newName\n  });\n}\n\n  savePlaylist = () => {\n\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n\n      this.setState({\n\n        playlistName: 'Pegatinas Best',\n        playlistTracks: [],\n        \n      });\n    });\n  }\n  \n  //since we're probably only play with one playlist we might not need the following method\n  //BUT: it could be useful for the next stages (playing with different levels/prices)\n            \n  /* componentDidUpdate  = async  (prevProps, prevState) => {\n    if (prevState.clave !== this.state.clave) {\n        \n      this.spotifyObject = await Spotify.getPlaylist(this.state.playlistID)\n      this.filterRightSongsFromSpotifyObject();\n    }\n  } \n\n  show = (event) => {\n\n    let newList = event.target.className; \n\n    this.setState({\n \n      clave: newList,\n\n    })\n  }*/\n\n  render() {\n    return (\n      <section>\n        <div className=\"show\"> \n          <div className=\"QuestionAndAnswers\">\n            <div className=\"Countdown\">\n              \n              <PlayerCountdown\n                onMusicPlays={this.chooseSongs}\n                setNewRandomSong={this.setNewRandomSong}\n                songURL={this.state.currentSong.preview_url} \n                coincidence={this.checkCoincidence}\n                showAnswerCount={this.showAnswerCount}\n              />\n            </div>\n            <div className={\"FourButtons \" + (this.state.hideResults ? 'forceGrayColor' : \"\")} >\n              {this.state.songNames.map((songName) => {\n                return (\n                  <Button \n                    key={songName} \n                    printedSong={songName} \n                    //We write it like this so the function writeChoosenSong isn't executed when the button is rendered but when the button \n                    //is clicked. Different than what we're doing some lines above in the onMusicPlays, setNewRandomSong or songURL\n                    onClick={() => this.writeChosenSong(songName)}\n                    currentSong={this.state.currentSong.name}\n                  />\n                )\n              })}\n            </div>\n            {\n              //\n            }\n      \n\n\n\n            <div id=\"counter\" className=\"instruct\">\n              <p className={this.answerCountShow ? \"show\" : \"hide\"}>Respuestas correctas: {this.state.correctAnswers} de {this.state.total}</p>\n              <br/>\n              <p className={this.answerCountShow ? \"show\" : \"hide\"}>Puntos: {this.state.score}</p>\n            </div>           \n            <div class=\"sharethis-inline-share-buttons\"></div>\n            \n            <div className={this.unknownSongs.length > 0 ? \"show\" : \"hide\"}>\n                <h4 className=\"instruct\">Aprende de tus errores:</h4>\n                <ul id=\"mistakes\" className=\"instruct\">  \n                  {this.unknownSongs.map((song, index) => {\n                    return (\n                        <li key = {index} id={index} className = \"mistake-list\">\n                          <div className=\"song-name\">\n                            {song.name} ({song.album})\n                          </div>\n                          {/* We write it with an arrow function instead of a 'normal' function so we can avoid an infinite loop \n                          when setting the state */}  \n                          <button className=\"repeat-button\" onClick = {this.state.playing ? () => this.stopMusic() \n                            : () => this.getSongUrl(song)}>\n                            {this.state.playing ? \"Pausa\" : \"Vuelve a escucharla\"}                        \n                          </button> \n                          <button id={index} onClick={this.addTrack} className=\"repeat-button\">{this.state.buttonText}</button>\n                        </li>\n                    )\n                  })}\n                </ul>\n                <input id=\"playlistName\" className=\"repeat-button\" onChange={this.updatePlaylistName} defaultValue={this.state.playlistName} />\n                <button id=\"playlistSave\" className=\"repeat-button\" onClick={this.savePlaylist}>Save Playlist</button>\n                <div className=\"playlist-spotify\">\n              \n          {\n                   this.state.noTracks\n                   ? <p>Elige canciones para tu nueva lista!</p>\n                   : this.state.playlistTracks.map((selected, index) => (\n                     <div key={index} id={index}>   \n\n                       <p> {selected.name}</p>\n                       <p> ({selected.album})</p>                       \n                       <button className=\"remove-button\" onClick={this.removeTrack}>-</button>\n                       \n                       <hr/>                    \n                     </div>\n                   )\n                 )\n                   }\n          \n          </div>\n\n                <Sound \n                  url={this.state.songUrl}\n                  playStatus={this.state.playerState}\n                  autoLoad\n                />\n            </div>\n          \n          </div>\n        </div>\n        \n        <h3><Link className=\"link\" to=\"/\">Volver al inicio</Link></h3> \n        <div id=\"media-share-buttons\">\n          <div className=\"arrow\">\n            <img src={arrow} alt=\"\"/>\n          </div>\n          <div className=\"share-buttons\">\n            <EmailShareButton \n            url={this.shareurl} \n            title={`He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`}\n            className=\"Demo_some-network__share-button\"\n            >\n              <EmailIcon size={50} round />\n            </EmailShareButton>\n\n            <FacebookShareButton \n              url={this.shareurl} \n              title={`He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`}\n              className=\"Demo_some-network__share-button\"\n            >\n              <FacebookIcon size={50} round />\n            </FacebookShareButton>\n\n            <LinkedinShareButton \n              url={this.shareurl}\n              title={`He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`}\n              className=\"Demo_some-network__share-button\"\n            >\n              <LinkedinIcon size={50} round />\n            </LinkedinShareButton>\n\n            <PinterestShareButton \n              url={this.shareurl} \n              title={`He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`}\n              className=\"Demo_some-network__share-button\"\n            >\n              <PinterestIcon size={50} round />\n            </PinterestShareButton>\n\n            <RedditShareButton \n              url={this.shareurl} \n              title={`He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`}\n              className=\"Demo_some-network__share-button\"\n            >\n              <RedditIcon size={50} round />\n            </RedditShareButton>\n\n            <TelegramShareButton \n              url={this.shareurl} \n              title={`He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`}\n              className=\"Demo_some-network__share-button\"\n            >\n              <TelegramIcon size={50} round />\n            </TelegramShareButton>\n\n            <TumblrShareButton \n              url={this.shareurl} \n              title={`He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`}\n              className=\"Demo_some-network__share-button\"\n            >\n              <TumblrIcon size={50} round />\n            </TumblrShareButton>\n\n            <TwitterShareButton\n              url={this.shareurl}\n              title={`He jugado con las canciones de @LaPegatina y he hecho ${this.state.score} puntos. ¿Me superas?`}\n              className=\"Demo_some-network__share-button\"\n            >\n              <TwitterIcon size={50} round />\n            </TwitterShareButton>\n\n            <WhatsappShareButton \n              url={this.shareurl} \n              title={`He jugado con las canciones de La Pegatina y he hecho ${this.state.score} puntos. ¿Me superas?`}\n              className=\"Demo_some-network__share-button\"\n            >\n              <WhatsappIcon size={50} round />\n            </WhatsappShareButton>\n          </div>\n        </div>  \n      </section>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}