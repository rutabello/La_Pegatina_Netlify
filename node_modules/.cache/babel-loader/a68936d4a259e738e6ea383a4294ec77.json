{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Spotify/PlayerCountdown/PlayerCountdown.js\";\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React, { Component } from 'react';\nimport Sound from 'react-sound';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport './PlayerCountdown.css'; // import texts from '../../../texts.json';\n\nimport next from '../../../Pictures/skip-forwards-bw.gif';\nconst SONG_TIMER_DURATION = 15;\n\nclass PlayerCountdown extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      playStatus: Sound.status.STOPPED,\n      isPlaying: false,\n      uniqueKey: Date.now()\n    };\n    this.countdownIsDisplayed = false;\n\n    this.playMusicStartTimer = () => {\n      const {\n        showAnswerCount,\n        setNewRandomSong,\n        coincidence\n      } = this.props;\n      this.countdownIsDisplayed = true; // This makes the answer counter appear only when you've started playing the game and not before\n\n      showAnswerCount();\n      setNewRandomSong();\n      this.setState({\n        // This makes the countdown start counting when the new state is set (on play clicked) instead of when\n        // the page is loaded\n        uniqueKey: Date.now(),\n        playStatus: Sound.status.PLAYING,\n        isPlaying: true // This makes the 'play' button disappear once you click on it\n\n      }); // sets the length and specifics of the timer\n\n      setTimeout(() => {\n        this.stopMusic();\n        coincidence();\n      }, SONG_TIMER_DURATION * 1000);\n    };\n\n    this.renderTime = value => {\n      //   const { language } = this.props;\n      if (value === 0) {\n        // return <button type=\"button\" className=\"next-button\" onClick={this.playMusicStartTimer}>{texts[language].newSong}</button>;\n        // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n        return React.createElement(\"div\", {\n          id: \"next-button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: next,\n          alt: \"next\",\n          type: \"button\",\n          className: \"next-button\",\n          onClick: this.playMusicStartTimer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"timer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, value));\n    };\n\n    this.stopMusic = () => {\n      this.setState({\n        playStatus: Sound.status.STOPPED\n      });\n    };\n  }\n\n  // Methods\n  componentDidMount() {\n    this.playMusicStartTimer();\n  }\n\n  render() {\n    const {\n      songURL\n    } = this.props;\n    const {\n      playStatus,\n      uniqueKey,\n      isPlaying\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Sound, {\n      url: songURL,\n      playStatus: playStatus,\n      autoLoad: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: this.countdownIsDisplayed ? 'show' : 'hide',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(CountdownCircleTimer, {\n      key: uniqueKey,\n      isPlaying: isPlaying,\n      durationSeconds: SONG_TIMER_DURATION,\n      colors: [['#004777', 0.33], ['#F7B801', 0.33], ['#A30000']],\n      renderTime: this.renderTime,\n      size: 90,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default PlayerCountdown; // Put the information below in a README.md file later!\n// Circle Countdown Info https://www.npmjs.com/package/react-countdown-circle-timer\n// Number Countdown Info https://www.npmjs.com/package/react-countdown-now\n// React Sound Info https://www.npmjs.com/package/react-sound","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Spotify/PlayerCountdown/PlayerCountdown.js"],"names":["React","Component","Sound","CountdownCircleTimer","next","SONG_TIMER_DURATION","PlayerCountdown","state","playStatus","status","STOPPED","isPlaying","uniqueKey","Date","now","countdownIsDisplayed","playMusicStartTimer","showAnswerCount","setNewRandomSong","coincidence","props","setState","PLAYING","setTimeout","stopMusic","renderTime","value","componentDidMount","render","songURL"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React, { Component } from 'react';\nimport Sound from 'react-sound';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport './PlayerCountdown.css';\n// import texts from '../../../texts.json';\nimport next from '../../../Pictures/skip-forwards-bw.gif';\n\nconst SONG_TIMER_DURATION = 15;\n\nclass PlayerCountdown extends Component {\n\n  // Properties\n  state = {\n      playStatus: Sound.status.STOPPED,\n      isPlaying: false,\n      uniqueKey: Date.now(),\n  }\n\n  countdownIsDisplayed = false\n\n  // Methods\n\n  componentDidMount() {\n      this.playMusicStartTimer();\n  }\n\n  playMusicStartTimer = () => {\n\n      const { showAnswerCount, setNewRandomSong, coincidence } = this.props;\n\n      this.countdownIsDisplayed = true;\n\n      // This makes the answer counter appear only when you've started playing the game and not before\n      showAnswerCount();\n\n      setNewRandomSong();\n\n      this.setState({\n      // This makes the countdown start counting when the new state is set (on play clicked) instead of when\n      // the page is loaded\n          uniqueKey: Date.now(),\n          playStatus: Sound.status.PLAYING,\n          isPlaying: true,\n      // This makes the 'play' button disappear once you click on it\n      });\n\n      // sets the length and specifics of the timer\n\n      setTimeout(() => {\n\n          this.stopMusic();\n\n          coincidence();\n\n      }, SONG_TIMER_DURATION * 1000);\n  }\n\n  renderTime = (value) => {\n\n      //   const { language } = this.props;\n\n      if (value === 0) {\n          // return <button type=\"button\" className=\"next-button\" onClick={this.playMusicStartTimer}>{texts[language].newSong}</button>;\n          // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n          return (\n              <div id=\"next-button\">\n                  <img src={next} alt=\"next\" type=\"button\" className=\"next-button\" onClick={this.playMusicStartTimer} />\n              </div>\n          );\n      }\n\n      return (\n          <div className=\"timer\">\n              <div className=\"value\">{value}</div>\n              {/* <div className=\"text\">{texts[this.props.language].secondsText}</div> */}\n          </div>\n      );\n  }\n\n  stopMusic = () => {\n\n      this.setState({\n          playStatus: Sound.status.STOPPED,\n      });\n  }\n\n\n  render() {\n\n      const { songURL } = this.props;\n\n      const { playStatus, uniqueKey, isPlaying } = this.state;\n\n      return (\n          <div>\n              <Sound\n                  url={songURL}\n                  playStatus={playStatus}\n                  autoLoad\n              />\n\n              <div className={this.countdownIsDisplayed ? 'show' : 'hide'}>\n                  <CountdownCircleTimer\n                      key={uniqueKey}\n                      isPlaying={isPlaying}\n                      durationSeconds={SONG_TIMER_DURATION}\n                      colors={[['#004777', 0.33], ['#F7B801', 0.33], ['#A30000']]}\n                      renderTime={this.renderTime}\n                      size={90}\n                  />\n              </div>\n          </div>\n      );\n  }\n}\n\nexport default PlayerCountdown;\n\n// Put the information below in a README.md file later!\n\n// Circle Countdown Info https://www.npmjs.com/package/react-countdown-circle-timer\n\n// Number Countdown Info https://www.npmjs.com/package/react-countdown-now\n\n// React Sound Info https://www.npmjs.com/package/react-sound\n"]},"metadata":{},"sourceType":"module"}