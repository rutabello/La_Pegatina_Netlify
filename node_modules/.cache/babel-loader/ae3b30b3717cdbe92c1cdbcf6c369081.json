{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/YTPlayer/YTPlayer.js\";\nimport React, { Component } from 'react';\nimport YouTube from 'react-youtube';\nimport Button from '../Button/Button_YT';\nimport Shuffle from '../../Utils/Shuffle';\nimport './YTPlayer.css';\nimport QuizYT from '../QuizYT/QuizYT'; // import YTCountdown from '../YTCountdown/YTCountdown';\n// let info=props.info\n// // console.log(props.det)\n// console.log(info)\n\nclass YTPlayer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // data: {},\n      player: '',\n      title: '',\n      // videoUrl: '',\n      // isMuted: true,\n      fourShuffledSongsTitles: [],\n      // fourNonShuffledSongsTitles: [],\n      showButtons: true\n    };\n\n    this.VideoOnReady = event => {\n      // let player = event.target;\n      // access to player in all event handlers via event.target\n      // event.target.playVideo();\n      event.target.seekTo(20); // plays the video at 10s, in case the video has the name of the song at the start\n\n      event.target.mute();\n      this.setState({\n        player: event.target\n      }); // that prints in consolecthe name of the song\n      // this.setState({\n      //   data :{\n      //     info: event.target.playerInfo.videoData.title, //stored the title into a const\n      //     toString : () => {\n      //       return 'data'\n      //     }\n      //   }\n      // })\n      //  console.log(this.state.data)\n    };\n\n    this.VideoOnPlay = () => {\n      const {\n        title,\n        det\n      } = this.props;\n      const {\n        title: titleState\n      } = this.state; // since we have something called \"title\" in props and in state, we give a new name to the title in the state\n      // access to player in all event handlers via event.target\n      // const player = event.target\n      // const info= event.data\n      // console.log(info)\n      // alert(player)\n      // player.seekTo(20)\n      // alert(event.target.playerInfo.videoData.title)\n\n      this.setState({\n        // title:event.target.playerInfo.videoData.title,\n        // videoUrl: event.target.playerInfo.videoUrl,\n        // passing the title props to be written the same way\n        title\n      }); // store the array with 3 random titels in a const\n      // console.log(props.det)\n      // console.log(info);\n\n      const threeTitlesArr = det; // push inside the name of the title that is playing now\n\n      threeTitlesArr.push(titleState); // suffle all titles\n\n      const fourShuffledSongsTitles = Shuffle(threeTitlesArr); // keep the new array , where is included the title of the playing song in the state\n\n      this.setState({\n        fourShuffledSongsTitles\n      }); // console.log(fourShuffledSongsTitles);\n    };\n\n    this.unmuteVideo = () => {\n      this.state.player.unMute();\n      this.setState({\n        showButtons: false\n      });\n    };\n  }\n\n  render() {\n    const opts = {\n      height: '315',\n      width: '560',\n      // 560/315\n      // default 640 h-390\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n        modestbranding: 1,\n        //not big yt branding\n        controls: 0,\n        //the control not displayed\n        // mute: 1,// this mutes automaticly the video(in combination with the hidden control, the user can't unmute)\n        loop: 1,\n        start: 20,\n        //from where the video starts(at 20 s in case the title is at the beginning)\n        // end: 90,\n        rel: 0 //getting only related videos from the channel\n\n      }\n    };\n    console.log(opts);\n    const {\n      videoId\n    } = this.props;\n    console.log({\n      videoId\n    });\n    return React.createElement(\"div\", {\n      className: \"thegame\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"theYTPlayer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(YouTube, {\n      videoId: videoId,\n      opts: opts,\n      onReady: this.VideoOnReady,\n      onPlay: this.VideoOnPlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })), this.state.showButtons ? React.createElement(\"div\", {\n      className: \"btn-4-YT\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, this.state.fourShuffledSongsTitles.map(songTitle => {\n      return React.createElement(Button, {\n        unmute: this.unmuteVideo,\n        key: songTitle,\n        displayedSong: songTitle,\n        currentSong: this.state.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      });\n    })) //  /* : <YTCountdown questions={this.props.questions}/> } */}\n    : React.createElement(QuizYT, {\n      questions: this.props.questions,\n      stopPlaying: this.props.stopPlaying,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default YTPlayer; // <QuizYT url={this.state.videoUrl}","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/YTPlayer/YTPlayer.js"],"names":["React","Component","YouTube","Button","Shuffle","QuizYT","YTPlayer","state","player","title","fourShuffledSongsTitles","showButtons","VideoOnReady","event","target","seekTo","mute","setState","VideoOnPlay","det","props","titleState","threeTitlesArr","push","unmuteVideo","unMute","render","opts","height","width","playerVars","autoplay","modestbranding","controls","loop","start","rel","console","log","videoId","map","songTitle","questions","stopPlaying"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport YouTube from 'react-youtube';\nimport Button from '../Button/Button_YT';\nimport Shuffle from '../../Utils/Shuffle';\nimport './YTPlayer.css';\nimport QuizYT from '../QuizYT/QuizYT';\n// import YTCountdown from '../YTCountdown/YTCountdown';\n// let info=props.info\n// // console.log(props.det)\n// console.log(info)\nclass YTPlayer extends Component {\n    state = {\n        // data: {},\n        player: '',\n        title: '',\n        // videoUrl: '',\n        // isMuted: true,\n        fourShuffledSongsTitles: [],\n        // fourNonShuffledSongsTitles: [],\n        showButtons: true,\n    }\n\n    VideoOnReady = (event) => {\n    // let player = event.target;\n    // access to player in all event handlers via event.target\n    // event.target.playVideo();\n        event.target.seekTo(20);\n        // plays the video at 10s, in case the video has the name of the song at the start\n        event.target.mute();\n\n        this.setState({\n            player: event.target,\n        });\n\n    // that prints in consolecthe name of the song\n    // this.setState({\n    //   data :{\n    //     info: event.target.playerInfo.videoData.title, //stored the title into a const\n    //     toString : () => {\n    //       return 'data'\n    //     }\n    //   }\n    // })\n    //  console.log(this.state.data)\n    }\n    //   this.sendButtonSelection = e => {\n    //     this.setState({buttonSelection: e.target.value});\n    //     console.log(e.target.value);\n    // };\n\n    VideoOnPlay = () => {\n\n        const { title, det } = this.props;\n\n        const { title: titleState } = this.state;\n        // since we have something called \"title\" in props and in state, we give a new name to the title in the state\n\n        // access to player in all event handlers via event.target\n        // const player = event.target\n        // const info= event.data\n        // console.log(info)\n        // alert(player)\n        // player.seekTo(20)\n        // alert(event.target.playerInfo.videoData.title)\n\n        this.setState({\n            // title:event.target.playerInfo.videoData.title,\n            // videoUrl: event.target.playerInfo.videoUrl,\n            // passing the title props to be written the same way\n            title,\n        });\n        // store the array with 3 random titels in a const\n        // console.log(props.det)\n        // console.log(info);\n\n        const threeTitlesArr = det;\n        // push inside the name of the title that is playing now\n\n        threeTitlesArr.push(titleState);\n        // suffle all titles\n        const fourShuffledSongsTitles = Shuffle(threeTitlesArr);\n        // keep the new array , where is included the title of the playing song in the state\n\n        this.setState({\n            fourShuffledSongsTitles,\n        });\n        // console.log(fourShuffledSongsTitles);\n    }\n\n\n\nunmuteVideo =()=>{\n  this.state.player.unMute()\n  this.setState({\n    showButtons:false\n  })\n\n}\n\n\n  render() {\n    const opts = {\n      height: '315',\n      width: '560',\n      // 560/315\n      // default 640 h-390\n      playerVars: { // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n        modestbranding: 1,//not big yt branding\n        controls: 0,//the control not displayed\n        // mute: 1,// this mutes automaticly the video(in combination with the hidden control, the user can't unmute)\n        loop:1,\n        start: 20,//from where the video starts(at 20 s in case the title is at the beginning)\n        // end: 90,\n        rel: 0 //getting only related videos from the channel\n      }\n\n    };\n    console.log(opts)\n\n    const { videoId } = this.props;\n\n    console.log ({videoId})\n\n    return (\n      <div className='thegame'>\n      <div className='theYTPlayer'>\n      <YouTube\n          videoId={videoId}\n          opts={opts}\n          onReady={this.VideoOnReady}\n          onPlay={this.VideoOnPlay}\n        />\n        </div>\n\n      {/* <p>Hello {this.state.title}</p> */}\n      {/* the button that redirect on the yt page */}\n      {/* <button className='btn-see-video' onClick={()=> window.open(this.state.videoUrl, \"_blank\")}> */}\n       {/* <span className= 'text-btn-see-video'>See full video on Youtube</span></button> */}\n      {this.state.showButtons\n      ? <div className='btn-4-YT'>\n      {this.state.fourShuffledSongsTitles.map((songTitle) => {\n                return (\n                  <Button\n                    unmute={this.unmuteVideo}\n                    key={songTitle}\n                    displayedSong={songTitle}\n                    currentSong={this.state.title}\n                  />)})\n      }</div>\n    //  /* : <YTCountdown questions={this.props.questions}/> } */}\n      : <QuizYT   questions={this.props.questions}\n      stopPlaying={this.props.stopPlaying}\n      /> }\n\n      </div>\n    );\n\n  }\n}\n\n\nexport default YTPlayer;\n// <QuizYT url={this.state.videoUrl}"]},"metadata":{},"sourceType":"module"}