{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/YTPlayer/YTPlayer.js\";\nimport React, { Component } from 'react';\nimport YouTube from 'react-youtube';\nimport Button from '../Button/Button_YT';\nimport Shuffle from '../../Utils/Shuffle';\nimport './YTPlayer.css';\nimport QuizYT from '../QuizYT/QuizYT';\nimport texts from '../../../texts.json'; // import YTCountdown from '../YTCountdown/YTCountdown';\n// let info=props.info\n// // console.log(props.det)\n// console.log(info)\n\nclass YTPlayer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      player: '',\n      title: '',\n      fourShuffledSongsTitles: [],\n      showButtons: true // done: false,\n\n    };\n\n    this.VideoOnReady = event => {\n      // console.log(event.target)\n      // plays the video at 10s, in case the video has the name of the song at the start\n      event.target.seekTo(20);\n      event.target.mute();\n      this.setState({\n        player: event.target\n      });\n    };\n\n    this.VideoOnPlay = () => {\n      const {\n        title,\n        det\n      } = this.props; // alert(event.target.playerInfo.videoData.title)\n\n      this.setState({\n        // title:event.target.playerInfo.videoData.title,\n        // videoUrl: event.target.playerInfo.videoUrl,\n        // passing the title props to be written the same way\n        title\n      }); // store the array with 3 random titles in a const\n\n      const threeTitlesArr = det; // push inside the name of the title that is playing now\n\n      threeTitlesArr.push(title); // suffle all titles\n\n      const fourShuffledSongsTitles = Shuffle(threeTitlesArr); // keep the new array , where is included the title of the playing song in the state\n\n      this.setState({\n        fourShuffledSongsTitles\n      }); // console.log(fourShuffledSongsTitles);\n    };\n\n    this.VideoOnEnd = () => {\n      const {\n        stopPlaying\n      } = this.props;\n      stopPlaying();\n    };\n\n    this.unmuteVideo = () => {\n      const {\n        player\n      } = this.state;\n      player.unMute();\n      this.setState({\n        showButtons: false\n      });\n    };\n  }\n\n  render() {\n    const opts = {\n      height: '315',\n      width: '560',\n      // default 640 h-390\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n        modestbranding: 1,\n        // not big yt branding\n        controls: 0,\n        // the control not displayed\n        loop: 1,\n        start: 20,\n        // from where the video starts(at 20 s in case the title is at the beginning)\n        // end: 90,\n        rel: 0 // getting only related videos from the channel\n\n      }\n    };\n    const {\n      videoId,\n      questions,\n      stopPlaying,\n      language\n    } = this.props;\n    const {\n      showButtons,\n      fourShuffledSongsTitles,\n      title\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"thegame\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"theYTPlayer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(YouTube, {\n      videoId: videoId,\n      opts: opts,\n      onReady: this.VideoOnReady,\n      onPlay: this.VideoOnPlay // onPause={this.videoOnPause}\n      ,\n      onEnd: this.VideoOnEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })), showButtons ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"quiz-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, texts[language].youtubeQuestion), React.createElement(\"div\", {\n      className: \"btn-4-YT\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, fourShuffledSongsTitles.map(songTitle => React.createElement(Button, {\n      unmute: this.unmuteVideo,\n      key: songTitle,\n      displayedSong: songTitle,\n      currentSong: title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })))) : //  /* : <YTCountdown questions={this.props.questions} stopPlaying={this.props.stopPlaying}/> } */}\n    React.createElement(QuizYT, {\n      questions: questions,\n      stopPlaying: stopPlaying,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default YTPlayer;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/YTPlayer/YTPlayer.js"],"names":["React","Component","YouTube","Button","Shuffle","QuizYT","texts","YTPlayer","state","player","title","fourShuffledSongsTitles","showButtons","VideoOnReady","event","target","seekTo","mute","setState","VideoOnPlay","det","props","threeTitlesArr","push","VideoOnEnd","stopPlaying","unmuteVideo","unMute","render","opts","height","width","playerVars","autoplay","modestbranding","controls","loop","start","rel","videoId","questions","language","youtubeQuestion","map","songTitle"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport YouTube from 'react-youtube';\nimport Button from '../Button/Button_YT';\nimport Shuffle from '../../Utils/Shuffle';\nimport './YTPlayer.css';\nimport QuizYT from '../QuizYT/QuizYT';\nimport texts from '../../../texts.json';\n// import YTCountdown from '../YTCountdown/YTCountdown';\n// let info=props.info\n// // console.log(props.det)\n// console.log(info)\nclass YTPlayer extends Component {\n    state = {\n        player: '',\n        title: '',\n        fourShuffledSongsTitles: [],\n        showButtons: true,\n        // done: false,\n    }\n\n    // access to player in all event handlers via event.target\n    VideoOnReady = (event) => {\n    // console.log(event.target)\n    // plays the video at 10s, in case the video has the name of the song at the start\n        event.target.seekTo(20);\n        event.target.mute();\n\n        this.setState({\n            player: event.target,\n        });\n    }\n\n    // getting the title from the object to coincide with the other names that will be in the buttons\n    VideoOnPlay = () => {\n\n        const { title, det } = this.props;\n        // alert(event.target.playerInfo.videoData.title)\n\n        this.setState({\n            // title:event.target.playerInfo.videoData.title,\n            // videoUrl: event.target.playerInfo.videoUrl,\n            // passing the title props to be written the same way\n            title,\n        });\n\n        // store the array with 3 random titles in a const\n\n        const threeTitlesArr = det;\n\n        // push inside the name of the title that is playing now\n\n        threeTitlesArr.push(title);\n        // suffle all titles\n        const fourShuffledSongsTitles = Shuffle(threeTitlesArr);\n        // keep the new array , where is included the title of the playing song in the state\n\n        this.setState({\n            fourShuffledSongsTitles,\n        });\n        // console.log(fourShuffledSongsTitles);\n    }\n\n    // when the video end it send you to the endgame screen\n    VideoOnEnd = () => {\n\n        const { stopPlaying } = this.props;\n\n        stopPlaying();\n    }\n    // videoOnPause =(event)=>{\n    //     this.props.stopPlaying()\n    // }\n\n    // the video unmute when the answer is right and the button disappear\n    unmuteVideo = () => {\n\n        const { player } = this.state;\n\n        player.unMute();\n\n        this.setState({\n            showButtons: false,\n        });\n    }\n\n\n    render() {\n        const opts = {\n            height: '315',\n            width: '560',\n\n            // default 640 h-390\n            playerVars: { // https://developers.google.com/youtube/player_parameters\n                autoplay: 1,\n                modestbranding: 1, // not big yt branding\n                controls: 0, // the control not displayed\n                loop: 1,\n                start: 20, // from where the video starts(at 20 s in case the title is at the beginning)\n                // end: 90,\n                rel: 0, // getting only related videos from the channel\n            },\n        };\n\n        const { videoId, questions, stopPlaying, language } = this.props;\n\n        const { showButtons, fourShuffledSongsTitles, title } = this.state;\n\n        return (\n            <div className=\"thegame\">\n                <div className=\"theYTPlayer\">\n                    <YouTube\n                        videoId={videoId}\n                        opts={opts}\n                        onReady={this.VideoOnReady}\n                        onPlay={this.VideoOnPlay}\n                        // onPause={this.videoOnPause}\n                        onEnd={this.VideoOnEnd}\n                    />\n                </div>\n\n                {/* <p>Hello {this.state.title}</p> */}\n                {/* the button that redirect on the yt page */}\n                {/* <button className='btn-see-video' onClick={()=> window.open(this.state.videoUrl, \"_blank\")}> */}\n                {/* <span className= 'text-btn-see-video'>See full video on Youtube</span></button> */}\n                {showButtons\n                    ? (\n                        <div>\n                            <h4 className=\"quiz-text\">{texts[language].youtubeQuestion}</h4>\n                            <div className=\"btn-4-YT\">\n                                {fourShuffledSongsTitles.map((songTitle) => (\n                                    <Button\n                                        unmute={this.unmuteVideo}\n                                        key={songTitle}\n                                        displayedSong={songTitle}\n                                        currentSong={title}\n                                    />\n                                ))}\n                            </div>\n                        </div>\n                    )\n                    //  /* : <YTCountdown questions={this.props.questions} stopPlaying={this.props.stopPlaying}/> } */}\n                    : (\n                        <QuizYT\n                            questions={questions}\n                            stopPlaying={stopPlaying}\n                        />\n                    )}\n            </div>\n        );\n    }\n}\n\n\nexport default YTPlayer;\n"]},"metadata":{},"sourceType":"module"}