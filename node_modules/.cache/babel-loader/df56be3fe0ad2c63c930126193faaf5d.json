{"ast":null,"code":"var _jsxFileName = \"/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/YTPlayer/YTPlayer.js\";\nimport React, { Component } from 'react';\nimport YouTube from 'react-youtube';\nimport Button from '../Button/Button_YT';\nimport Shuffle from '../../Utils/Shuffle';\nimport './YTPlayer.css';\nimport QuizYT from '../QuizYT/QuizYT';\nimport texts from '../../../texts.json'; // import YTCountdown from '../YTCountdown/YTCountdown';\n// let info=props.info\n// // console.log(props.det)\n// console.log(info)\n\nclass YTPlayer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // data: {},\n      player: '',\n      title: '',\n      // videoUrl: '',\n      // isMuted: true,\n      fourShuffledSongsTitles: [],\n      // fourNonShuffledSongsTitles: [],\n      showButtons: true\n    };\n\n    this.VideoOnReady = event => {\n      // let player = event.target;\n      // access to player in all event handlers via event.target\n      // event.target.playVideo();\n      event.target.seekTo(20); // plays the video at 10s, in case the video has the name of the song at the start\n\n      event.target.mute();\n      this.setState({\n        player: event.target\n      }); // that prints in console the name of the song\n      // this.setState({\n      //   data :{\n      //     info: event.target.playerInfo.videoData.title, //stored the title into a const\n      //     toString : () => {\n      //       return 'data'\n      //     }\n      //   }\n      // })\n      //  console.log(this.state.data)\n    };\n\n    this.VideoOnPlay = () => {\n      const {\n        title,\n        det\n      } = this.props; // since we have something called \"title\" in props and in state, we give a new name to the title in the state\n      // access to player in all event handlers via event.target\n      // const player = event.target\n      // const info= event.data\n      // console.log(info)\n      // alert(player)\n      // player.seekTo(20)\n      // alert(event.target.playerInfo.videoData.title)\n\n      this.setState({\n        // title:event.target.playerInfo.videoData.title,\n        // videoUrl: event.target.playerInfo.videoUrl,\n        // passing the title props to be written the same way\n        title\n      }); // store the array with 3 random titels in a const\n      // console.log(props.det)\n      // console.log(info);\n\n      const threeTitlesArr = det; // push inside the name of the title that is playing now\n\n      threeTitlesArr.push(title); // suffle all titles\n\n      const fourShuffledSongsTitles = Shuffle(threeTitlesArr); // keep the new array , where is included the title of the playing song in the state\n\n      this.setState({\n        fourShuffledSongsTitles\n      }); // console.log(fourShuffledSongsTitles);\n    };\n\n    this.unmuteVideo = () => {\n      const {\n        player\n      } = this.state;\n      player.unMute();\n      this.setState({\n        showButtons: false\n      });\n    };\n  }\n\n  render() {\n    const opts = {\n      height: '315',\n      width: '560',\n      // 560/315\n      // default 640 h-390\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n        modestbranding: 1,\n        // not big yt branding\n        controls: 0,\n        // the control not displayed\n        // mute: 1,// this mutes automaticly the video(in combination with the hidden control, the user can't unmute)\n        loop: 1,\n        start: 20,\n        // from where the video starts(at 20 s in case the title is at the beginning)\n        // end: 90,\n        rel: 0 // getting only related videos from the channel\n\n      }\n    };\n    const {\n      videoId,\n      questions,\n      stopPlaying,\n      language\n    } = this.props;\n    const {\n      showButtons,\n      fourShuffledSongsTitles,\n      title\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"thegame\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"theYTPlayer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(YouTube, {\n      videoId: videoId,\n      opts: opts,\n      onReady: this.VideoOnReady,\n      onPlay: this.VideoOnPlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })), showButtons ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, texts[language].youtubeQuestion), React.createElement(\"div\", {\n      className: \"btn-4-YT\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, fourShuffledSongsTitles.map(songTitle => React.createElement(Button, {\n      unmute: this.unmuteVideo,\n      key: songTitle,\n      displayedSong: songTitle,\n      currentSong: title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })))) : //  /* : <YTCountdown questions={this.props.questions}/> } */}\n    React.createElement(QuizYT, {\n      questions: questions,\n      stopPlaying: stopPlaying,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default YTPlayer;","map":{"version":3,"sources":["/Users/rut/Documents/WCS Bootcamp/Projects/La Pegatina/LaPegatina/src/Components/Youtube/YTPlayer/YTPlayer.js"],"names":["React","Component","YouTube","Button","Shuffle","QuizYT","texts","YTPlayer","state","player","title","fourShuffledSongsTitles","showButtons","VideoOnReady","event","target","seekTo","mute","setState","VideoOnPlay","det","props","threeTitlesArr","push","unmuteVideo","unMute","render","opts","height","width","playerVars","autoplay","modestbranding","controls","loop","start","rel","videoId","questions","stopPlaying","language","youtubeQuestion","map","songTitle"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport YouTube from 'react-youtube';\nimport Button from '../Button/Button_YT';\nimport Shuffle from '../../Utils/Shuffle';\nimport './YTPlayer.css';\nimport QuizYT from '../QuizYT/QuizYT';\nimport texts from '../../../texts.json';\n// import YTCountdown from '../YTCountdown/YTCountdown';\n// let info=props.info\n// // console.log(props.det)\n// console.log(info)\nclass YTPlayer extends Component {\n    state = {\n        // data: {},\n        player: '',\n        title: '',\n        // videoUrl: '',\n        // isMuted: true,\n        fourShuffledSongsTitles: [],\n        // fourNonShuffledSongsTitles: [],\n        showButtons: true,\n    }\n\n    VideoOnReady = (event) => {\n    // let player = event.target;\n    // access to player in all event handlers via event.target\n    // event.target.playVideo();\n        event.target.seekTo(20);\n        // plays the video at 10s, in case the video has the name of the song at the start\n        event.target.mute();\n\n        this.setState({\n            player: event.target,\n        });\n\n    // that prints in console the name of the song\n    // this.setState({\n    //   data :{\n    //     info: event.target.playerInfo.videoData.title, //stored the title into a const\n    //     toString : () => {\n    //       return 'data'\n    //     }\n    //   }\n    // })\n    //  console.log(this.state.data)\n    }\n    //   this.sendButtonSelection = e => {\n    //     this.setState({buttonSelection: e.target.value});\n    //     console.log(e.target.value);\n    // };\n\n    VideoOnPlay = () => {\n\n        const { title, det } = this.props;\n\n        // since we have something called \"title\" in props and in state, we give a new name to the title in the state\n\n        // access to player in all event handlers via event.target\n        // const player = event.target\n        // const info= event.data\n        // console.log(info)\n        // alert(player)\n        // player.seekTo(20)\n        // alert(event.target.playerInfo.videoData.title)\n\n        this.setState({\n            // title:event.target.playerInfo.videoData.title,\n            // videoUrl: event.target.playerInfo.videoUrl,\n            // passing the title props to be written the same way\n            title,\n        });\n        // store the array with 3 random titels in a const\n        // console.log(props.det)\n        // console.log(info);\n\n        const threeTitlesArr = det;\n\n        // push inside the name of the title that is playing now\n\n        threeTitlesArr.push(title);\n        // suffle all titles\n        const fourShuffledSongsTitles = Shuffle(threeTitlesArr);\n        // keep the new array , where is included the title of the playing song in the state\n\n        this.setState({\n            fourShuffledSongsTitles,\n        });\n        // console.log(fourShuffledSongsTitles);\n    }\n\n    unmuteVideo = () => {\n\n        const { player } = this.state;\n\n        player.unMute();\n\n        this.setState({\n            showButtons: false,\n        });\n    }\n\n\n    render() {\n        const opts = {\n            height: '315',\n            width: '560',\n            // 560/315\n            // default 640 h-390\n            playerVars: { // https://developers.google.com/youtube/player_parameters\n                autoplay: 1,\n                modestbranding: 1, // not big yt branding\n                controls: 0, // the control not displayed\n                // mute: 1,// this mutes automaticly the video(in combination with the hidden control, the user can't unmute)\n                loop: 1,\n                start: 20, // from where the video starts(at 20 s in case the title is at the beginning)\n                // end: 90,\n                rel: 0, // getting only related videos from the channel\n            },\n        };\n\n        const { videoId, questions, stopPlaying, language } = this.props;\n\n        const { showButtons, fourShuffledSongsTitles, title } = this.state;\n\n        return (\n            <div className=\"thegame\">\n                <div className=\"theYTPlayer\">\n                    <YouTube\n                        videoId={videoId}\n                        opts={opts}\n                        onReady={this.VideoOnReady}\n                        onPlay={this.VideoOnPlay}\n                    />\n                </div>\n\n                {/* <p>Hello {this.state.title}</p> */}\n                {/* the button that redirect on the yt page */}\n                {/* <button className='btn-see-video' onClick={()=> window.open(this.state.videoUrl, \"_blank\")}> */}\n                {/* <span className= 'text-btn-see-video'>See full video on Youtube</span></button> */}\n                {showButtons\n                    ? (\n                        <div>\n                            <p>{texts[language].youtubeQuestion}</p>\n                            <div className=\"btn-4-YT\">\n                                {fourShuffledSongsTitles.map((songTitle) => (\n                                    <Button\n                                        unmute={this.unmuteVideo}\n                                        key={songTitle}\n                                        displayedSong={songTitle}\n                                        currentSong={title}\n                                    />\n                                ))}\n                            </div>\n                        </div>\n                    )\n                    //  /* : <YTCountdown questions={this.props.questions}/> } */}\n                    : (\n                        <QuizYT\n                            questions={questions}\n                            stopPlaying={stopPlaying}\n                        />\n                    )}\n            </div>\n        );\n    }\n}\n\n\nexport default YTPlayer;\n"]},"metadata":{},"sourceType":"module"}